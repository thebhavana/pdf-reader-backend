[{"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "React Mastery Path  \n \nPhase 1: React Fundamentals \n1. JSX (JavaScript XML) \n\uf0b7 \nWhat: A syntax extension for JavaScript that looks like HTML and is used to describe \nUI structure in React. \n\uf0b7 \nWhy Important: Enables declarative UI creation and readable component structure. \n\uf0b7 \nUnder the Hood: JSX is transpiled to React.createElement() by Babel, which builds \na virtual DOM tree. \n\uf0b7 \nUsed in Real Apps: Defining component UI layout. \n\uf0b7 \nExample: \n\uf0b7 \nconst Welcome = () => <h1>Hello, SafeWeb AI User!</h1>; \n\uf0b7 \nHands-On Task: Create a Header, Footer, and Landing JSX layout. \n\uf0b7 \nInterview Question: What happens to JSX during the build process? \n\uf0b7 \nSafeWeb AI Use: Structure landing pages, hero sections, or onboarding screens. \n2. Components (Functional & Class) \n\uf0b7 \nWhat: Independent, reusable pieces of UI. \n\uf0b7 \nWhy Important: Encapsulates logic and markup for reuse and readability. \n\uf0b7 \nUnder the Hood: Each component maintains its own lifecycle and props/context \nhandling. \n\uf0b7 \nUsed in Real Apps: Every UI block (Navbar, Card, Form) is a component. \n\uf0b7 \nExample: \n\uf0b7 \nfunction Card(props) { \n\uf0b7 \n  return <div className=\"card\">{props.content}</div>; \n\uf0b7 \n} \n\uf0b7 \nHands-On Task: Build a FeatureCard component for highlighting SafeWeb AI \nfeatures. \n\uf0b7 \nInterview Question: Difference between functional and class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables c", "file_name": "React Notes.pdf"}, {"page": 1, "text": "nd class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables communication between components. \n\uf0b7 \nUnder the Hood: Props are passed as parameters to functions. \n\uf0b7 \nUsed in Real Apps: Passing user info, config, styles. \n\uf0b7 \nExample: \n\uf0b7 \nconst Greeting = ({ name }) => <h2>Hello, {name}</h2>; \n\uf0b7 \nHands-On Task: Pass site scan results from parent to child. \n", "file_name": "React Notes.pdf"}, {"page": 2, "text": "\uf0b7 \nInterview Question: Can a child modify props? \n\uf0b7 \nSafeWeb AI Use: Show user-specific security reports. \n4. State \n\uf0b7 \nWhat: A built-in object used to hold dynamic data. \n\uf0b7 \nWhy Important: Controls component behavior over time. \n\uf0b7 \nUnder the Hood: React uses useState to store and re-render components on update. \n\uf0b7 \nUsed in Real Apps: Handling form inputs, toggles, modals. \n\uf0b7 \nExample: \n\uf0b7 \nconst [email, setEmail] = useState(''); \n\uf0b7 \nHands-On Task: Build a login form managing email/password state. \n\uf0b7 \nInterview Question: How does state cause a re-render? \n\uf0b7 \nSafeWeb AI Use: Manage user input and scan configuration. \n5. Event Handling \n\uf0b7 \nWhat: Listening and responding to user events. \n\uf0b7 \nWhy Important: Powers interactivity. \n\uf0b7 \nUnder the Hood: Synthetic event system based on native events. \n\uf0b7 \nUsed in Real Apps: Form submission, buttons, toggles. \n\uf0b7 \nExample: \n\uf0b7 \n<button onClick={handleScan}>Start Scan</button> \n\uf0b7 \nHands-On Task: Add a \u201cStart Scan\u201d button with click handler. \n\uf0b7 \nInterview Question: What is a synthetic event? \n\uf0b7 \nSafeWeb AI Use: Trigger a website scan. \n6. Conditional Rendering \n\uf0b7 \nWhat: Rendering different UI based on conditions. \n\uf0b7 \nWhy Important: Enhances UX by showing relevant data. \n\uf0b7 \nUnder the Hood: Simple JavaScript logic (ternaries, &&, if). \n\uf0b7 \nUsed in Real Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to impl", "file_name": "React Notes.pdf"}, {"page": 2, "text": "al Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to implement conditional rendering? \n\uf0b7 \nSafeWeb AI Use: Show different UI during scan progress. \n7. Lists and Keys \n\uf0b7 \nWhat: Rendering multiple elements using map() with unique key props. \n\uf0b7 \nWhy Important: Efficient rendering and reconciliation. \n\uf0b7 \nUnder the Hood: Keys help React identify changed, added, or removed items. \n\uf0b7 \nUsed in Real Apps: Listing scan results, history logs. \n\uf0b7 \nExample: \n", "file_name": "React Notes.pdf"}, {"page": 3, "text": "\uf0b7 \n{urls.map((url) => <li key={url}>{url}</li>)} \n\uf0b7 \nHands-On Task: Display a list of scanned URLs. \n\uf0b7 \nInterview Question: Why are keys important in lists? \n\uf0b7 \nSafeWeb AI Use: Show scanned website list. \n8. useEffect \n\uf0b7 \nWhat: Side effects like data fetching, subscriptions. \n\uf0b7 \nWhy Important: Handles operations outside render. \n\uf0b7 \nUnder the Hood: Scheduled after paint, cleanup via return function. \n\uf0b7 \nUsed in Real Apps: Fetching scan results, triggering alerts. \n\uf0b7 \nExample: \n\uf0b7 \nuseEffect(() => { fetchData(); }, []); \n\uf0b7 \nHands-On Task: Fetch dummy scan data on load. \n\uf0b7 \nInterview Question: How does the dependency array work? \n\uf0b7 \nSafeWeb AI Use: Load recent scan history on dashboard. \n9. Hooks (Intro) \n\uf0b7 \nWhat: Special functions to use React features in functional components. \n\uf0b7 \nWhy Important: Replaces classes with reusable logic. \n\uf0b7 \nUnder the Hood: Hooks use internal closures and React's fiber scheduler. \n\uf0b7 \nUsed in Real Apps: All stateful or side-effect components. \n\uf0b7 \nExample: useState, useEffect \n\uf0b7 \nHands-On Task: Use useState and useEffect together. \n\uf0b7 \nInterview Question: Why can\u2019t hooks be called conditionally? \n\uf0b7 \nSafeWeb AI Use: State and side effect logic. \n10. Forms \n\uf0b7 \nWhat: Collecting and managing user input. \n\uf0b7 \nWhy Important: Central for user interaction. \n\uf0b7 \nUnder the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 ", "file_name": "React Notes.pdf"}, {"page": 3, "text": "r the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 \nHands-On Task: Build scan request form. \n\uf0b7 \nInterview Question: Difference between controlled and uncontrolled components? \n\uf0b7 \nSafeWeb AI Use: Get website input from users. \n11. Context API \n\uf0b7 \nWhat: Global state manager for passing data without prop drilling. \n\uf0b7 \nWhy Important: Simplifies state sharing. \n\uf0b7 \nUnder the Hood: Uses React context provider/consumer. \n\uf0b7 \nUsed in Real Apps: Theme, auth, locale. \n", "file_name": "React Notes.pdf"}, {"page": 4, "text": "\uf0b7 \nExample: \n\uf0b7 \nconst UserContext = React.createContext(); \n\uf0b7 \nHands-On Task: Create AuthContext. \n\uf0b7 \nInterview Question: How does context re-render consumers? \n\uf0b7 \nSafeWeb AI Use: Share user data across pages. \n12. React Router \n\uf0b7 \nWhat: Routing library to handle navigation. \n\uf0b7 \nWhy Important: Enables multi-page apps. \n\uf0b7 \nUnder the Hood: Uses HTML5 history API. \n\uf0b7 \nUsed in Real Apps: Page navigation. \n\uf0b7 \nExample: \n\uf0b7 \n<Route path=\"/scan\" element={<Scan />} /> \n\uf0b7 \nHands-On Task: Setup Login, Dashboard, Scan routes. \n\uf0b7 \nInterview Question: Difference between browser and hash routers? \n\uf0b7 \nSafeWeb AI Use: Navigate between sections. \n13. Custom Hooks \n\uf0b7 \nWhat: User-defined reusable hook functions. \n\uf0b7 \nWhy Important: Abstraction and reuse of logic. \n\uf0b7 \nUnder the Hood: Functions that call other hooks. \n\uf0b7 \nUsed in Real Apps: Reusable logic blocks. \n\uf0b7 \nExample: useAuth, useScanStatus \n\uf0b7 \nHands-On Task: Create useAuthGuard. \n\uf0b7 \nInterview Question: Naming rule for hooks? \n\uf0b7 \nSafeWeb AI Use: Custom logic management. \n14. useMemo & useCallback \n\uf0b7 \nWhat: Memoization hooks to optimize performance. \n\uf0b7 \nWhy Important: Prevents unnecessary recalculations or re-renders. \n\uf0b7 \nUnder the Hood: Caches previous return values. \n\uf0b7 \nUsed in Real Apps: Expensive operations, function refs. \n\uf0b7 \nExample: \n\uf0b7 \nconst memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. ", "file_name": "React Notes.pdf"}, {"page": 4, "text": "st memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. \n15. Refs and useRef \n\uf0b7 \nWhat: Direct DOM access or persist values across renders. \n\uf0b7 \nWhy Important: Needed for focus, timers, scroll. \n\uf0b7 \nUnder the Hood: Maintains mutable .current reference. \n", "file_name": "React Notes.pdf"}, {"page": 5, "text": "\uf0b7 \nUsed in Real Apps: Form fields, animations. \n\uf0b7 \nExample: inputRef.current.focus() \n\uf0b7 \nHands-On Task: Focus input on mount. \n\uf0b7 \nInterview Question: When to use refs? \n\uf0b7 \nSafeWeb AI Use: Scroll to report. \n16. Error Boundaries \n\uf0b7 \nWhat: Catch and handle render errors. \n\uf0b7 \nWhy Important: Prevent crashes. \n\uf0b7 \nUnder the Hood: Uses lifecycle methods (componentDidCatch). \n\uf0b7 \nUsed in Real Apps: Wrapping entire app/components. \n\uf0b7 \nExample: Class-based error catcher. \n\uf0b7 \nHands-On Task: Create ErrorBoundary wrapper. \n\uf0b7 \nInterview Question: Can hooks catch errors? \n\uf0b7 \nSafeWeb AI Use: Catch scan/report failures. \n17. Code Splitting \n\uf0b7 \nWhat: Load JS bundles on demand. \n\uf0b7 \nWhy Important: Reduces initial load. \n\uf0b7 \nUnder the Hood: Uses React.lazy and dynamic import. \n\uf0b7 \nUsed in Real Apps: Lazy-loading routes/pages. \n\uf0b7 \nExample: \n\uf0b7 \nconst Scan = React.lazy(() => import('./Scan')); \n\uf0b7 \nHands-On Task: Split heavy components. \n\uf0b7 \nInterview Question: Difference between lazy and suspense? \n\uf0b7 \nSafeWeb AI Use: Speed up first load. \n18. Higher Order Components \n\uf0b7 \nWhat: Functions returning components. \n\uf0b7 \nWhy Important: Reusable logic decorators. \n\uf0b7 \nUnder the Hood: Functional pattern. \n\uf0b7 \nUsed in Real Apps: Permissions, tracking. \n\uf0b7 \nExample: withLogging(Component) \n\uf0b7 \nHands-On Task: Create HOC for authentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Impo", "file_name": "React Notes.pdf"}, {"page": 5, "text": "uthentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Important: Flexible pattern. \n\uf0b7 \nUnder the Hood: Functions as children. \n\uf0b7 \nUsed in Real Apps: Sliders, animations. \n", "file_name": "React Notes.pdf"}, {"page": 6, "text": "\uf0b7 \nExample: <DataProvider render={(data) => <Chart data={data} />} \n\uf0b7 \nHands-On Task: Create MouseTracker. \n\uf0b7 \nInterview Question: Downsides of render props? \n\uf0b7 \nSafeWeb AI Use: Share UI logic. \n20. State Management \n\uf0b7 \nWhat: Tools to manage complex app state. \n\uf0b7 \nWhy Important: Scalability. \n\uf0b7 \nUnder the Hood: Central store and dispatch pattern. \n\uf0b7 \nUsed in Real Apps: Redux, Zustand. \n\uf0b7 \nExample: useReducer, Redux store \n\uf0b7 \nHands-On Task: Manage scan logs in global state. \n\uf0b7 \nInterview Question: Redux vs context? \n\uf0b7 \nSafeWeb AI Use: Global scan/auth state. \n21. Axios / Fetch \n\uf0b7 \nWhat: HTTP libraries to talk to APIs. \n\uf0b7 \nWhy Important: Core for data interaction. \n\uf0b7 \nUnder the Hood: Promise-based APIs. \n\uf0b7 \nUsed in Real Apps: Backend communication. \n\uf0b7 \nExample: axios.get('/api/report') \n\uf0b7 \nHands-On Task: Fetch scan results. \n\uf0b7 \nInterview Question: Axios vs fetch? \n\uf0b7 \nSafeWeb AI Use: Talk to scan API. \n22. Folder Structure \n\uf0b7 \nWhat: Organizing codebase. \n\uf0b7 \nWhy Important: Maintainability. \n\uf0b7 \nUnder the Hood: Logical separation. \n\uf0b7 \nUsed in Real Apps: Feature/domain-based. \n\uf0b7 \nExample: src/components, src/services \n\uf0b7 \nHands-On Task: Restructure SafeWeb AI project. \n\uf0b7 \nInterview Question: Best practices for large apps? \n\uf0b7 \nSafeWeb AI Use: Scale codebase. \n23. PropTypes / TypeScript \n\uf0b7 \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.p", "file_name": "React Notes.pdf"}, {"page": 6, "text": " \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.propTypes = { name: PropTypes.string } \n", "file_name": "React Notes.pdf"}, {"page": 7, "text": "\uf0b7 \nHands-On Task: Add PropTypes to core components. \n\uf0b7 \nInterview Question: TS vs PropTypes? \n\uf0b7 \nSafeWeb AI Use: Ensure correct data handling. \n24. Testing (Jest + RTL) \n\uf0b7 \nWhat: Automated validation of logic and UI. \n\uf0b7 \nWhy Important: Prevent regressions. \n\uf0b7 \nUnder the Hood: Simulates components. \n\uf0b7 \nUsed in Real Apps: CI pipelines. \n\uf0b7 \nExample: expect(getByText('Welcome')).toBeInTheDocument() \n\uf0b7 \nHands-On Task: Test login and scan page. \n\uf0b7 \nInterview Question: Unit vs integration test? \n\uf0b7 \nSafeWeb AI Use: Bug-free reliability. \n \n \nReact Interview Questions & Precise Answers \n \n1. What happens to JSX during the build process? \no JSX is transpiled by Babel into React.createElement() calls that build the \nvirtual DOM. \n2. Difference between functional and class components? \no Functional: Simple functions using hooks. Class: ES6 classes using lifecycle \nmethods. \n3. Can a child modify props? \no No. Props are read-only; only the parent can change them. \n4. How does state cause a re-render? \no Calling setState triggers React\u2019s scheduler to re-render that component with \nupdated state. \n5. What is a synthetic event? \no A cross-browser wrapper around native events, provided by React for \nconsistency. \n6. Ways to implement conditional rendering? \no \nif/else, ternary ? :, logical AND &&, IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useE", "file_name": "React Notes.pdf"}, {"page": 7, "text": ", IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useEffect? \no It determines when the effect runs. Empty array means run once. Include variables \nto trigger rerun when they change. \n9. Why can\u2019t hooks be called conditionally? \n", "file_name": "React Notes.pdf"}, {"page": 8, "text": "o Because React relies on the order of hooks. Conditional calls break this order, \ncausing bugs. \n10. Difference between controlled and uncontrolled components? \no Controlled: state-driven. Uncontrolled: DOM-driven (using refs). \n11. How does context re-render consumers? \no When context value changes, all consumers using that context re-render. \n12. Difference between browser and hash routers? \no BrowserRouter uses HTML5 history API. HashRouter uses URL hash (#) for \nrouting. \n13. Naming rule for custom hooks? \no Must start with use to let React track them internally. \n14. When does useMemo recalculate? \no When any dependency in its dependency array changes. \n15. When to use refs? \no When you need direct DOM access or to persist values without triggering re-\nrenders. \n16. Can hooks catch errors? \no No. Only class-based error boundaries can catch render-time errors. \n17. Difference between lazy and suspense? \no \nlazy dynamically imports components. Suspense wraps lazy-loaded components \nto handle loading fallback. \n18. Compare HOCs with hooks? \no HOCs wrap components for reuse. Hooks reuse logic inside functional \ncomponents. \n19. Downsides of render props? \no Can lead to deeply nested structures (callback hell). \n20. Redux vs Context? \no Redux is for complex/global state with middleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps fo", "file_name": "React Notes.pdf"}, {"page": 8, "text": "dleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps folder structure? \no Feature-based or domain-based structure with clear separation of concerns. \n23. TypeScript vs PropTypes? \no TypeScript checks types at compile-time. PropTypes check at runtime and are \nlimited. \n24. Unit vs integration test? \no Unit: test single component/function. Integration: test interactions between \ncomponents. \n \n \n", "file_name": "React Notes.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "React Mastery Path  \n \nPhase 1: React Fundamentals \n1. JSX (JavaScript XML) \n\uf0b7 \nWhat: A syntax extension for JavaScript that looks like HTML and is used to describe \nUI structure in React. \n\uf0b7 \nWhy Important: Enables declarative UI creation and readable component structure. \n\uf0b7 \nUnder the Hood: JSX is transpiled to React.createElement() by Babel, which builds \na virtual DOM tree. \n\uf0b7 \nUsed in Real Apps: Defining component UI layout. \n\uf0b7 \nExample: \n\uf0b7 \nconst Welcome = () => <h1>Hello, SafeWeb AI User!</h1>; \n\uf0b7 \nHands-On Task: Create a Header, Footer, and Landing JSX layout. \n\uf0b7 \nInterview Question: What happens to JSX during the build process? \n\uf0b7 \nSafeWeb AI Use: Structure landing pages, hero sections, or onboarding screens. \n2. Components (Functional & Class) \n\uf0b7 \nWhat: Independent, reusable pieces of UI. \n\uf0b7 \nWhy Important: Encapsulates logic and markup for reuse and readability. \n\uf0b7 \nUnder the Hood: Each component maintains its own lifecycle and props/context \nhandling. \n\uf0b7 \nUsed in Real Apps: Every UI block (Navbar, Card, Form) is a component. \n\uf0b7 \nExample: \n\uf0b7 \nfunction Card(props) { \n\uf0b7 \n  return <div className=\"card\">{props.content}</div>; \n\uf0b7 \n} \n\uf0b7 \nHands-On Task: Build a FeatureCard component for highlighting SafeWeb AI \nfeatures. \n\uf0b7 \nInterview Question: Difference between functional and class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables c", "file_name": "React Notes.pdf"}, {"page": 1, "text": "nd class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables communication between components. \n\uf0b7 \nUnder the Hood: Props are passed as parameters to functions. \n\uf0b7 \nUsed in Real Apps: Passing user info, config, styles. \n\uf0b7 \nExample: \n\uf0b7 \nconst Greeting = ({ name }) => <h2>Hello, {name}</h2>; \n\uf0b7 \nHands-On Task: Pass site scan results from parent to child. \n", "file_name": "React Notes.pdf"}, {"page": 2, "text": "\uf0b7 \nInterview Question: Can a child modify props? \n\uf0b7 \nSafeWeb AI Use: Show user-specific security reports. \n4. State \n\uf0b7 \nWhat: A built-in object used to hold dynamic data. \n\uf0b7 \nWhy Important: Controls component behavior over time. \n\uf0b7 \nUnder the Hood: React uses useState to store and re-render components on update. \n\uf0b7 \nUsed in Real Apps: Handling form inputs, toggles, modals. \n\uf0b7 \nExample: \n\uf0b7 \nconst [email, setEmail] = useState(''); \n\uf0b7 \nHands-On Task: Build a login form managing email/password state. \n\uf0b7 \nInterview Question: How does state cause a re-render? \n\uf0b7 \nSafeWeb AI Use: Manage user input and scan configuration. \n5. Event Handling \n\uf0b7 \nWhat: Listening and responding to user events. \n\uf0b7 \nWhy Important: Powers interactivity. \n\uf0b7 \nUnder the Hood: Synthetic event system based on native events. \n\uf0b7 \nUsed in Real Apps: Form submission, buttons, toggles. \n\uf0b7 \nExample: \n\uf0b7 \n<button onClick={handleScan}>Start Scan</button> \n\uf0b7 \nHands-On Task: Add a \u201cStart Scan\u201d button with click handler. \n\uf0b7 \nInterview Question: What is a synthetic event? \n\uf0b7 \nSafeWeb AI Use: Trigger a website scan. \n6. Conditional Rendering \n\uf0b7 \nWhat: Rendering different UI based on conditions. \n\uf0b7 \nWhy Important: Enhances UX by showing relevant data. \n\uf0b7 \nUnder the Hood: Simple JavaScript logic (ternaries, &&, if). \n\uf0b7 \nUsed in Real Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to impl", "file_name": "React Notes.pdf"}, {"page": 2, "text": "al Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to implement conditional rendering? \n\uf0b7 \nSafeWeb AI Use: Show different UI during scan progress. \n7. Lists and Keys \n\uf0b7 \nWhat: Rendering multiple elements using map() with unique key props. \n\uf0b7 \nWhy Important: Efficient rendering and reconciliation. \n\uf0b7 \nUnder the Hood: Keys help React identify changed, added, or removed items. \n\uf0b7 \nUsed in Real Apps: Listing scan results, history logs. \n\uf0b7 \nExample: \n", "file_name": "React Notes.pdf"}, {"page": 3, "text": "\uf0b7 \n{urls.map((url) => <li key={url}>{url}</li>)} \n\uf0b7 \nHands-On Task: Display a list of scanned URLs. \n\uf0b7 \nInterview Question: Why are keys important in lists? \n\uf0b7 \nSafeWeb AI Use: Show scanned website list. \n8. useEffect \n\uf0b7 \nWhat: Side effects like data fetching, subscriptions. \n\uf0b7 \nWhy Important: Handles operations outside render. \n\uf0b7 \nUnder the Hood: Scheduled after paint, cleanup via return function. \n\uf0b7 \nUsed in Real Apps: Fetching scan results, triggering alerts. \n\uf0b7 \nExample: \n\uf0b7 \nuseEffect(() => { fetchData(); }, []); \n\uf0b7 \nHands-On Task: Fetch dummy scan data on load. \n\uf0b7 \nInterview Question: How does the dependency array work? \n\uf0b7 \nSafeWeb AI Use: Load recent scan history on dashboard. \n9. Hooks (Intro) \n\uf0b7 \nWhat: Special functions to use React features in functional components. \n\uf0b7 \nWhy Important: Replaces classes with reusable logic. \n\uf0b7 \nUnder the Hood: Hooks use internal closures and React's fiber scheduler. \n\uf0b7 \nUsed in Real Apps: All stateful or side-effect components. \n\uf0b7 \nExample: useState, useEffect \n\uf0b7 \nHands-On Task: Use useState and useEffect together. \n\uf0b7 \nInterview Question: Why can\u2019t hooks be called conditionally? \n\uf0b7 \nSafeWeb AI Use: State and side effect logic. \n10. Forms \n\uf0b7 \nWhat: Collecting and managing user input. \n\uf0b7 \nWhy Important: Central for user interaction. \n\uf0b7 \nUnder the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 ", "file_name": "React Notes.pdf"}, {"page": 3, "text": "r the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 \nHands-On Task: Build scan request form. \n\uf0b7 \nInterview Question: Difference between controlled and uncontrolled components? \n\uf0b7 \nSafeWeb AI Use: Get website input from users. \n11. Context API \n\uf0b7 \nWhat: Global state manager for passing data without prop drilling. \n\uf0b7 \nWhy Important: Simplifies state sharing. \n\uf0b7 \nUnder the Hood: Uses React context provider/consumer. \n\uf0b7 \nUsed in Real Apps: Theme, auth, locale. \n", "file_name": "React Notes.pdf"}, {"page": 4, "text": "\uf0b7 \nExample: \n\uf0b7 \nconst UserContext = React.createContext(); \n\uf0b7 \nHands-On Task: Create AuthContext. \n\uf0b7 \nInterview Question: How does context re-render consumers? \n\uf0b7 \nSafeWeb AI Use: Share user data across pages. \n12. React Router \n\uf0b7 \nWhat: Routing library to handle navigation. \n\uf0b7 \nWhy Important: Enables multi-page apps. \n\uf0b7 \nUnder the Hood: Uses HTML5 history API. \n\uf0b7 \nUsed in Real Apps: Page navigation. \n\uf0b7 \nExample: \n\uf0b7 \n<Route path=\"/scan\" element={<Scan />} /> \n\uf0b7 \nHands-On Task: Setup Login, Dashboard, Scan routes. \n\uf0b7 \nInterview Question: Difference between browser and hash routers? \n\uf0b7 \nSafeWeb AI Use: Navigate between sections. \n13. Custom Hooks \n\uf0b7 \nWhat: User-defined reusable hook functions. \n\uf0b7 \nWhy Important: Abstraction and reuse of logic. \n\uf0b7 \nUnder the Hood: Functions that call other hooks. \n\uf0b7 \nUsed in Real Apps: Reusable logic blocks. \n\uf0b7 \nExample: useAuth, useScanStatus \n\uf0b7 \nHands-On Task: Create useAuthGuard. \n\uf0b7 \nInterview Question: Naming rule for hooks? \n\uf0b7 \nSafeWeb AI Use: Custom logic management. \n14. useMemo & useCallback \n\uf0b7 \nWhat: Memoization hooks to optimize performance. \n\uf0b7 \nWhy Important: Prevents unnecessary recalculations or re-renders. \n\uf0b7 \nUnder the Hood: Caches previous return values. \n\uf0b7 \nUsed in Real Apps: Expensive operations, function refs. \n\uf0b7 \nExample: \n\uf0b7 \nconst memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. ", "file_name": "React Notes.pdf"}, {"page": 4, "text": "st memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. \n15. Refs and useRef \n\uf0b7 \nWhat: Direct DOM access or persist values across renders. \n\uf0b7 \nWhy Important: Needed for focus, timers, scroll. \n\uf0b7 \nUnder the Hood: Maintains mutable .current reference. \n", "file_name": "React Notes.pdf"}, {"page": 5, "text": "\uf0b7 \nUsed in Real Apps: Form fields, animations. \n\uf0b7 \nExample: inputRef.current.focus() \n\uf0b7 \nHands-On Task: Focus input on mount. \n\uf0b7 \nInterview Question: When to use refs? \n\uf0b7 \nSafeWeb AI Use: Scroll to report. \n16. Error Boundaries \n\uf0b7 \nWhat: Catch and handle render errors. \n\uf0b7 \nWhy Important: Prevent crashes. \n\uf0b7 \nUnder the Hood: Uses lifecycle methods (componentDidCatch). \n\uf0b7 \nUsed in Real Apps: Wrapping entire app/components. \n\uf0b7 \nExample: Class-based error catcher. \n\uf0b7 \nHands-On Task: Create ErrorBoundary wrapper. \n\uf0b7 \nInterview Question: Can hooks catch errors? \n\uf0b7 \nSafeWeb AI Use: Catch scan/report failures. \n17. Code Splitting \n\uf0b7 \nWhat: Load JS bundles on demand. \n\uf0b7 \nWhy Important: Reduces initial load. \n\uf0b7 \nUnder the Hood: Uses React.lazy and dynamic import. \n\uf0b7 \nUsed in Real Apps: Lazy-loading routes/pages. \n\uf0b7 \nExample: \n\uf0b7 \nconst Scan = React.lazy(() => import('./Scan')); \n\uf0b7 \nHands-On Task: Split heavy components. \n\uf0b7 \nInterview Question: Difference between lazy and suspense? \n\uf0b7 \nSafeWeb AI Use: Speed up first load. \n18. Higher Order Components \n\uf0b7 \nWhat: Functions returning components. \n\uf0b7 \nWhy Important: Reusable logic decorators. \n\uf0b7 \nUnder the Hood: Functional pattern. \n\uf0b7 \nUsed in Real Apps: Permissions, tracking. \n\uf0b7 \nExample: withLogging(Component) \n\uf0b7 \nHands-On Task: Create HOC for authentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Impo", "file_name": "React Notes.pdf"}, {"page": 5, "text": "uthentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Important: Flexible pattern. \n\uf0b7 \nUnder the Hood: Functions as children. \n\uf0b7 \nUsed in Real Apps: Sliders, animations. \n", "file_name": "React Notes.pdf"}, {"page": 6, "text": "\uf0b7 \nExample: <DataProvider render={(data) => <Chart data={data} />} \n\uf0b7 \nHands-On Task: Create MouseTracker. \n\uf0b7 \nInterview Question: Downsides of render props? \n\uf0b7 \nSafeWeb AI Use: Share UI logic. \n20. State Management \n\uf0b7 \nWhat: Tools to manage complex app state. \n\uf0b7 \nWhy Important: Scalability. \n\uf0b7 \nUnder the Hood: Central store and dispatch pattern. \n\uf0b7 \nUsed in Real Apps: Redux, Zustand. \n\uf0b7 \nExample: useReducer, Redux store \n\uf0b7 \nHands-On Task: Manage scan logs in global state. \n\uf0b7 \nInterview Question: Redux vs context? \n\uf0b7 \nSafeWeb AI Use: Global scan/auth state. \n21. Axios / Fetch \n\uf0b7 \nWhat: HTTP libraries to talk to APIs. \n\uf0b7 \nWhy Important: Core for data interaction. \n\uf0b7 \nUnder the Hood: Promise-based APIs. \n\uf0b7 \nUsed in Real Apps: Backend communication. \n\uf0b7 \nExample: axios.get('/api/report') \n\uf0b7 \nHands-On Task: Fetch scan results. \n\uf0b7 \nInterview Question: Axios vs fetch? \n\uf0b7 \nSafeWeb AI Use: Talk to scan API. \n22. Folder Structure \n\uf0b7 \nWhat: Organizing codebase. \n\uf0b7 \nWhy Important: Maintainability. \n\uf0b7 \nUnder the Hood: Logical separation. \n\uf0b7 \nUsed in Real Apps: Feature/domain-based. \n\uf0b7 \nExample: src/components, src/services \n\uf0b7 \nHands-On Task: Restructure SafeWeb AI project. \n\uf0b7 \nInterview Question: Best practices for large apps? \n\uf0b7 \nSafeWeb AI Use: Scale codebase. \n23. PropTypes / TypeScript \n\uf0b7 \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.p", "file_name": "React Notes.pdf"}, {"page": 6, "text": " \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.propTypes = { name: PropTypes.string } \n", "file_name": "React Notes.pdf"}, {"page": 7, "text": "\uf0b7 \nHands-On Task: Add PropTypes to core components. \n\uf0b7 \nInterview Question: TS vs PropTypes? \n\uf0b7 \nSafeWeb AI Use: Ensure correct data handling. \n24. Testing (Jest + RTL) \n\uf0b7 \nWhat: Automated validation of logic and UI. \n\uf0b7 \nWhy Important: Prevent regressions. \n\uf0b7 \nUnder the Hood: Simulates components. \n\uf0b7 \nUsed in Real Apps: CI pipelines. \n\uf0b7 \nExample: expect(getByText('Welcome')).toBeInTheDocument() \n\uf0b7 \nHands-On Task: Test login and scan page. \n\uf0b7 \nInterview Question: Unit vs integration test? \n\uf0b7 \nSafeWeb AI Use: Bug-free reliability. \n \n \nReact Interview Questions & Precise Answers \n \n1. What happens to JSX during the build process? \no JSX is transpiled by Babel into React.createElement() calls that build the \nvirtual DOM. \n2. Difference between functional and class components? \no Functional: Simple functions using hooks. Class: ES6 classes using lifecycle \nmethods. \n3. Can a child modify props? \no No. Props are read-only; only the parent can change them. \n4. How does state cause a re-render? \no Calling setState triggers React\u2019s scheduler to re-render that component with \nupdated state. \n5. What is a synthetic event? \no A cross-browser wrapper around native events, provided by React for \nconsistency. \n6. Ways to implement conditional rendering? \no \nif/else, ternary ? :, logical AND &&, IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useE", "file_name": "React Notes.pdf"}, {"page": 7, "text": ", IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useEffect? \no It determines when the effect runs. Empty array means run once. Include variables \nto trigger rerun when they change. \n9. Why can\u2019t hooks be called conditionally? \n", "file_name": "React Notes.pdf"}, {"page": 8, "text": "o Because React relies on the order of hooks. Conditional calls break this order, \ncausing bugs. \n10. Difference between controlled and uncontrolled components? \no Controlled: state-driven. Uncontrolled: DOM-driven (using refs). \n11. How does context re-render consumers? \no When context value changes, all consumers using that context re-render. \n12. Difference between browser and hash routers? \no BrowserRouter uses HTML5 history API. HashRouter uses URL hash (#) for \nrouting. \n13. Naming rule for custom hooks? \no Must start with use to let React track them internally. \n14. When does useMemo recalculate? \no When any dependency in its dependency array changes. \n15. When to use refs? \no When you need direct DOM access or to persist values without triggering re-\nrenders. \n16. Can hooks catch errors? \no No. Only class-based error boundaries can catch render-time errors. \n17. Difference between lazy and suspense? \no \nlazy dynamically imports components. Suspense wraps lazy-loaded components \nto handle loading fallback. \n18. Compare HOCs with hooks? \no HOCs wrap components for reuse. Hooks reuse logic inside functional \ncomponents. \n19. Downsides of render props? \no Can lead to deeply nested structures (callback hell). \n20. Redux vs Context? \no Redux is for complex/global state with middleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps fo", "file_name": "React Notes.pdf"}, {"page": 8, "text": "dleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps folder structure? \no Feature-based or domain-based structure with clear separation of concerns. \n23. TypeScript vs PropTypes? \no TypeScript checks types at compile-time. PropTypes check at runtime and are \nlimited. \n24. Unit vs integration test? \no Unit: test single component/function. Integration: test interactions between \ncomponents. \n \n \n", "file_name": "React Notes.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "DSA Interview Notes \u2013 Standard Layouts & Mappings \n \n1. Phone Keypad Mapping \nphone_map = { \n    \"2\": \"abc\", \"3\": \"def\", \n    \"4\": \"ghi\", \"5\": \"jkl\", \n    \"6\": \"mno\", \"7\": \"pqrs\", \n    \"8\": \"tuv\", \"9\": \"wxyz\" \n} \n\u2705 Use in: \n\uf0b7 \nLetter Combinations of Phone Number, Predictive Text / T9, Find All Possible Words from \nDigits  \n\uf0b7 \nBacktracking, DFS, Strings \n \n2. Grid/Matrix Directions \n4-Direction Movement (Up, Down, Left, Right) \ndirs_4 = [(-1, 0), (1, 0), (0, -1), (0, 1)] \n8-Direction Movement (Diagonals included) \ndirs_8 = [(-1, -1), (-1, 0), (-1, 1), \n          (0, -1),           (0, 1), \n          (1, -1),  (1, 0),  (1, 1)] \n\u2705 Use in: \n\uf0b7 \nNumber of Islands, Word Search, Maze Solving, Flood Fill \n\uf0b7 \nDFS/BFS, Matrix Problems \n \n3. Knight\u2019s Moves (Chessboard) \nknight_moves = [ \n    (2, 1), (1, 2), (-1, 2), (-2, 1), \n    (-2, -1), (-1, -2), (1, -2), (2, -1) \n] \n\u2705 Use in:  Knight\u2019s Tour, Minimum Knight Moves , Puzzle/Chess Grid\n \n", "file_name": "DSAnPython.pdf"}, {"page": 2, "text": "4. Binary Tree Traversals \nclass TreeNode: \n    def __init__(self, val=0, left=None, right=None): \n        self.val = val \n        self.left = left \n        self.right = right \n\uf0b7 \nPreorder: Root \u2192 Left \u2192 Right \n\uf0b7 \nInorder: Left \u2192 Root \u2192 Right \n\uf0b7 \nPostorder: Left \u2192 Right \u2192 Root \n\uf0b7 \nLevel Order: BFS using queue \n\u2705 Use in: Tree reconstruction, Path Sum, BST validation, Trees, Recursion, DFS\n \n5. Min Heap / Max Heap in Python \nimport heapq \n \n# Min Heap \nheapq.heappush(heap, val) \nheapq.heappop(heap) \n \n# Max Heap \nheapq.heappush(heap, -val) \nheapq.heappop(heap) * -1 \n\u2705 Use in: Top K elements, Median in stream, Kth smallest/largest, Greedy, Priority Queues\n \n6. ASCII Mapping (Characters \u2192 Numbers) \nord('a')  # 97 \nchr(97)   # 'a' \n \nord('z')  # 122 \n\u2705 Use in: Frequency Arrays (size 26), Anagrams, Palindrome Check , Frequency counting\n \n7. Keyboard Row Mapping \nrow1 = set(\"qwertyuiop\") \nrow2 = set(\"asdfghjkl\") \nrow3 = set(\"zxcvbnm\") \n\u2705 Use in: Words Using Only One Row of Keyboard, String filtering\n \n", "file_name": "DSAnPython.pdf"}, {"page": 3, "text": "8. Roman Numerals Mapping \nroman_map = { \n    'I': 1, 'V': 5, 'X': 10, \n    'L': 50, 'C': 100, 'D': 500, 'M': 1000 \n} \n\u2705 Use in: Roman to Integer, Integer to Roman, String / Math Conversion\n \n9. Weekday Layout (for calendar problems) \nweekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', \n'Friday', 'Saturday'] \n\u2705 Use in: Day calculation, Zeller\u2019s Congruence\n \n10. Digit to Word Mapping \ndigit_to_word = { \n  0: 'zero', 1: 'one', ..., 9: 'nine' \n} \n\u2705 Use in: Verbal arithmetic puzzles , Spoken digit output problems \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 4, "text": "The Top 14 LeetCode Patterns You Need to Know \n1. Sliding Window \n\u2705 Used when working with subarrays, substrings, or fixed-size / variable windows. \n     Helps in reducing time from O(n\u00b2) \u2192 O(n) \nExamples: Maximum Sum Subarray of Size K , Longest Substring Without Repeating Characters, \nMinimum Window Substring\n \n2. Two Pointers \n\u2705 Used for problems involving sorted arrays, linked lists, etc. \n     Moves two pointers from front/back/middle \nExamples: Two Sum II (sorted array), 3Sum, Container With Most Water\n \n3. Fast and Slow Pointers \n\u2705 Detect cycles, mid-points \nExamples: Linked List Cycle, Find the Duplicate Number , Middle of Linked List\n \n4. Hashing (HashMap / Set) \n\u2705 Count frequencies, track seen elements, prefix sums \nExamples: Subarray Sum Equals K , Group Anagrams , Longest Consecutive Sequence\n \n5. Prefix Sum \n\u2705 For cumulative/interval sums, range queries \nExamples: Subarray Sum Equals K , Range Sum Query , Count Subarrays with Sum\n \n6. Backtracking \n\u2705 Try all combinations, revert decisions \nExamples: Subsets , Permutations , Letter Combinations of a Phone Number, N-Queens \n", "file_name": "DSAnPython.pdf"}, {"page": 5, "text": " \n7. Recursion / DFS \n\u2705 Tree/graph traversal, subset problems \nExamples: Binary Tree Traversals , Generate Parentheses , Subsets\n \n8. Breadth-First Search (BFS) \n\u2705 Used in graphs, trees, shortest paths \nExamples: Binary Tree Level Order Traversal, Word Ladder, Number of Islands\n \n9. Depth-First Search (DFS) \n\u2705 Graph traversal, backtracking, component counting \nExamples: Number of Islands , Clone Graph , Word Search\n \n10. Greedy \n\u2705 Make best local choice at each step \nExamples: Jump Game , Merge Intervals , Gas Station , Partition Labels\n \n11. Dynamic Programming (DP) \n\u2705 Break down problem into subproblems, store results \nExamples: House Robber , Longest Increasing Subsequence , 0/1 Knapsack, Coin Change\n \n12. Bit Manipulation \n\u2705 Work with bits for optimization or tricky logic \nExamples: Single Number , Counting Bits , Subsets (with bitmasking) \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 6, "text": "13. Union Find (Disjoint Set) \n\u2705 Track connected components \nExamples: Graph Valid Tree , Number of Connected Components, Redundant Connection\n \n14. Heap / Priority Queue \n\u2705 Get max/min quickly, sliding window max, k-largest \nExamples: Kth Largest Element, Merge K Sorted Lists, Top K Frequent Elements \n \n \n \nExtra Patterns (Advanced \u2013 optional): \nIf you have time later, explore these bonus topics: \n1. Monotonic Stack / Deque \n2. Segment Trees / Binary Indexed Trees \n3. Dijkstra\u2019s / A* for weighted graphs \n4. Tries (prefix trees) \n5. Rabin-Karp (String Hashing) \nThese are not Amazon must-knows, but helpful for: \n\uf0b7 \nGoogle \n\uf0b7 \nDeep graph / string / optimization problems \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 7, "text": "1. Built-in Functions (Essentials) \n \nFunction \nPurpose \nExample \nmax() \nGet the maximum of values max(3, 7) \u2192 7 \nmin() \nGet the minimum \nmin(3, 7) \u2192 3 \nsum() \nSum of list values \nsum([1, 2, 3]) \u2192 6 \nlen() \nLength of list, string, etc. \nlen(arr) \nrange() \nGenerate a sequence \nrange(5) \u2192 0, 1, 2, 3, 4 \nenumerate() Loop with index \nfor i, val in enumerate(arr) \nreversed() \nReverse iterator \nfor val in reversed(arr) \nsorted() \nReturns sorted version of list sorted(arr) \nlist() \nConvert to list \nlist(\"abc\") \u2192 ['a','b','c'] \n \n2. Strings \u2013 Helpful Methods \n \nFunction \nPurpose \nExample \nstr.split() \nSplit string into list \n\"a b c\".split() \u2192 ['a','b','c'] \nstr.strip() \nRemove whitespace \n\" abc \".strip() \u2192 \"abc\" \nstr.isdigit() \nCheck if string is a digit \"123\".isdigit() \u2192 True \nstr.lower() / upper() Convert case \n\"HeLLo\".lower() \u2192 \"hello\" \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 8, "text": "3. Lists \u2013 Core Methods \nMethod \nPurpose \nExample \nlist.append(x) Add element at the end \narr.append(10) \nlist.pop() \nRemove last element \narr.pop() \nlist.remove(x) Remove element by value arr.remove(2) \nlist.index(x) \nGet index of value \narr.index(5) \nlist.insert(i, x) Insert at index \narr.insert(1, 99) \nlist.count(x) Count occurrences \narr.count(2) \n \n4. Dictionary (Hashmap) \u2013 Extremely Useful \nMethod / Function \nPurpose \nExample \ndict.get(key, default) Get value or return default d.get('a', 0) \ndict.keys() / values() Iterate keys/values \nfor key in d.keys() \ndict.items() \nIterate key, value pairs \nfor k, v in d.items() \nkey in dict \nCheck if key exists \n'a' in d \ndefaultdict(int) \nAuto-handle missing keys from collections import defaultdict \n \n5. Collections Module \nTool \nPurpose \nExample \ndefaultdict(type) Dictionary with default values dd = defaultdict(int) \nCounter() \nCount occurrences of elements Counter(\"aabc\") \u2192 {'a':2, 'b':1,...} \ndeque() \nDouble-ended queue \ndq = deque([1,2,3]) \nheapq \nPriority Queue / Min Heap \nheapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 9, "text": "6. Math / Time / Random \n \nModule \nFunction \nPurpose \nmath \nmath.sqrt(), math.ceil() Square root, rounding \ntime \ntime.time() \nGet current time (for speed) \nrandom random.randint() \nRandom numbers (for mock tests) \n \n7. Useful Tricks \nTrick \nDescription \nExample \narr[::-1] \nReverse a list or string \ns[::-1] \na, b = b, a Swap variables \n \n' '.join(list) Convert list to string with spaces ' '.join(['a','b']) \u2192 \"a b\" \nall() / any() Check all / any condition is True all([1, True]) \n \nBonus: Lambda & Key Functions (for Sorting) \narr.sort(key=lambda x: x[1])  # Sort by second element of sublists \nUseful for: \n\uf0b7 \nSorting arrays of tuples \n\uf0b7 \nSorting by custom logic \n \nGreat question, Bhawana! You're already covering a solid base. But yes \u2014 here\u2019s a final \nroundup of additional useful Python concepts and functions that are often overlooked but \ncritical in real DSA problems (especially in contests and interviews like Amazon). \n \n", "file_name": "DSAnPython.pdf"}, {"page": 10, "text": "8. Advanced Built-ins & Tricks (Most Students Miss These!) \nFeature/Function \nUse Case \nExample \nzip() \nLoop over multiple iterables \nsimultaneously \nfor a, b in zip(arr1, \narr2) \nmap() \nApply function to each item \nmap(int, input().split()) \nfilter() \nFilter elements by condition \nfilter(lambda x: x > 0, \narr) \nset() \nRemoves duplicates, used for \nfast lookup \nset(arr) \nset.add() / set.remove() \nModify set \n \nislice() from itertools \nSlicing iterators \nislice(range(100), 10, 20) \nbisect.bisect_left() / \nbisect_right() \nBinary search in sorted list \nbisect.bisect_left(arr, x) \nany() \nTrue if any element is truthy \nany([False, True, False]) \n\u2192 True \nall() \nTrue if all elements are truthy \nall([1, 2, 3]) \u2192 True \nre module \nRegex for pattern matching \n(sometimes needed in parsing) re.findall(r'\\d+', s) \n \n9. Built-in Data Types You Must Master \nType \nWhen to Use \nQuick Syntax Example \nlist Ordered, indexable \na = [1, 2, 3] \ntuple Immutable, hashable keys a = (1, 2) \nset \nUnique values, fast lookup a = {1, 2, 3} \ndict Key-value mapping \nd = {'a': 1} \ndeque Queue/Stack with fast ops deque([1,2,3]) from collections \nheap Min/Max heap for priority heapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 11, "text": "10. Collections Deep Dive (Very Interview-Friendly) \nTool \nUse Case \nExample \ndefaultdict(list/int) Auto-initialize missing keys dd = defaultdict(list) \nCounter() \nCount occurrences of each \nelement \nCounter([1,2,2,3]) \u2192 {2:2, 1:1, \n3:1} \nOrderedDict() \nKeeps insertion order \n(Rarely used now, since dicts are ordered from \nPython 3.7+) \ndeque() \nQueue or two-sided \noperations \ndq.popleft(), dq.appendleft() \n \n11. heapq (Min/Max Heap) \nimport heapq \nmin_heap = [] \nheapq.heappush(min_heap, 5) \nheapq.heappush(min_heap, 3) \nheapq.heappop(min_heap)  # returns 3 (smallest) \nUse in: \n\u2705 Top-K problems, \n\u2705 Priority queues, \n\u2705 Greedy algorithms \n \n12. Functools (for memoization and recursion) \nfrom functools import lru_cache \n \n@lru_cache(None) \ndef fib(n): \n    if n <= 1: \n        return n \n    return fib(n-1) + fib(n-2) \nUse in: \n\u2705 Dynamic Programming, \n\u2705 Top-down memoization, \n\u2705 Recursion-heavy problems \n", "file_name": "DSAnPython.pdf"}, {"page": 12, "text": " \n13. Bit Manipulation Functions \nBit Trick \nPurpose \nx << 1, x >> 1 \nBit shifts (multiply/divide by 2) \nx & 1 \nCheck if x is odd \nx ^ y \nBitwise XOR \nbin(x).count('1') Count set bits in x \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 13, "text": "Python Notes for Beginners to Intermediate \n 1. Introduction to Python \n\uf0b7 \nHigh-level, interpreted, and dynamically typed programming language. \n\uf0b7 \nCreated by Guido van Rossum, released in 1991. \n\uf0b7 \nGreat for web dev, data science, automation, AI, scripting, etc. \n \n2. Basic Syntax \n# This is a comment \nprint(\"Hello, World!\")  # Output: Hello, World! \n\uf0b7 \nIndentation is mandatory in Python to define blocks. \n\uf0b7 \nNo {} or ; like in C/C++/Java. \n \n3. Data Types \n\uf0b7 \nint, float, str, bool \n\uf0b7 \nlist, tuple, set, dict \n\uf0b7 \nNoneType \na = 5               # int \nb = 5.0             # float \nc = \"Python\"        # str \nd = True            # bool \n \n4. Type Conversion \nint(\"5\")        # 5 \nfloat(\"3.14\")   # 3.14 \nstr(100)        # \"100\" \nbool(0)         # False \n \n5. Variables \n\uf0b7 \nNo need to declare the type. \n\uf0b7 \nFollows snake_case naming. \nname = \"Bhawana\" \nage = 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 14, "text": " \n6. Control Flow \nif / elif / else \nif age > 18: \n    print(\"Adult\") \nelif age == 18: \n    print(\"Just turned adult\") \nelse: \n    print(\"Minor\") \nwhile loop \ni = 0 \nwhile i < 5: \n    print(i) \n    i += 1 \nfor loop \nfor i in range(5): \n    print(i) \n \n 7. Functions \ndef greet(name): \n    return f\"Hello, {name}\" \n \nprint(greet(\"Bhawana\")) \n \n8. Strings \ntext = \"Python\" \nprint(text.upper())       # 'PYTHON' \nprint(text[0])            # 'P' \nprint(len(text))          # 6 \nprint(\"th\" in text)       # True \n \n9. Lists \nfruits = [\"apple\", \"banana\", \"mango\"] \nfruits.append(\"orange\") \nprint(fruits[1])          # \"banana\" \n \n", "file_name": "DSAnPython.pdf"}, {"page": 15, "text": "10. Tuples \nt = (1, 2, 3) \n# Immutable \nprint(t[0])               # 1 \n \n11. Dictionaries \nstudent = {\"name\": \"Alice\", \"age\": 20} \nprint(student[\"name\"])    # Alice \nstudent[\"age\"] = 21 \n \n12. Sets \nnums = {1, 2, 3, 2} \nprint(nums)               # {1, 2, 3} - duplicates removed \n \n13. Exception Handling \ntry: \n    x = 1 / 0 \nexcept ZeroDivisionError: \n    print(\"Can't divide by zero!\") \nfinally: \n    print(\"Done\") \n \n14. Modules and Libraries \nimport math \nprint(math.sqrt(16))      # 4.0 \nInstall external modules: \npip install requests \n \n15. List Comprehension \nsquares = [x**2 for x in range(5)]   # [0, 1, 4, 9, 16] \n \n16. Lambda Functions \nsquare = lambda x: x ** 2 \nprint(square(5))          # 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 16, "text": " \n 17. Object-Oriented Programming (OOP) \nclass Person: \n    def __init__(self, name): \n        self.name = name \n \n    def say_hi(self): \n        print(f\"Hi, I'm {self.name}\") \n \np = Person(\"Bhawana\") \np.say_hi() \n \n18. File Handling \nwith open(\"file.txt\", \"r\") as file: \n    content = file.read() \n    print(content) \n \n19. Useful Built-in Functions \n\uf0b7 \nlen(), type(), range(), sorted(), input(), sum(), max(), min() \n \n20. Best Practices \n\uf0b7 \nUse meaningful variable names. \n\uf0b7 \nKeep code DRY (Don't Repeat Yourself). \n\uf0b7 \nUse virtual environments. \n\uf0b7 \nFollow PEP8 (Python Style Guide). \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 17, "text": " \n", "file_name": "DSAnPython.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "Global Paid Developer & Mentorship Programs  \n1. Paid Developer Programs  \n  \nProgram  \nLocation  \nDuration  \nPay (INR)  \nApply Timeline  \nLinkedIn REACH  \nHybrid (USA)  \n1-5 years  \nRs.1.16-1.41 Cr/year    \n          June  \nMicrosoft LEAP  \nOn-site (USA/Canada)  16 weeks  \nRs.82-96 L/year  \n         August   \nAdobe Digital Academy  \nOn-site (USA)  \n6-9 months  \nStipend + Paid Apprenticeship  \n       September  \nGoogle Summer of Code (  GSoC)Remote  \n12+ weeks  \nRs.1.25-2.5 L  \n          March   \nMLH Fellowship  \nRemote  \n12 weeks  \nRs.4.1 L  \n     March- April  \nLinux Foundation Mentorsh ip (LFX)Remote  \n3-24 weeks  \nRs.2.5-5 L  \n     Feb-July (varies)  \n  \n2. Application Links   \n1. LinkedIn REACH: https://careers.linkedin.com/reach  \n2. Microsoft LEAP:  https://leap.microsoft.com  \n3. Adobe Digital Academy: https://www.adobe.com/corporate-\nresponsibility/creativity/digitalacademy  \n4. Google Summer of Code (GSoC): https://summerofcode.withgoogle.com  \n5. MLH Fellowship: https://fellowship.mlh.io/  \n6. Linux Foundation Mentorship (LFX): https://lfx.linuxfoundation.org/mentorship/  \n3. Paid Remote Mentorship Opportunities  \n1. Google Summer of Code (Mentor)  \nDetails: Experienced developers can apply as paid mentors for open-source projects.  \nApply: https://summerofcode.withgoogle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-sou", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "gle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-source project maintainers or contributors can apply to host/mentor projects. Apply: \nhttps://lfx.linuxfoundation.org/mentorship/  \n  \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Ecommerce  Mobility  \nCompanies  \nCloud  \nServices/  \nSaaS  \nCRM/Workflow \nManagement  \nTravel  \nPayments/  \nFintech  \nInvestment Banks/  \nHedge Funds  \nFlipkart  \nOla  \nVmWare  \nZoho  \nAirbnb  \nPaypal  \nDE Shaw  \nMyntra  \nUber  \nRedHat  \nSalesforce  \nOYO  \nVisa  \nGoldman Sachs  \nTesco  \nMeru  \nOCI  \nEngageBay  \nMakeMyTrip  \nPhonepe  \nWorld Quant  \nWalmart  \nZoomcar  \nSAP Labs  \nServiceNow  \nExpedia  \nPaytm  \nArcessium  \nTarget  \nRapido  \nIBM  \n \nBooking.com  BharatPe  \nIntuit  \nShopsy  \n \nBrowserStack   \nAgoda  \nCred  \nJP Morgan  \nBloomerang  \n \nNutanix  \n \nGroupon  \nSlice  \nMorgan Stanley  \nCult.fit  \n \nHp  \n \n \nRazorpay  \nWells Fargo  \nAJIO  \n \nNetApp  \n \n \nZeta  \nDruva  \nPharmaeasy   \nCohesity  \n \n \nRupeek  \n \nMeesho  \n \nTekion Corp  \n \n \nClearTax  \n \nLowe\u2019s  \n  \nRubrik  \n  \n  \nJupiter  \n  \nCompanies  \n \nMost High Paying Remote Jobs and few On-site jobs (Use FILTERS) \n1. https://tinyparticlejobs.com/ \n2. https://www.remoterocketship.com \n3. https://nodesk.co/remote-jobs/ \n4. https://wellfound.com/jobs \n5. https://weworkremotely.com/categories/remote-programming-jobs \n6. https://stackoverflow.com/jobs \n7. https://jobs.github.com \n8. https://www.linkedin.com/jobs/ \n9. https://www.toptal.com/ \n10. https://remoteok.io/remote-dev-jobs \n \nFew very high paying remote \u2013  \nSpreeTail \nBlink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Blink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": " \n \nRICH PEOPLE USES / BILLIONAIRES LINKS \n Investment & Startup Platforms \n AngelList Ventures  \u2014 https://angel.co/venture \n MicroVentures \u2014 https://microventures.com/ \n ToptalSeedInvest \u2014 https://www.seedinvest.com/ \n Product Hunt Makers -- https://www.producthunt.com/makers \n Y Cobinator Startup School \u2013 https://www.startupschool.org/ \n      Premium Networking & Professional Platforms \n Lunchclub \u2014 https://lunchclub.com/ \n Shapr \u2014 https://www.shapr.co/ \n Toptal \u2014 https://www.toptal.com/ \n Tiger 21 (private network for investors) \u2014https://tiger21.com/ \n FoundersCard \u2014 https://founderscard.com/ \n      Exclusive Social & Community Platforms \n Clubhouse (invite-only audio network) \u2014 https://www.joinclubhouse.com/ \n Techstars Founders Slack (invite-only; search online to join) \n Various Venture Capital & Startup Discord communities (search Discord servers) \n     Conferences & Summits (for networking) \n TED \u2014 https://www.ted.com/ \n Web Summit -- https://websummit.com/ \n SXSW -- https://www.sxsw.com/ \n TechCrunch Disrupt \u2014 https://techcrunch.com/events/disrupt-sf-2024/ \n Forbes 30 Under 30 Summit \u2014https://www.forbes.com/30-under-30-summit/ \n     Private Family Office & Wealth Networks \n Family Office Club \u2014 https://familyoffices.com/ \n Opal Group \u2014 https://opalgroup.net/ \n \nEmails/Numbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLead", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": "mbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLeads \nVoilaNorbert, AngelList Talent, YCombinator Jobs, WellFound, Triplebyte, HackerRank Talent, Wiza \nLinkedIn Email Finder by Skrapp or Snov.io, Hunter for Chrome, Clearbit Reveal, Lusha Chrome \nExtension \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "BHAWANA KUMAR  \n 7972684479    \n   bhawanakumar5@gmail.com      \n  Linkedin \nGithub                  Portfolio \n \nExperience \nCybage Software \nSoftware Engineer  \nNov\u201923 \u2013 Present \n\u2022 Built scalable enterprise apps using Angular, React, Node.js, MongoDB, SQL, Python & Ruby on Rails, improving \nperformance by 30% via lazy loading and UI optimization. \n\u2022 Integrated 15+ REST APIs for real-time, secure data exchange across microservices. \n\u2022 Developed reusable UI libraries and CI/CD pipelines with Gitlab, accelerating deployments. \n\u2022 Designed responsive, accessible UIs using SCSS and best cross-browser practices. \n\u2022 Delivered authentication modules, RBAC and admin dashboards in Agile teams. \n Skills \n\u2022 Languages & Frameworks - JavaScript, TypeScript, Python, Django, Ruby on Rails  \n\u2022 Frontend - React.js, Angular, HTML5, CSS3, Responsive Web Design \n\u2022 Backend & APIs \u2013 Node.js, Django, Ruby on Rails, RESTful APIs \n\u2022 Databases \u2013 MongoDB, SQL \n\u2022 Tools & Practices \u2013 Git, Gitlab, CI/CD, Agile/Scrum \n\u2022 CS Fundamentals \u2013 Data Structures, Algorithms, OOP, Problem Solving \n\u2022 Soft Skills -  Communication, Collaboration, Time Management, Adaptability \nProjects \nAutoTradeHub \u2013 Automobile E-commerce Platform \nTech Stack: Angular, Node.js, MongoDB, SCSS, REST APIs \nBuilt role-based auth, vehicle CRUD, image uploads, filters, Razorpay payments, and analytics dashboard. \nClixVerse \u2013 Social Media Platform \nTech Stack: Ruby on Rails, SQL, Turbo, ERB \nImplemented image-based articles, likes, bookmarks", "file_name": "BhawanaKumar_SoftwareEngineer_Resume.pdf"}, {"page": 1, "text": ", image uploads, filters, Razorpay payments, and analytics dashboard. \nClixVerse \u2013 Social Media Platform \nTech Stack: Ruby on Rails, SQL, Turbo, ERB \nImplemented image-based articles, likes, bookmarks, comments, global/scoped search, and admin moderation. \nFake Website Detection Tool \nTech Stack: React, Django, 3rd Party APIs \nBuilt a full-stack web app to detect phishing websites by analyzing URLs and content using APIs. \nEducation \nDr. Babasaheb Ambedkar Technological University                                                                        \n     Maharashtra \nB.Tech. Computer Engineering \nMay 2019 \u2013 May 2023 \nMajor Elective: Computer Science \nCGPA: 8.83 \nCertifications & Awards \nMeta Front-End Developer Certification:  Coursera, 2025 \nHacktoberfest Contributor: Successfully contributed to open source repositories. \nCybage Chess Championship Winner (2024): Secured 1st place in female category \nPublication: Design and Implementation of EzyRidez- A ride sharing platform, GIS Science Journal 2023 \n", "file_name": "BhawanaKumar_SoftwareEngineer_Resume.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "React Mastery Path  \n \nPhase 1: React Fundamentals \n1. JSX (JavaScript XML) \n\uf0b7 \nWhat: A syntax extension for JavaScript that looks like HTML and is used to describe \nUI structure in React. \n\uf0b7 \nWhy Important: Enables declarative UI creation and readable component structure. \n\uf0b7 \nUnder the Hood: JSX is transpiled to React.createElement() by Babel, which builds \na virtual DOM tree. \n\uf0b7 \nUsed in Real Apps: Defining component UI layout. \n\uf0b7 \nExample: \n\uf0b7 \nconst Welcome = () => <h1>Hello, SafeWeb AI User!</h1>; \n\uf0b7 \nHands-On Task: Create a Header, Footer, and Landing JSX layout. \n\uf0b7 \nInterview Question: What happens to JSX during the build process? \n\uf0b7 \nSafeWeb AI Use: Structure landing pages, hero sections, or onboarding screens. \n2. Components (Functional & Class) \n\uf0b7 \nWhat: Independent, reusable pieces of UI. \n\uf0b7 \nWhy Important: Encapsulates logic and markup for reuse and readability. \n\uf0b7 \nUnder the Hood: Each component maintains its own lifecycle and props/context \nhandling. \n\uf0b7 \nUsed in Real Apps: Every UI block (Navbar, Card, Form) is a component. \n\uf0b7 \nExample: \n\uf0b7 \nfunction Card(props) { \n\uf0b7 \n  return <div className=\"card\">{props.content}</div>; \n\uf0b7 \n} \n\uf0b7 \nHands-On Task: Build a FeatureCard component for highlighting SafeWeb AI \nfeatures. \n\uf0b7 \nInterview Question: Difference between functional and class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables c", "file_name": "React Notes.pdf"}, {"page": 1, "text": "nd class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables communication between components. \n\uf0b7 \nUnder the Hood: Props are passed as parameters to functions. \n\uf0b7 \nUsed in Real Apps: Passing user info, config, styles. \n\uf0b7 \nExample: \n\uf0b7 \nconst Greeting = ({ name }) => <h2>Hello, {name}</h2>; \n\uf0b7 \nHands-On Task: Pass site scan results from parent to child. \n", "file_name": "React Notes.pdf"}, {"page": 2, "text": "\uf0b7 \nInterview Question: Can a child modify props? \n\uf0b7 \nSafeWeb AI Use: Show user-specific security reports. \n4. State \n\uf0b7 \nWhat: A built-in object used to hold dynamic data. \n\uf0b7 \nWhy Important: Controls component behavior over time. \n\uf0b7 \nUnder the Hood: React uses useState to store and re-render components on update. \n\uf0b7 \nUsed in Real Apps: Handling form inputs, toggles, modals. \n\uf0b7 \nExample: \n\uf0b7 \nconst [email, setEmail] = useState(''); \n\uf0b7 \nHands-On Task: Build a login form managing email/password state. \n\uf0b7 \nInterview Question: How does state cause a re-render? \n\uf0b7 \nSafeWeb AI Use: Manage user input and scan configuration. \n5. Event Handling \n\uf0b7 \nWhat: Listening and responding to user events. \n\uf0b7 \nWhy Important: Powers interactivity. \n\uf0b7 \nUnder the Hood: Synthetic event system based on native events. \n\uf0b7 \nUsed in Real Apps: Form submission, buttons, toggles. \n\uf0b7 \nExample: \n\uf0b7 \n<button onClick={handleScan}>Start Scan</button> \n\uf0b7 \nHands-On Task: Add a \u201cStart Scan\u201d button with click handler. \n\uf0b7 \nInterview Question: What is a synthetic event? \n\uf0b7 \nSafeWeb AI Use: Trigger a website scan. \n6. Conditional Rendering \n\uf0b7 \nWhat: Rendering different UI based on conditions. \n\uf0b7 \nWhy Important: Enhances UX by showing relevant data. \n\uf0b7 \nUnder the Hood: Simple JavaScript logic (ternaries, &&, if). \n\uf0b7 \nUsed in Real Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to impl", "file_name": "React Notes.pdf"}, {"page": 2, "text": "al Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to implement conditional rendering? \n\uf0b7 \nSafeWeb AI Use: Show different UI during scan progress. \n7. Lists and Keys \n\uf0b7 \nWhat: Rendering multiple elements using map() with unique key props. \n\uf0b7 \nWhy Important: Efficient rendering and reconciliation. \n\uf0b7 \nUnder the Hood: Keys help React identify changed, added, or removed items. \n\uf0b7 \nUsed in Real Apps: Listing scan results, history logs. \n\uf0b7 \nExample: \n", "file_name": "React Notes.pdf"}, {"page": 3, "text": "\uf0b7 \n{urls.map((url) => <li key={url}>{url}</li>)} \n\uf0b7 \nHands-On Task: Display a list of scanned URLs. \n\uf0b7 \nInterview Question: Why are keys important in lists? \n\uf0b7 \nSafeWeb AI Use: Show scanned website list. \n8. useEffect \n\uf0b7 \nWhat: Side effects like data fetching, subscriptions. \n\uf0b7 \nWhy Important: Handles operations outside render. \n\uf0b7 \nUnder the Hood: Scheduled after paint, cleanup via return function. \n\uf0b7 \nUsed in Real Apps: Fetching scan results, triggering alerts. \n\uf0b7 \nExample: \n\uf0b7 \nuseEffect(() => { fetchData(); }, []); \n\uf0b7 \nHands-On Task: Fetch dummy scan data on load. \n\uf0b7 \nInterview Question: How does the dependency array work? \n\uf0b7 \nSafeWeb AI Use: Load recent scan history on dashboard. \n9. Hooks (Intro) \n\uf0b7 \nWhat: Special functions to use React features in functional components. \n\uf0b7 \nWhy Important: Replaces classes with reusable logic. \n\uf0b7 \nUnder the Hood: Hooks use internal closures and React's fiber scheduler. \n\uf0b7 \nUsed in Real Apps: All stateful or side-effect components. \n\uf0b7 \nExample: useState, useEffect \n\uf0b7 \nHands-On Task: Use useState and useEffect together. \n\uf0b7 \nInterview Question: Why can\u2019t hooks be called conditionally? \n\uf0b7 \nSafeWeb AI Use: State and side effect logic. \n10. Forms \n\uf0b7 \nWhat: Collecting and managing user input. \n\uf0b7 \nWhy Important: Central for user interaction. \n\uf0b7 \nUnder the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 ", "file_name": "React Notes.pdf"}, {"page": 3, "text": "r the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 \nHands-On Task: Build scan request form. \n\uf0b7 \nInterview Question: Difference between controlled and uncontrolled components? \n\uf0b7 \nSafeWeb AI Use: Get website input from users. \n11. Context API \n\uf0b7 \nWhat: Global state manager for passing data without prop drilling. \n\uf0b7 \nWhy Important: Simplifies state sharing. \n\uf0b7 \nUnder the Hood: Uses React context provider/consumer. \n\uf0b7 \nUsed in Real Apps: Theme, auth, locale. \n", "file_name": "React Notes.pdf"}, {"page": 4, "text": "\uf0b7 \nExample: \n\uf0b7 \nconst UserContext = React.createContext(); \n\uf0b7 \nHands-On Task: Create AuthContext. \n\uf0b7 \nInterview Question: How does context re-render consumers? \n\uf0b7 \nSafeWeb AI Use: Share user data across pages. \n12. React Router \n\uf0b7 \nWhat: Routing library to handle navigation. \n\uf0b7 \nWhy Important: Enables multi-page apps. \n\uf0b7 \nUnder the Hood: Uses HTML5 history API. \n\uf0b7 \nUsed in Real Apps: Page navigation. \n\uf0b7 \nExample: \n\uf0b7 \n<Route path=\"/scan\" element={<Scan />} /> \n\uf0b7 \nHands-On Task: Setup Login, Dashboard, Scan routes. \n\uf0b7 \nInterview Question: Difference between browser and hash routers? \n\uf0b7 \nSafeWeb AI Use: Navigate between sections. \n13. Custom Hooks \n\uf0b7 \nWhat: User-defined reusable hook functions. \n\uf0b7 \nWhy Important: Abstraction and reuse of logic. \n\uf0b7 \nUnder the Hood: Functions that call other hooks. \n\uf0b7 \nUsed in Real Apps: Reusable logic blocks. \n\uf0b7 \nExample: useAuth, useScanStatus \n\uf0b7 \nHands-On Task: Create useAuthGuard. \n\uf0b7 \nInterview Question: Naming rule for hooks? \n\uf0b7 \nSafeWeb AI Use: Custom logic management. \n14. useMemo & useCallback \n\uf0b7 \nWhat: Memoization hooks to optimize performance. \n\uf0b7 \nWhy Important: Prevents unnecessary recalculations or re-renders. \n\uf0b7 \nUnder the Hood: Caches previous return values. \n\uf0b7 \nUsed in Real Apps: Expensive operations, function refs. \n\uf0b7 \nExample: \n\uf0b7 \nconst memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. ", "file_name": "React Notes.pdf"}, {"page": 4, "text": "st memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. \n15. Refs and useRef \n\uf0b7 \nWhat: Direct DOM access or persist values across renders. \n\uf0b7 \nWhy Important: Needed for focus, timers, scroll. \n\uf0b7 \nUnder the Hood: Maintains mutable .current reference. \n", "file_name": "React Notes.pdf"}, {"page": 5, "text": "\uf0b7 \nUsed in Real Apps: Form fields, animations. \n\uf0b7 \nExample: inputRef.current.focus() \n\uf0b7 \nHands-On Task: Focus input on mount. \n\uf0b7 \nInterview Question: When to use refs? \n\uf0b7 \nSafeWeb AI Use: Scroll to report. \n16. Error Boundaries \n\uf0b7 \nWhat: Catch and handle render errors. \n\uf0b7 \nWhy Important: Prevent crashes. \n\uf0b7 \nUnder the Hood: Uses lifecycle methods (componentDidCatch). \n\uf0b7 \nUsed in Real Apps: Wrapping entire app/components. \n\uf0b7 \nExample: Class-based error catcher. \n\uf0b7 \nHands-On Task: Create ErrorBoundary wrapper. \n\uf0b7 \nInterview Question: Can hooks catch errors? \n\uf0b7 \nSafeWeb AI Use: Catch scan/report failures. \n17. Code Splitting \n\uf0b7 \nWhat: Load JS bundles on demand. \n\uf0b7 \nWhy Important: Reduces initial load. \n\uf0b7 \nUnder the Hood: Uses React.lazy and dynamic import. \n\uf0b7 \nUsed in Real Apps: Lazy-loading routes/pages. \n\uf0b7 \nExample: \n\uf0b7 \nconst Scan = React.lazy(() => import('./Scan')); \n\uf0b7 \nHands-On Task: Split heavy components. \n\uf0b7 \nInterview Question: Difference between lazy and suspense? \n\uf0b7 \nSafeWeb AI Use: Speed up first load. \n18. Higher Order Components \n\uf0b7 \nWhat: Functions returning components. \n\uf0b7 \nWhy Important: Reusable logic decorators. \n\uf0b7 \nUnder the Hood: Functional pattern. \n\uf0b7 \nUsed in Real Apps: Permissions, tracking. \n\uf0b7 \nExample: withLogging(Component) \n\uf0b7 \nHands-On Task: Create HOC for authentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Impo", "file_name": "React Notes.pdf"}, {"page": 5, "text": "uthentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Important: Flexible pattern. \n\uf0b7 \nUnder the Hood: Functions as children. \n\uf0b7 \nUsed in Real Apps: Sliders, animations. \n", "file_name": "React Notes.pdf"}, {"page": 6, "text": "\uf0b7 \nExample: <DataProvider render={(data) => <Chart data={data} />} \n\uf0b7 \nHands-On Task: Create MouseTracker. \n\uf0b7 \nInterview Question: Downsides of render props? \n\uf0b7 \nSafeWeb AI Use: Share UI logic. \n20. State Management \n\uf0b7 \nWhat: Tools to manage complex app state. \n\uf0b7 \nWhy Important: Scalability. \n\uf0b7 \nUnder the Hood: Central store and dispatch pattern. \n\uf0b7 \nUsed in Real Apps: Redux, Zustand. \n\uf0b7 \nExample: useReducer, Redux store \n\uf0b7 \nHands-On Task: Manage scan logs in global state. \n\uf0b7 \nInterview Question: Redux vs context? \n\uf0b7 \nSafeWeb AI Use: Global scan/auth state. \n21. Axios / Fetch \n\uf0b7 \nWhat: HTTP libraries to talk to APIs. \n\uf0b7 \nWhy Important: Core for data interaction. \n\uf0b7 \nUnder the Hood: Promise-based APIs. \n\uf0b7 \nUsed in Real Apps: Backend communication. \n\uf0b7 \nExample: axios.get('/api/report') \n\uf0b7 \nHands-On Task: Fetch scan results. \n\uf0b7 \nInterview Question: Axios vs fetch? \n\uf0b7 \nSafeWeb AI Use: Talk to scan API. \n22. Folder Structure \n\uf0b7 \nWhat: Organizing codebase. \n\uf0b7 \nWhy Important: Maintainability. \n\uf0b7 \nUnder the Hood: Logical separation. \n\uf0b7 \nUsed in Real Apps: Feature/domain-based. \n\uf0b7 \nExample: src/components, src/services \n\uf0b7 \nHands-On Task: Restructure SafeWeb AI project. \n\uf0b7 \nInterview Question: Best practices for large apps? \n\uf0b7 \nSafeWeb AI Use: Scale codebase. \n23. PropTypes / TypeScript \n\uf0b7 \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.p", "file_name": "React Notes.pdf"}, {"page": 6, "text": " \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.propTypes = { name: PropTypes.string } \n", "file_name": "React Notes.pdf"}, {"page": 7, "text": "\uf0b7 \nHands-On Task: Add PropTypes to core components. \n\uf0b7 \nInterview Question: TS vs PropTypes? \n\uf0b7 \nSafeWeb AI Use: Ensure correct data handling. \n24. Testing (Jest + RTL) \n\uf0b7 \nWhat: Automated validation of logic and UI. \n\uf0b7 \nWhy Important: Prevent regressions. \n\uf0b7 \nUnder the Hood: Simulates components. \n\uf0b7 \nUsed in Real Apps: CI pipelines. \n\uf0b7 \nExample: expect(getByText('Welcome')).toBeInTheDocument() \n\uf0b7 \nHands-On Task: Test login and scan page. \n\uf0b7 \nInterview Question: Unit vs integration test? \n\uf0b7 \nSafeWeb AI Use: Bug-free reliability. \n \n \nReact Interview Questions & Precise Answers \n \n1. What happens to JSX during the build process? \no JSX is transpiled by Babel into React.createElement() calls that build the \nvirtual DOM. \n2. Difference between functional and class components? \no Functional: Simple functions using hooks. Class: ES6 classes using lifecycle \nmethods. \n3. Can a child modify props? \no No. Props are read-only; only the parent can change them. \n4. How does state cause a re-render? \no Calling setState triggers React\u2019s scheduler to re-render that component with \nupdated state. \n5. What is a synthetic event? \no A cross-browser wrapper around native events, provided by React for \nconsistency. \n6. Ways to implement conditional rendering? \no \nif/else, ternary ? :, logical AND &&, IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useE", "file_name": "React Notes.pdf"}, {"page": 7, "text": ", IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useEffect? \no It determines when the effect runs. Empty array means run once. Include variables \nto trigger rerun when they change. \n9. Why can\u2019t hooks be called conditionally? \n", "file_name": "React Notes.pdf"}, {"page": 8, "text": "o Because React relies on the order of hooks. Conditional calls break this order, \ncausing bugs. \n10. Difference between controlled and uncontrolled components? \no Controlled: state-driven. Uncontrolled: DOM-driven (using refs). \n11. How does context re-render consumers? \no When context value changes, all consumers using that context re-render. \n12. Difference between browser and hash routers? \no BrowserRouter uses HTML5 history API. HashRouter uses URL hash (#) for \nrouting. \n13. Naming rule for custom hooks? \no Must start with use to let React track them internally. \n14. When does useMemo recalculate? \no When any dependency in its dependency array changes. \n15. When to use refs? \no When you need direct DOM access or to persist values without triggering re-\nrenders. \n16. Can hooks catch errors? \no No. Only class-based error boundaries can catch render-time errors. \n17. Difference between lazy and suspense? \no \nlazy dynamically imports components. Suspense wraps lazy-loaded components \nto handle loading fallback. \n18. Compare HOCs with hooks? \no HOCs wrap components for reuse. Hooks reuse logic inside functional \ncomponents. \n19. Downsides of render props? \no Can lead to deeply nested structures (callback hell). \n20. Redux vs Context? \no Redux is for complex/global state with middleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps fo", "file_name": "React Notes.pdf"}, {"page": 8, "text": "dleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps folder structure? \no Feature-based or domain-based structure with clear separation of concerns. \n23. TypeScript vs PropTypes? \no TypeScript checks types at compile-time. PropTypes check at runtime and are \nlimited. \n24. Unit vs integration test? \no Unit: test single component/function. Integration: test interactions between \ncomponents. \n \n \n", "file_name": "React Notes.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "React Mastery Path  \n \nPhase 1: React Fundamentals \n1. JSX (JavaScript XML) \n\uf0b7 \nWhat: A syntax extension for JavaScript that looks like HTML and is used to describe \nUI structure in React. \n\uf0b7 \nWhy Important: Enables declarative UI creation and readable component structure. \n\uf0b7 \nUnder the Hood: JSX is transpiled to React.createElement() by Babel, which builds \na virtual DOM tree. \n\uf0b7 \nUsed in Real Apps: Defining component UI layout. \n\uf0b7 \nExample: \n\uf0b7 \nconst Welcome = () => <h1>Hello, SafeWeb AI User!</h1>; \n\uf0b7 \nHands-On Task: Create a Header, Footer, and Landing JSX layout. \n\uf0b7 \nInterview Question: What happens to JSX during the build process? \n\uf0b7 \nSafeWeb AI Use: Structure landing pages, hero sections, or onboarding screens. \n2. Components (Functional & Class) \n\uf0b7 \nWhat: Independent, reusable pieces of UI. \n\uf0b7 \nWhy Important: Encapsulates logic and markup for reuse and readability. \n\uf0b7 \nUnder the Hood: Each component maintains its own lifecycle and props/context \nhandling. \n\uf0b7 \nUsed in Real Apps: Every UI block (Navbar, Card, Form) is a component. \n\uf0b7 \nExample: \n\uf0b7 \nfunction Card(props) { \n\uf0b7 \n  return <div className=\"card\">{props.content}</div>; \n\uf0b7 \n} \n\uf0b7 \nHands-On Task: Build a FeatureCard component for highlighting SafeWeb AI \nfeatures. \n\uf0b7 \nInterview Question: Difference between functional and class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables c", "file_name": "React Notes.pdf"}, {"page": 1, "text": "nd class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables communication between components. \n\uf0b7 \nUnder the Hood: Props are passed as parameters to functions. \n\uf0b7 \nUsed in Real Apps: Passing user info, config, styles. \n\uf0b7 \nExample: \n\uf0b7 \nconst Greeting = ({ name }) => <h2>Hello, {name}</h2>; \n\uf0b7 \nHands-On Task: Pass site scan results from parent to child. \n", "file_name": "React Notes.pdf"}, {"page": 2, "text": "\uf0b7 \nInterview Question: Can a child modify props? \n\uf0b7 \nSafeWeb AI Use: Show user-specific security reports. \n4. State \n\uf0b7 \nWhat: A built-in object used to hold dynamic data. \n\uf0b7 \nWhy Important: Controls component behavior over time. \n\uf0b7 \nUnder the Hood: React uses useState to store and re-render components on update. \n\uf0b7 \nUsed in Real Apps: Handling form inputs, toggles, modals. \n\uf0b7 \nExample: \n\uf0b7 \nconst [email, setEmail] = useState(''); \n\uf0b7 \nHands-On Task: Build a login form managing email/password state. \n\uf0b7 \nInterview Question: How does state cause a re-render? \n\uf0b7 \nSafeWeb AI Use: Manage user input and scan configuration. \n5. Event Handling \n\uf0b7 \nWhat: Listening and responding to user events. \n\uf0b7 \nWhy Important: Powers interactivity. \n\uf0b7 \nUnder the Hood: Synthetic event system based on native events. \n\uf0b7 \nUsed in Real Apps: Form submission, buttons, toggles. \n\uf0b7 \nExample: \n\uf0b7 \n<button onClick={handleScan}>Start Scan</button> \n\uf0b7 \nHands-On Task: Add a \u201cStart Scan\u201d button with click handler. \n\uf0b7 \nInterview Question: What is a synthetic event? \n\uf0b7 \nSafeWeb AI Use: Trigger a website scan. \n6. Conditional Rendering \n\uf0b7 \nWhat: Rendering different UI based on conditions. \n\uf0b7 \nWhy Important: Enhances UX by showing relevant data. \n\uf0b7 \nUnder the Hood: Simple JavaScript logic (ternaries, &&, if). \n\uf0b7 \nUsed in Real Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to impl", "file_name": "React Notes.pdf"}, {"page": 2, "text": "al Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to implement conditional rendering? \n\uf0b7 \nSafeWeb AI Use: Show different UI during scan progress. \n7. Lists and Keys \n\uf0b7 \nWhat: Rendering multiple elements using map() with unique key props. \n\uf0b7 \nWhy Important: Efficient rendering and reconciliation. \n\uf0b7 \nUnder the Hood: Keys help React identify changed, added, or removed items. \n\uf0b7 \nUsed in Real Apps: Listing scan results, history logs. \n\uf0b7 \nExample: \n", "file_name": "React Notes.pdf"}, {"page": 3, "text": "\uf0b7 \n{urls.map((url) => <li key={url}>{url}</li>)} \n\uf0b7 \nHands-On Task: Display a list of scanned URLs. \n\uf0b7 \nInterview Question: Why are keys important in lists? \n\uf0b7 \nSafeWeb AI Use: Show scanned website list. \n8. useEffect \n\uf0b7 \nWhat: Side effects like data fetching, subscriptions. \n\uf0b7 \nWhy Important: Handles operations outside render. \n\uf0b7 \nUnder the Hood: Scheduled after paint, cleanup via return function. \n\uf0b7 \nUsed in Real Apps: Fetching scan results, triggering alerts. \n\uf0b7 \nExample: \n\uf0b7 \nuseEffect(() => { fetchData(); }, []); \n\uf0b7 \nHands-On Task: Fetch dummy scan data on load. \n\uf0b7 \nInterview Question: How does the dependency array work? \n\uf0b7 \nSafeWeb AI Use: Load recent scan history on dashboard. \n9. Hooks (Intro) \n\uf0b7 \nWhat: Special functions to use React features in functional components. \n\uf0b7 \nWhy Important: Replaces classes with reusable logic. \n\uf0b7 \nUnder the Hood: Hooks use internal closures and React's fiber scheduler. \n\uf0b7 \nUsed in Real Apps: All stateful or side-effect components. \n\uf0b7 \nExample: useState, useEffect \n\uf0b7 \nHands-On Task: Use useState and useEffect together. \n\uf0b7 \nInterview Question: Why can\u2019t hooks be called conditionally? \n\uf0b7 \nSafeWeb AI Use: State and side effect logic. \n10. Forms \n\uf0b7 \nWhat: Collecting and managing user input. \n\uf0b7 \nWhy Important: Central for user interaction. \n\uf0b7 \nUnder the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 ", "file_name": "React Notes.pdf"}, {"page": 3, "text": "r the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 \nHands-On Task: Build scan request form. \n\uf0b7 \nInterview Question: Difference between controlled and uncontrolled components? \n\uf0b7 \nSafeWeb AI Use: Get website input from users. \n11. Context API \n\uf0b7 \nWhat: Global state manager for passing data without prop drilling. \n\uf0b7 \nWhy Important: Simplifies state sharing. \n\uf0b7 \nUnder the Hood: Uses React context provider/consumer. \n\uf0b7 \nUsed in Real Apps: Theme, auth, locale. \n", "file_name": "React Notes.pdf"}, {"page": 4, "text": "\uf0b7 \nExample: \n\uf0b7 \nconst UserContext = React.createContext(); \n\uf0b7 \nHands-On Task: Create AuthContext. \n\uf0b7 \nInterview Question: How does context re-render consumers? \n\uf0b7 \nSafeWeb AI Use: Share user data across pages. \n12. React Router \n\uf0b7 \nWhat: Routing library to handle navigation. \n\uf0b7 \nWhy Important: Enables multi-page apps. \n\uf0b7 \nUnder the Hood: Uses HTML5 history API. \n\uf0b7 \nUsed in Real Apps: Page navigation. \n\uf0b7 \nExample: \n\uf0b7 \n<Route path=\"/scan\" element={<Scan />} /> \n\uf0b7 \nHands-On Task: Setup Login, Dashboard, Scan routes. \n\uf0b7 \nInterview Question: Difference between browser and hash routers? \n\uf0b7 \nSafeWeb AI Use: Navigate between sections. \n13. Custom Hooks \n\uf0b7 \nWhat: User-defined reusable hook functions. \n\uf0b7 \nWhy Important: Abstraction and reuse of logic. \n\uf0b7 \nUnder the Hood: Functions that call other hooks. \n\uf0b7 \nUsed in Real Apps: Reusable logic blocks. \n\uf0b7 \nExample: useAuth, useScanStatus \n\uf0b7 \nHands-On Task: Create useAuthGuard. \n\uf0b7 \nInterview Question: Naming rule for hooks? \n\uf0b7 \nSafeWeb AI Use: Custom logic management. \n14. useMemo & useCallback \n\uf0b7 \nWhat: Memoization hooks to optimize performance. \n\uf0b7 \nWhy Important: Prevents unnecessary recalculations or re-renders. \n\uf0b7 \nUnder the Hood: Caches previous return values. \n\uf0b7 \nUsed in Real Apps: Expensive operations, function refs. \n\uf0b7 \nExample: \n\uf0b7 \nconst memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. ", "file_name": "React Notes.pdf"}, {"page": 4, "text": "st memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. \n15. Refs and useRef \n\uf0b7 \nWhat: Direct DOM access or persist values across renders. \n\uf0b7 \nWhy Important: Needed for focus, timers, scroll. \n\uf0b7 \nUnder the Hood: Maintains mutable .current reference. \n", "file_name": "React Notes.pdf"}, {"page": 5, "text": "\uf0b7 \nUsed in Real Apps: Form fields, animations. \n\uf0b7 \nExample: inputRef.current.focus() \n\uf0b7 \nHands-On Task: Focus input on mount. \n\uf0b7 \nInterview Question: When to use refs? \n\uf0b7 \nSafeWeb AI Use: Scroll to report. \n16. Error Boundaries \n\uf0b7 \nWhat: Catch and handle render errors. \n\uf0b7 \nWhy Important: Prevent crashes. \n\uf0b7 \nUnder the Hood: Uses lifecycle methods (componentDidCatch). \n\uf0b7 \nUsed in Real Apps: Wrapping entire app/components. \n\uf0b7 \nExample: Class-based error catcher. \n\uf0b7 \nHands-On Task: Create ErrorBoundary wrapper. \n\uf0b7 \nInterview Question: Can hooks catch errors? \n\uf0b7 \nSafeWeb AI Use: Catch scan/report failures. \n17. Code Splitting \n\uf0b7 \nWhat: Load JS bundles on demand. \n\uf0b7 \nWhy Important: Reduces initial load. \n\uf0b7 \nUnder the Hood: Uses React.lazy and dynamic import. \n\uf0b7 \nUsed in Real Apps: Lazy-loading routes/pages. \n\uf0b7 \nExample: \n\uf0b7 \nconst Scan = React.lazy(() => import('./Scan')); \n\uf0b7 \nHands-On Task: Split heavy components. \n\uf0b7 \nInterview Question: Difference between lazy and suspense? \n\uf0b7 \nSafeWeb AI Use: Speed up first load. \n18. Higher Order Components \n\uf0b7 \nWhat: Functions returning components. \n\uf0b7 \nWhy Important: Reusable logic decorators. \n\uf0b7 \nUnder the Hood: Functional pattern. \n\uf0b7 \nUsed in Real Apps: Permissions, tracking. \n\uf0b7 \nExample: withLogging(Component) \n\uf0b7 \nHands-On Task: Create HOC for authentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Impo", "file_name": "React Notes.pdf"}, {"page": 5, "text": "uthentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Important: Flexible pattern. \n\uf0b7 \nUnder the Hood: Functions as children. \n\uf0b7 \nUsed in Real Apps: Sliders, animations. \n", "file_name": "React Notes.pdf"}, {"page": 6, "text": "\uf0b7 \nExample: <DataProvider render={(data) => <Chart data={data} />} \n\uf0b7 \nHands-On Task: Create MouseTracker. \n\uf0b7 \nInterview Question: Downsides of render props? \n\uf0b7 \nSafeWeb AI Use: Share UI logic. \n20. State Management \n\uf0b7 \nWhat: Tools to manage complex app state. \n\uf0b7 \nWhy Important: Scalability. \n\uf0b7 \nUnder the Hood: Central store and dispatch pattern. \n\uf0b7 \nUsed in Real Apps: Redux, Zustand. \n\uf0b7 \nExample: useReducer, Redux store \n\uf0b7 \nHands-On Task: Manage scan logs in global state. \n\uf0b7 \nInterview Question: Redux vs context? \n\uf0b7 \nSafeWeb AI Use: Global scan/auth state. \n21. Axios / Fetch \n\uf0b7 \nWhat: HTTP libraries to talk to APIs. \n\uf0b7 \nWhy Important: Core for data interaction. \n\uf0b7 \nUnder the Hood: Promise-based APIs. \n\uf0b7 \nUsed in Real Apps: Backend communication. \n\uf0b7 \nExample: axios.get('/api/report') \n\uf0b7 \nHands-On Task: Fetch scan results. \n\uf0b7 \nInterview Question: Axios vs fetch? \n\uf0b7 \nSafeWeb AI Use: Talk to scan API. \n22. Folder Structure \n\uf0b7 \nWhat: Organizing codebase. \n\uf0b7 \nWhy Important: Maintainability. \n\uf0b7 \nUnder the Hood: Logical separation. \n\uf0b7 \nUsed in Real Apps: Feature/domain-based. \n\uf0b7 \nExample: src/components, src/services \n\uf0b7 \nHands-On Task: Restructure SafeWeb AI project. \n\uf0b7 \nInterview Question: Best practices for large apps? \n\uf0b7 \nSafeWeb AI Use: Scale codebase. \n23. PropTypes / TypeScript \n\uf0b7 \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.p", "file_name": "React Notes.pdf"}, {"page": 6, "text": " \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.propTypes = { name: PropTypes.string } \n", "file_name": "React Notes.pdf"}, {"page": 7, "text": "\uf0b7 \nHands-On Task: Add PropTypes to core components. \n\uf0b7 \nInterview Question: TS vs PropTypes? \n\uf0b7 \nSafeWeb AI Use: Ensure correct data handling. \n24. Testing (Jest + RTL) \n\uf0b7 \nWhat: Automated validation of logic and UI. \n\uf0b7 \nWhy Important: Prevent regressions. \n\uf0b7 \nUnder the Hood: Simulates components. \n\uf0b7 \nUsed in Real Apps: CI pipelines. \n\uf0b7 \nExample: expect(getByText('Welcome')).toBeInTheDocument() \n\uf0b7 \nHands-On Task: Test login and scan page. \n\uf0b7 \nInterview Question: Unit vs integration test? \n\uf0b7 \nSafeWeb AI Use: Bug-free reliability. \n \n \nReact Interview Questions & Precise Answers \n \n1. What happens to JSX during the build process? \no JSX is transpiled by Babel into React.createElement() calls that build the \nvirtual DOM. \n2. Difference between functional and class components? \no Functional: Simple functions using hooks. Class: ES6 classes using lifecycle \nmethods. \n3. Can a child modify props? \no No. Props are read-only; only the parent can change them. \n4. How does state cause a re-render? \no Calling setState triggers React\u2019s scheduler to re-render that component with \nupdated state. \n5. What is a synthetic event? \no A cross-browser wrapper around native events, provided by React for \nconsistency. \n6. Ways to implement conditional rendering? \no \nif/else, ternary ? :, logical AND &&, IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useE", "file_name": "React Notes.pdf"}, {"page": 7, "text": ", IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useEffect? \no It determines when the effect runs. Empty array means run once. Include variables \nto trigger rerun when they change. \n9. Why can\u2019t hooks be called conditionally? \n", "file_name": "React Notes.pdf"}, {"page": 8, "text": "o Because React relies on the order of hooks. Conditional calls break this order, \ncausing bugs. \n10. Difference between controlled and uncontrolled components? \no Controlled: state-driven. Uncontrolled: DOM-driven (using refs). \n11. How does context re-render consumers? \no When context value changes, all consumers using that context re-render. \n12. Difference between browser and hash routers? \no BrowserRouter uses HTML5 history API. HashRouter uses URL hash (#) for \nrouting. \n13. Naming rule for custom hooks? \no Must start with use to let React track them internally. \n14. When does useMemo recalculate? \no When any dependency in its dependency array changes. \n15. When to use refs? \no When you need direct DOM access or to persist values without triggering re-\nrenders. \n16. Can hooks catch errors? \no No. Only class-based error boundaries can catch render-time errors. \n17. Difference between lazy and suspense? \no \nlazy dynamically imports components. Suspense wraps lazy-loaded components \nto handle loading fallback. \n18. Compare HOCs with hooks? \no HOCs wrap components for reuse. Hooks reuse logic inside functional \ncomponents. \n19. Downsides of render props? \no Can lead to deeply nested structures (callback hell). \n20. Redux vs Context? \no Redux is for complex/global state with middleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps fo", "file_name": "React Notes.pdf"}, {"page": 8, "text": "dleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps folder structure? \no Feature-based or domain-based structure with clear separation of concerns. \n23. TypeScript vs PropTypes? \no TypeScript checks types at compile-time. PropTypes check at runtime and are \nlimited. \n24. Unit vs integration test? \no Unit: test single component/function. Integration: test interactions between \ncomponents. \n \n \n", "file_name": "React Notes.pdf"}, {"page": 1, "text": " \n \nGeneral SQL Topics \n1. INTRODUCTION TO SQL \n\uf0b7 \nSQL: Structured Query Language, used to interact with relational databases. \n\uf0b7 \nRelational Database: Stores data in tables (rows & columns). \n\uf0b7 \nCommon RDBMS: MySQL, PostgreSQL, SQLite, Oracle, SQL Server. \n \n2. SQL DATA TYPES \n\uf0b7 \nINT: Integer numbers \n\uf0b7 \nVARCHAR(n): Variable-length string with a maximum of n characters \n\uf0b7 \nCHAR(n): Fixed-length string \n\uf0b7 \nDATE / DATETIME: Date or timestamp \n\uf0b7 \nDECIMAL(p, s): Exact numeric value with precision and scale \n\uf0b7 \nBOOLEAN: True or False \n\uf0b7 \nTEXT: Long-form string data \n \n3. BASIC SQL COMMANDS \n\u27a4 Create Table \nCREATE TABLE Employees ( \n  id INT PRIMARY KEY, \n  name VARCHAR(100), \n  salary INT, \n  department VARCHAR(50) \n); \n\u27a4 Insert \nINSERT INTO Employees (id, name, salary, department) \nVALUES (1, 'Alice', 60000, 'HR'); \n\u27a4 Select \nSELECT * FROM Employees; \nSELECT name, salary FROM Employees; \nSELECT * FROM Employees WHERE salary > 50000; \n\u27a4 Update \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 2, "text": "UPDATE Employees SET salary = 70000 WHERE id = 1; \n\u27a4 Delete \nDELETE FROM Employees WHERE id = 1; \n \n4. FILTERING DATA \n\u27a4 WHERE, AND, OR, NOT \nSELECT * FROM Employees \nWHERE department = 'HR' AND salary > 50000; \n\u27a4 IN, BETWEEN, LIKE \nSELECT * FROM Employees WHERE department IN ('HR', 'Sales'); \nSELECT * FROM Employees WHERE salary BETWEEN 40000 AND 70000; \nSELECT * FROM Employees WHERE name LIKE 'A%'; -- starts with A \n \n5. SORTING & LIMITING \nSELECT * FROM Employees ORDER BY salary DESC; \nSELECT * FROM Employees LIMIT 5; \n \n6. AGGREGATE FUNCTIONS \nSELECT COUNT(*) FROM Employees; \nSELECT AVG(salary) FROM Employees; \nSELECT SUM(salary), MAX(salary), MIN(salary) FROM Employees; \n \n7. GROUPING & FILTERING AGGREGATES \nSELECT department, AVG(salary) AS avg_salary \nFROM Employees \nGROUP BY department \nHAVING AVG(salary) > 50000; \n \n8. JOINS \n\u27a4 Syntax: \nSELECT e.name, d.name \nFROM Employees e \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 3, "text": "JOIN Departments d ON e.department_id = d.id; \n8.1. INNER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nINNER JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 Only matching department IDs shown. \n8.2. LEFT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All employees shown, even if no department. \n8.3. RIGHT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All departments shown, even if no employee. \n8.4. FULL OUTER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id \nUNION \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n \n9. SUBQUERIES \nUsed to embed one query inside another. \nSELECT name FROM Employees \nWHERE salary > ( \n  SELECT AVG(salary) FROM Employees \n); \n \n10. CONSTRAINTS \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 4, "text": "\uf0b7 \nPRIMARY KEY: Uniquely identifies each record \n\uf0b7 \nFOREIGN KEY: Links to primary key of another table \n\uf0b7 \nUNIQUE: Ensures all values in a column are different \n\uf0b7 \nNOT NULL: Disallows NULL values \n\uf0b7 \nCHECK: Ensures a condition is met \n \n11. NORMALIZATION  \n\uf0b7 \nProcess of organizing data to reduce redundancy and improve data integrity. \n\uf0b7 \n1NF: Atomic values \n\uf0b7 \n2NF: No partial dependencies \n\uf0b7 \n3NF: No transitive dependencies \n\uf0b7 \nEnsures data integrity and minimizes duplication. \n\ud83c\udfaf Why Normalize? \n\uf0b7 \nEliminate duplicate data \n\uf0b7 \nEnsure data consistency \n\uf0b7 \nImprove data structure for querying and updates \n \n\ud83d\udcda Normal Forms (NF) \n\u2705 1NF \u2013 First Normal Form \nRule: All values must be atomic (indivisible). \nFix: Remove repeating groups and store one value per cell. \nExample (Bad): \nID Name Phones \n1 Alice 1234, 5678 \nFix (1NF): \nID Name Phone \n1 Alice 1234 \n1 Alice 5678 \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 5, "text": "\u2705 2NF \u2013 Second Normal Form \nRule: Be in 1NF + No Partial Dependency on a composite key. \nFix: Move partially dependent data to a new table. \nExample: \nComposite key: (StudentID, CourseID) \nStudentID CourseID StudentName \nFix (2NF): \n\uf0b7 \nTable 1: StudentCourses(StudentID, CourseID) \n\uf0b7 \nTable 2: Students(StudentID, StudentName) \n \n\u2705 3NF \u2013 Third Normal Form \nRule: Be in 2NF + No transitive dependency. \nFix: Remove data that's indirectly dependent on the primary key. \nExample (Bad): \nEmpID Name DeptID DeptName \nFix (3NF): \n\uf0b7 \nTable 1: Employees(EmpID, Name, DeptID) \n\uf0b7 \nTable 2: Departments(DeptID, DeptName) \n \n\ud83e\udde0 When Not to Normalize? \n\uf0b7 \nFor read-heavy applications (analytics, reporting) \n\uf0b7 \nWhen query performance is more important than data integrity \n \n\u2705 Real-Life Analogy \n\uf0b7 \n1NF: Each house (record) has its own mailbox (cell), not a shared one \n\uf0b7 \n2NF: One key opens only one mailbox (no shared access) \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 6, "text": "\uf0b7 \n3NF: The key opens the right mailbox and not someone else\u2019s cabinet (no indirect \ndependencies) \n \n \n12. INDEXING \nIndexing is a powerful technique to speed up SELECT queries on large tables. \n\uf0b7 \nSpeeds up WHERE, JOIN, GROUP BY, and ORDER BY queries \n\uf0b7 \nBoosts search performance on large datasets. \n\uf0b7 \nAvoid on frequently updated or low-cardinality columns \n\uf0b7 \nUse EXPLAIN to test effectiveness \n\uf0b7 \nAvoid over-indexing (inserts & updates become slower). \n\u2705 Types \n\uf0b7 \nSingle-column Index \n \nCREATE INDEX idx_salary ON Employees(salary); \n\uf0b7 \nComposite Index \n \nCREATE INDEX idx_name_dept ON Employees(name, department);\n \n13. VIEWS \n\uf0b7 \nA view is a virtual table based on a query \n\uf0b7 \nThey do not store data. Use Materialized Views (if supported) for cached result. \n\uf0b7 \nSimplify complex queries. \n\uf0b7 \nEnhance security (restrict column access) \n\uf0b7 \nEnable reusable logic \n\u2705 Example \nCREATE VIEW HR_Employees AS \nSELECT name, salary \nFROM Employees \nWHERE department = 'HR'; \n \n \n14. TRANSACTIONS & ACID \nA Transaction is a logical unit of work consisting of one or more SQL statements. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 7, "text": "Use ROLLBACK; to undo changes before COMMIT;. \n\uf0b7 \nACID: \no \nAtomicity: All or none \no \nConsistency: Valid data state \no \nIsolation: No interference \no \nDurability: Permanent changes \n\u2705 Example \nBEGIN; \nUPDATE Accounts SET balance = balance - 100 WHERE id = 1; \nUPDATE Accounts SET balance = balance + 100 WHERE id = 2; \nCOMMIT; \n \n15. WINDOW FUNCTIONS \nWindow functions perform calculations across rows related to the current row \u2014 without collapsing \nthem like GROUP BY.  \nUsed for row-level calculations without grouping. \nUse cases : Leaderboards, Change Tracking, Tired analysis \nRANK(), DENSE_RANK(), ROW_NUMBER() \n\u2705 Example \nSELECT name, salary, \n  RANK() OVER (ORDER BY salary DESC) AS salary_rank \nFROM Employees; \n\ud83d\udd11 Popular Window Functions \n\uf0b7 \nROW_NUMBER(), RANK(), DENSE_RANK() \n\uf0b7 \nLAG(), LEAD() \n\uf0b7 \nNTILE(n) (for percentiles) \n \n16. COMMON TABLE EXPRESSIONS (CTEs) \nCTEs are temporary result sets used within queries \u2014 easier to read & maintain. \n\u2705 Syntax \nWITH HighEarners AS ( \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 8, "text": "  SELECT * FROM Employees WHERE salary > 50000 \n) \nSELECT name FROM HighEarners; \n\ud83e\udde0 Benefits \n\uf0b7 \nBreak complex queries into readable blocks \n\uf0b7 \nUse recursive CTEs for hierarchical data \n \n17. UNION vs UNION ALL \nSELECT name FROM Managers \nUNION \nSELECT name FROM Employees; -- Removes duplicates \n \nSELECT name FROM Managers \nUNION ALL \nSELECT name FROM Employees; -- Keeps duplicates \n \n18. SET OPERATIONS \nSELECT name FROM A \nINTERSECT \nSELECT name FROM B; \n \nSELECT name FROM A \nEXCEPT \nSELECT name FROM B; \n\uf0b7 \n\u26a0 Not supported in MySQL; supported in PostgreSQL/SQL Server. \n \n19. NULL Handling \nSELECT name, COALESCE(nickname, 'No Nick') FROM Users; \nSELECT NULLIF(salary, 0);  -- Returns NULL if salary = 0 \n\uf0b7 \nUse IS NULL / IS NOT NULL \n\uf0b7 \nCOALESCE(), IFNULL(), NULLIF() \n \n20. CASE Statements \nSELECT name, \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 9, "text": "CASE \n  WHEN salary > 70000 THEN 'High' \n  WHEN salary > 40000 THEN 'Medium' \n  ELSE 'Low' \nEND AS salary_level \nFROM Employees; \n \n21. Stored Procedures & Functions (Advanced) \nStored Procedures are saved SQL blocks that perform actions. \nFunctions return a single value. Use procedures for reusable logic. Use functions in SELECT, WHERE, or \nJOIN clauses \n\u2705 Procedure Example \nCREATE PROCEDURE GetHighEarners() \nBEGIN \n  SELECT * FROM Employees WHERE salary > 70000; \nEND; \n\u2705 Function Example \nCREATE FUNCTION TaxAmount(salary DECIMAL) \nRETURNS DECIMAL \nBEGIN \n  RETURN salary * 0.10; \nEND; \n \n \n22. Temporary Tables \nCREATE TEMPORARY TABLE Temp_Employees AS \nSELECT * FROM Employees WHERE department = 'HR'; \n \n23. Triggers (Advanced - Rare) \nCREATE TRIGGER before_insert_trigger \nBEFORE INSERT ON Employees \nFOR EACH ROW \nSET NEW.salary = IF(NEW.salary < 0, 0, NEW.salary); \n\uf0b7 \nUsed for validation, logging, auto-calculation. \n \n24. Data Definition vs Data Manipulation vs Data Control \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 10, "text": "\uf0b7 \nDDL (Definition): CREATE, ALTER, DROP \n\uf0b7 \nDML (Manipulation): SELECT, INSERT, UPDATE, DELETE \n\uf0b7 \nDCL (Control): GRANT, REVOKE \n\uf0b7 \nTCL (Transaction): COMMIT, ROLLBACK \n \nINTERVIEW QUERY PATTERNS \n\u27a4 Nth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET 1; -- 2nd highest \n\u27a4 Duplicate Rows \nSELECT name, COUNT(*) \nFROM Employees \nGROUP BY name \nHAVING COUNT(*) > 1; \n\u27a4 Same Salary Employees \nSELECT * FROM Employees \nWHERE salary IN ( \n  SELECT salary FROM Employees \n  GROUP BY salary \n  HAVING COUNT(*) > 1 \n); \n\u27a4 Employees with Max Salary Per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, \n         RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\u27a4 Self Join Example \nSELECT A.name AS Employee, B.name AS Manager \nFROM Employees A \nJOIN Employees B ON A.manager_id = B.id; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 11, "text": "\u27a4 EXISTS vs IN vs JOIN \n-- EXISTS \nSELECT name FROM Employees e \nWHERE EXISTS ( \n  SELECT 1 FROM Departments d WHERE d.id = e.department_id \n); \n-- IN \nSELECT name FROM Employees \nWHERE department_id IN (SELECT id FROM Departments); \n-- JOIN \nSELECT e.name, d.name FROM Employees e \nJOIN Departments d ON e.department_id = d.id; \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 12, "text": "Advanced SQL Topics \n \n1. Recursive CTEs (Made Simple) \nA Recursive CTE lets a query call itself, useful when working with hierarchies like employees \n& managers or categories & subcategories. \nEasy Analogy: \nThink of it like a loop in SQL. Start with one person (manager), then find their subordinates, then \nsubordinates of subordinates, and so on. \nSyntax: \nWITH RECURSIVE cte_name AS ( \n  SELECT ...  -- Starting point (anchor) \n  UNION ALL \n  SELECT ... FROM cte_name ... -- Repeat until done \n) \nSELECT * FROM cte_name; \nExample: \nWITH RECURSIVE Subordinates AS ( \n  SELECT id, name, manager_id FROM Employees WHERE id = 1 -- Top manager \n  UNION ALL \n  SELECT e.id, e.name, e.manager_id \n  FROM Employees e \n  JOIN Subordinates s ON e.manager_id = s.id \n) \nSELECT * FROM Subordinates; \n\u2705 This will return all employees working under manager ID 1, even indirectly. \n \n2. Window Functions \nThese functions look at other rows in the result without grouping them. Useful when you \nwant to compare each row with others. \nEveryday Use Case: \n\"Show each employee's salary along with the previous and next employee's salary.\" \nKey Functions: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 13, "text": "\uf0b7 \nLAG(column) \u2013 Looks before current row \n\uf0b7 \nLEAD(column) \u2013 Looks after current row \n\uf0b7 \nNTILE(n) \u2013 Divides into n equal groups (for percentiles/quartiles) \n\uf0b7 \nRANK(), DENSE_RANK(), ROW_NUMBER() \u2013 Ranking logic \nExample: \nSELECT name, salary, \n       LAG(salary) OVER (ORDER BY salary) AS prev_salary, \n       LEAD(salary) OVER (ORDER BY salary) AS next_salary \nFROM Employees; \n \n3. Working with JSON in SQL \nModern databases allow storing and querying JSON data inside SQL columns (especially \nuseful in dynamic or semi-structured data). \nPostgreSQL: \nSELECT data->>'name' AS name FROM orders WHERE data->>'status' = 'shipped'; \nMySQL: \nSELECT JSON_EXTRACT(data, '$.name') AS name FROM orders; \n\ud83d\udd0d Here, data is a column containing JSON like: { \"name\": \"Laptop\", \"status\": \"shipped\" } \n \n4. Performance Optimization Techniques \nOptimizing your SQL queries can make your app faster, especially for large data. \na. Indexing \n\uf0b7 \nLike a book index: helps locate rows faster \n\uf0b7 \nUseful for WHERE, JOIN, and ORDER BY \nCREATE INDEX idx_salary ON Employees(salary); \nb. Query Refactoring \n\uf0b7 \nAvoid SELECT * \u2192 only select needed columns \n\uf0b7 \nUse EXISTS instead of IN when subquery is large \n\uf0b7 \nApply filters early (use WHERE before GROUP BY) \nc. Execution Plan \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 14, "text": "Use EXPLAIN to understand how the database runs your query: \nEXPLAIN SELECT * FROM Employees WHERE department_id = 3; \n \n5. Stored Procedures & Functions (Simplified) \nStored Procedures = SQL scripts stored in the database that can be reused. Like a saved \nfunction. \nExample with Loop: \nDELIMITER // \nCREATE PROCEDURE GiveBonus() \nBEGIN \n  DECLARE done INT DEFAULT FALSE; \n  DECLARE emp_id INT; \n  DECLARE emp_cursor CURSOR FOR SELECT id FROM Employees; \n  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE; \n \n  OPEN emp_cursor; \n  read_loop: LOOP \n    FETCH emp_cursor INTO emp_id; \n    IF done THEN \n      LEAVE read_loop; \n    END IF; \n    UPDATE Employees SET salary = salary + 5000 WHERE id = emp_id; \n  END LOOP; \n  CLOSE emp_cursor; \nEND // \nDELIMITER ; \n\u2705 This procedure gives a \u20b95000 bonus to all employees. \n \n6. Importing/Exporting Data \nMoving data between CSV files and SQL is common in real projects. \nMySQL: \nLOAD DATA INFILE '/path/file.csv' \nINTO TABLE Employees \nFIELDS TERMINATED BY ',' \nLINES TERMINATED BY '\\n' \nIGNORE 1 ROWS; \nPostgreSQL: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 15, "text": "COPY Employees(name, salary) \nFROM '/path/file.csv' \nDELIMITER ',' \nCSV HEADER; \n \n7. Role-Based Access Control (Security Basics) \nSQL lets you give different permissions to different users. \nExample: \nGRANT SELECT, INSERT ON Employees TO 'analyst'; \nREVOKE DELETE ON Employees FROM 'analyst'; \n\u2705 'analyst' can view and add data, but can't delete anything. \n \n8. Star vs Snowflake Schema  \nUsed in Data Warehouses & Reporting Tools. \nStar Schema: \n\uf0b7 \nOne central fact table (e.g., Sales) \n\uf0b7 \nLinked to dimension tables (Customer, Product) \n\uf0b7 \nEasy to query, faster for reporting \nSnowflake Schema: \n\uf0b7 \nDimensions are normalized \n\uf0b7 \nLess redundancy but more joins \n \n9. OLTP vs OLAP (Database Types Simplified) \nFeature \nOLTP \nOLAP \n              Purpose \nDaily transactions \nData analysis \n              Design \nHighly normalized \ntables \nDenormalized \nschema \n             Examples \nBanking, eCommerce Reporting,Data \nWarehouse \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "\ud83c\udfaf INTERVIEW & PLACEMENT \n \n\ud83d\udd39 Basic Level (Entry / Fresher) \n1. What is SQL? \nStructured Query Language used to interact with relational databases. \n2. What is the difference between WHERE and HAVING? \nWHERE filters rows before aggregation, HAVING filters after aggregation. \n3. What is a Primary Key? \nA unique identifier for each row in a table. Cannot contain NULL values. \n4. Difference between INNER JOIN and LEFT JOIN? \nINNER JOIN: Returns matched rows only. \nLEFT JOIN: Returns all rows from the left table, even if no match. \n5. How do you handle NULLs in SQL? \nUse IS NULL, IS NOT NULL, COALESCE(), IFNULL(), NULLIF(). \n6. What is a Foreign Key? \nIt links two tables by referring to the primary key of another table. \n7. What is normalization? \nProcess of organizing data to reduce redundancy and improve integrity. \n8. What is denormalization? \nCombining tables to improve read performance by reducing joins. \n9. What does the DISTINCT keyword do? \nRemoves duplicate rows from the result set. \n10. What is the use of LIMIT or TOP? \nUsed to limit the number of rows returned by a query. \n\ud83d\udd39 Intermediate Level \n11. What are aggregate functions? \nFunctions like SUM(), AVG(), COUNT(), MAX(), MIN(). \n12. What is a subquery? \nA query nested inside another query. \n13. What is the difference between UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey impro", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "een UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey improve the speed of data retrieval. \n16. What is a view? \nA virtual table based on the result-set of a query. \n17. What are window functions? \nFunctions like RANK(), ROW_NUMBER() that work across rows. \n18. Difference between RANK() and DENSE_RANK()? \nRANK() skips ranks on ties, DENSE_RANK() does not. \n19. What is a CTE (Common Table Expression)? \nA temporary result set defined within the execution scope of a query. \n20. Explain ACID properties. \nAtomicity, Consistency, Isolation, Durability - ensures reliable transactions. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": "21. What is a composite key? \nA primary key made of multiple columns. \n22. Difference between DELETE and TRUNCATE? \nDELETE can be conditional and logs row-by-row deletion; TRUNCATE removes all rows \nfaster without logging each deletion. \n23. What is a surrogate key? \nA unique identifier for an entity that is not derived from application data. \n24. What is referential integrity? \nEnsures foreign key values match primary key values in the referenced table. \n25. How does EXISTS differ from IN? \nEXISTS stops on first match; IN evaluates all results. \n26. How do you use GROUP BY with multiple columns? \nYou can group by multiple columns by separating them with commas. \n27. Can we use ORDER BY with GROUP BY? \nYes. GROUP BY groups the data; ORDER BY sorts the grouped results. \n28. What is a scalar subquery? \nA subquery that returns exactly one value. \n29. What are correlated subqueries? \nSubqueries that refer to columns from the outer query. \n30. What is the use of ISNULL() or IFNULL()? \nTo replace NULL values with custom values. \n\ud83d\udd39 Advanced Level \n31. What are triggers in SQL? \nProcedures that automatically execute on certain events. \n32. What are stored procedures? \nReusable blocks of SQL statements stored in the database. \n33. What is the use of EXPLAIN or EXPLAIN PLAN? \nTo understand how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *,", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": " how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *, and use EXPLAIN to analyze. \n36. Difference between clustered and non-clustered index? \nClustered index determines row order in the table; non-clustered does not. \n37. Difference between OLTP and OLAP systems? \nOLTP: Online Transaction Processing (day-to-day operations). \nOLAP: Online Analytical Processing (data analysis and reporting). \n38. What are materialized views? \nStored query results that can be refreshed periodically. \n39. How do you implement pagination in SQL? \nUsing LIMIT and OFFSET or ROW_NUMBER() for custom logic. \n40. How do you handle duplicate rows? \nUsing ROW_NUMBER() or DISTINCT or CTEs with filtering. \n41. What are the different types of joins? \nINNER, LEFT, RIGHT, FULL OUTER, CROSS JOIN, SELF JOIN. \n42. What is a CROSS JOIN? \nReturns Cartesian product of two tables. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 18, "text": "43. Can you sort by an alias in SQL? \nYes, you can use the alias name in the ORDER BY clause. \n44. What is the difference between SQL and NoSQL? \nSQL is relational and uses tables. NoSQL is non-relational and uses documents, key-\nvalue pairs, etc. \n45. What are the common data types in SQL? \nINT, VARCHAR, DATE, BOOLEAN, DECIMAL, TEXT. \n46. Can a table have multiple foreign keys? \nYes, a table can reference multiple other tables using foreign keys. \n47. What happens if you violate a foreign key constraint? \nThe query fails with an integrity constraint violation. \n48. How can you change a column datatype in SQL? \nUsing ALTER TABLE table_name MODIFY column_name new_datatype; \n49. What are NULL-safe operators? \nOperators like <=> in MySQL allow safe comparison with NULL. \n50. How would you detect and remove duplicate records? \nUsing CTE and ROW_NUMBER() to filter duplicates. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 19, "text": "Real Company SQL Questions \nGoogle \n\uf0b7 \nSecond Highest Salary \nSELECT MAX(salary) AS SecondHighest \nFROM Employees \nWHERE salary < (SELECT MAX(salary) FROM Employees); \n\uf0b7 \nRemove Duplicate Emails Using ROW_NUMBER() \nWITH RankedEmails AS ( \n  SELECT *, ROW_NUMBER() OVER (PARTITION BY email ORDER BY id) \nAS rn \n  FROM Users \n) \nDELETE FROM RankedEmails WHERE rn > 1; \n\uf0b7 \nEmployees Earning More Than Average Salary \nSELECT name, salary \nFROM Employees \nWHERE salary > (SELECT AVG(salary) FROM Employees); \nAmazon \n\uf0b7 \nCustomers Who Ordered in Every Month \nSELECT customer_id \nFROM Orders \nGROUP BY customer_id \nHAVING COUNT(DISTINCT MONTH(order_date)) = 12; \n\uf0b7 \nTop 3 Earners in Each Department \nSELECT * \nFROM ( \n  SELECT *, DENSE_RANK() OVER (PARTITION BY department_id \nORDER BY salary DESC) AS rank \n  FROM Employees \n) ranked \nWHERE rank <= 3; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 20, "text": "\uf0b7 \nFind Returning Users Using LAG \nSELECT user_id, order_date, \n       LAG(order_date) OVER (PARTITION BY user_id ORDER BY \norder_date) AS previous_order \nFROM Orders; \nTCS \n\uf0b7 \nEmployees Joined in Last 6 Months \nSELECT * FROM Employees \nWHERE join_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH); \n\uf0b7 \nManager-Reportee Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n\uf0b7 \nDepartment with Highest Average Salary \nSELECT department_id \nFROM Employees \nGROUP BY department_id \nORDER BY AVG(salary) DESC \nLIMIT 1; \nFlipkart \n\uf0b7 \nTop 5 Selling Products by Revenue \nSELECT product_id, SUM(price * quantity) AS revenue \nFROM Orders \nGROUP BY product_id \nORDER BY revenue DESC \nLIMIT 5; \n\uf0b7 \nUsers with More Than 3 Failed Transactions \nSELECT user_id \nFROM Transactions \nWHERE status = 'FAILED' \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 21, "text": "GROUP BY user_id \nHAVING COUNT(*) > 3; \n\uf0b7 \nOrders Not Yet Shipped \nSELECT * \nFROM Orders \nWHERE status = 'PLACED' AND shipped_date IS NULL; \nSQL Problem-Solving Round \n \n\uf0b7 \nNth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET N-1; \n\uf0b7 \nDuplicate Emails \nSELECT email, COUNT(*) \nFROM Users \nGROUP BY email \nHAVING COUNT(*) > 1; \n\uf0b7 \nTop Earner per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, RANK() OVER (PARTITION BY department_id ORDER BY \nsalary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\uf0b7 \nCustomers Who Never Ordered \nSELECT c.customer_id, c.name \nFROM Customers c \nLEFT JOIN Orders o ON c.customer_id = o.customer_id \nWHERE o.order_id IS NULL; \n\uf0b7 \nEmployees Hired in the Last Month \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 22, "text": "SELECT * FROM Employees \nWHERE hire_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 \nMONTH) AND CURDATE(); \n\uf0b7 \nUser Order Summary \nSELECT user_id, COUNT(*) AS order_count, SUM(total_amount) AS \ntotal_spent \nFROM Orders \nGROUP BY user_id; \n\uf0b7 \n7-Day Rolling Login Count \nSELECT user_id, login_date, \n       COUNT(*) OVER ( \n         PARTITION BY user_id ORDER BY login_date \n         ROWS BETWEEN 6 PRECEDING AND CURRENT ROW \n       ) AS seven_day_logins \nFROM Logins; \n\uf0b7 \nFunnel Drop-off Analysis \nSELECT stage, COUNT(DISTINCT user_id) AS user_count \nFROM Funnel \nGROUP BY stage \nORDER BY stage; \n\uf0b7 \nAverage Time Between Orders \nSELECT user_id, AVG(DATEDIFF(order_date, LAG(order_date) OVER \n(PARTITION BY user_id ORDER BY order_date))) AS \navg_days_between_orders \nFROM Orders; \n\uf0b7 \nSelf Join for Employee Manager Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "Global Paid Developer & Mentorship Programs  \n1. Paid Developer Programs  \n  \nProgram  \nLocation  \nDuration  \nPay (INR)  \nApply Timeline  \nLinkedIn REACH  \nHybrid (USA)  \n1-5 years  \nRs.1.16-1.41 Cr/year    \n          June  \nMicrosoft LEAP  \nOn-site (USA/Canada)  16 weeks  \nRs.82-96 L/year  \n         August   \nAdobe Digital Academy  \nOn-site (USA)  \n6-9 months  \nStipend + Paid Apprenticeship  \n       September  \nGoogle Summer of Code (  GSoC)Remote  \n12+ weeks  \nRs.1.25-2.5 L  \n          March   \nMLH Fellowship  \nRemote  \n12 weeks  \nRs.4.1 L  \n     March- April  \nLinux Foundation Mentorsh ip (LFX)Remote  \n3-24 weeks  \nRs.2.5-5 L  \n     Feb-July (varies)  \n  \n2. Application Links   \n1. LinkedIn REACH: https://careers.linkedin.com/reach  \n2. Microsoft LEAP:  https://leap.microsoft.com  \n3. Adobe Digital Academy: https://www.adobe.com/corporate-\nresponsibility/creativity/digitalacademy  \n4. Google Summer of Code (GSoC): https://summerofcode.withgoogle.com  \n5. MLH Fellowship: https://fellowship.mlh.io/  \n6. Linux Foundation Mentorship (LFX): https://lfx.linuxfoundation.org/mentorship/  \n3. Paid Remote Mentorship Opportunities  \n1. Google Summer of Code (Mentor)  \nDetails: Experienced developers can apply as paid mentors for open-source projects.  \nApply: https://summerofcode.withgoogle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-sou", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "gle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-source project maintainers or contributors can apply to host/mentor projects. Apply: \nhttps://lfx.linuxfoundation.org/mentorship/  \n  \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Ecommerce  Mobility  \nCompanies  \nCloud  \nServices/  \nSaaS  \nCRM/Workflow \nManagement  \nTravel  \nPayments/  \nFintech  \nInvestment Banks/  \nHedge Funds  \nFlipkart  \nOla  \nVmWare  \nZoho  \nAirbnb  \nPaypal  \nDE Shaw  \nMyntra  \nUber  \nRedHat  \nSalesforce  \nOYO  \nVisa  \nGoldman Sachs  \nTesco  \nMeru  \nOCI  \nEngageBay  \nMakeMyTrip  \nPhonepe  \nWorld Quant  \nWalmart  \nZoomcar  \nSAP Labs  \nServiceNow  \nExpedia  \nPaytm  \nArcessium  \nTarget  \nRapido  \nIBM  \n \nBooking.com  BharatPe  \nIntuit  \nShopsy  \n \nBrowserStack   \nAgoda  \nCred  \nJP Morgan  \nBloomerang  \n \nNutanix  \n \nGroupon  \nSlice  \nMorgan Stanley  \nCult.fit  \n \nHp  \n \n \nRazorpay  \nWells Fargo  \nAJIO  \n \nNetApp  \n \n \nZeta  \nDruva  \nPharmaeasy   \nCohesity  \n \n \nRupeek  \n \nMeesho  \n \nTekion Corp  \n \n \nClearTax  \n \nLowe\u2019s  \n  \nRubrik  \n  \n  \nJupiter  \n  \nCompanies  \n \nMost High Paying Remote Jobs and few On-site jobs (Use FILTERS) \n1. https://tinyparticlejobs.com/ \n2. https://www.remoterocketship.com \n3. https://nodesk.co/remote-jobs/ \n4. https://wellfound.com/jobs \n5. https://weworkremotely.com/categories/remote-programming-jobs \n6. https://stackoverflow.com/jobs \n7. https://jobs.github.com \n8. https://www.linkedin.com/jobs/ \n9. https://www.toptal.com/ \n10. https://remoteok.io/remote-dev-jobs \n \nFew very high paying remote \u2013  \nSpreeTail \nBlink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Blink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": " \n \nRICH PEOPLE USES / BILLIONAIRES LINKS \n Investment & Startup Platforms \n AngelList Ventures  \u2014 https://angel.co/venture \n MicroVentures \u2014 https://microventures.com/ \n ToptalSeedInvest \u2014 https://www.seedinvest.com/ \n Product Hunt Makers -- https://www.producthunt.com/makers \n Y Cobinator Startup School \u2013 https://www.startupschool.org/ \n      Premium Networking & Professional Platforms \n Lunchclub \u2014 https://lunchclub.com/ \n Shapr \u2014 https://www.shapr.co/ \n Toptal \u2014 https://www.toptal.com/ \n Tiger 21 (private network for investors) \u2014https://tiger21.com/ \n FoundersCard \u2014 https://founderscard.com/ \n      Exclusive Social & Community Platforms \n Clubhouse (invite-only audio network) \u2014 https://www.joinclubhouse.com/ \n Techstars Founders Slack (invite-only; search online to join) \n Various Venture Capital & Startup Discord communities (search Discord servers) \n     Conferences & Summits (for networking) \n TED \u2014 https://www.ted.com/ \n Web Summit -- https://websummit.com/ \n SXSW -- https://www.sxsw.com/ \n TechCrunch Disrupt \u2014 https://techcrunch.com/events/disrupt-sf-2024/ \n Forbes 30 Under 30 Summit \u2014https://www.forbes.com/30-under-30-summit/ \n     Private Family Office & Wealth Networks \n Family Office Club \u2014 https://familyoffices.com/ \n Opal Group \u2014 https://opalgroup.net/ \n \nEmails/Numbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLead", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": "mbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLeads \nVoilaNorbert, AngelList Talent, YCombinator Jobs, WellFound, Triplebyte, HackerRank Talent, Wiza \nLinkedIn Email Finder by Skrapp or Snov.io, Hunter for Chrome, Clearbit Reveal, Lusha Chrome \nExtension \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "DSA Interview Notes \u2013 Standard Layouts & Mappings \n \n1. Phone Keypad Mapping \nphone_map = { \n    \"2\": \"abc\", \"3\": \"def\", \n    \"4\": \"ghi\", \"5\": \"jkl\", \n    \"6\": \"mno\", \"7\": \"pqrs\", \n    \"8\": \"tuv\", \"9\": \"wxyz\" \n} \n\u2705 Use in: \n\uf0b7 \nLetter Combinations of Phone Number, Predictive Text / T9, Find All Possible Words from \nDigits  \n\uf0b7 \nBacktracking, DFS, Strings \n \n2. Grid/Matrix Directions \n4-Direction Movement (Up, Down, Left, Right) \ndirs_4 = [(-1, 0), (1, 0), (0, -1), (0, 1)] \n8-Direction Movement (Diagonals included) \ndirs_8 = [(-1, -1), (-1, 0), (-1, 1), \n          (0, -1),           (0, 1), \n          (1, -1),  (1, 0),  (1, 1)] \n\u2705 Use in: \n\uf0b7 \nNumber of Islands, Word Search, Maze Solving, Flood Fill \n\uf0b7 \nDFS/BFS, Matrix Problems \n \n3. Knight\u2019s Moves (Chessboard) \nknight_moves = [ \n    (2, 1), (1, 2), (-1, 2), (-2, 1), \n    (-2, -1), (-1, -2), (1, -2), (2, -1) \n] \n\u2705 Use in:  Knight\u2019s Tour, Minimum Knight Moves , Puzzle/Chess Grid\n \n", "file_name": "DSAnPython.pdf"}, {"page": 2, "text": "4. Binary Tree Traversals \nclass TreeNode: \n    def __init__(self, val=0, left=None, right=None): \n        self.val = val \n        self.left = left \n        self.right = right \n\uf0b7 \nPreorder: Root \u2192 Left \u2192 Right \n\uf0b7 \nInorder: Left \u2192 Root \u2192 Right \n\uf0b7 \nPostorder: Left \u2192 Right \u2192 Root \n\uf0b7 \nLevel Order: BFS using queue \n\u2705 Use in: Tree reconstruction, Path Sum, BST validation, Trees, Recursion, DFS\n \n5. Min Heap / Max Heap in Python \nimport heapq \n \n# Min Heap \nheapq.heappush(heap, val) \nheapq.heappop(heap) \n \n# Max Heap \nheapq.heappush(heap, -val) \nheapq.heappop(heap) * -1 \n\u2705 Use in: Top K elements, Median in stream, Kth smallest/largest, Greedy, Priority Queues\n \n6. ASCII Mapping (Characters \u2192 Numbers) \nord('a')  # 97 \nchr(97)   # 'a' \n \nord('z')  # 122 \n\u2705 Use in: Frequency Arrays (size 26), Anagrams, Palindrome Check , Frequency counting\n \n7. Keyboard Row Mapping \nrow1 = set(\"qwertyuiop\") \nrow2 = set(\"asdfghjkl\") \nrow3 = set(\"zxcvbnm\") \n\u2705 Use in: Words Using Only One Row of Keyboard, String filtering\n \n", "file_name": "DSAnPython.pdf"}, {"page": 3, "text": "8. Roman Numerals Mapping \nroman_map = { \n    'I': 1, 'V': 5, 'X': 10, \n    'L': 50, 'C': 100, 'D': 500, 'M': 1000 \n} \n\u2705 Use in: Roman to Integer, Integer to Roman, String / Math Conversion\n \n9. Weekday Layout (for calendar problems) \nweekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', \n'Friday', 'Saturday'] \n\u2705 Use in: Day calculation, Zeller\u2019s Congruence\n \n10. Digit to Word Mapping \ndigit_to_word = { \n  0: 'zero', 1: 'one', ..., 9: 'nine' \n} \n\u2705 Use in: Verbal arithmetic puzzles , Spoken digit output problems \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 4, "text": "The Top 14 LeetCode Patterns You Need to Know \n1. Sliding Window \n\u2705 Used when working with subarrays, substrings, or fixed-size / variable windows. \n     Helps in reducing time from O(n\u00b2) \u2192 O(n) \nExamples: Maximum Sum Subarray of Size K , Longest Substring Without Repeating Characters, \nMinimum Window Substring\n \n2. Two Pointers \n\u2705 Used for problems involving sorted arrays, linked lists, etc. \n     Moves two pointers from front/back/middle \nExamples: Two Sum II (sorted array), 3Sum, Container With Most Water\n \n3. Fast and Slow Pointers \n\u2705 Detect cycles, mid-points \nExamples: Linked List Cycle, Find the Duplicate Number , Middle of Linked List\n \n4. Hashing (HashMap / Set) \n\u2705 Count frequencies, track seen elements, prefix sums \nExamples: Subarray Sum Equals K , Group Anagrams , Longest Consecutive Sequence\n \n5. Prefix Sum \n\u2705 For cumulative/interval sums, range queries \nExamples: Subarray Sum Equals K , Range Sum Query , Count Subarrays with Sum\n \n6. Backtracking \n\u2705 Try all combinations, revert decisions \nExamples: Subsets , Permutations , Letter Combinations of a Phone Number, N-Queens \n", "file_name": "DSAnPython.pdf"}, {"page": 5, "text": " \n7. Recursion / DFS \n\u2705 Tree/graph traversal, subset problems \nExamples: Binary Tree Traversals , Generate Parentheses , Subsets\n \n8. Breadth-First Search (BFS) \n\u2705 Used in graphs, trees, shortest paths \nExamples: Binary Tree Level Order Traversal, Word Ladder, Number of Islands\n \n9. Depth-First Search (DFS) \n\u2705 Graph traversal, backtracking, component counting \nExamples: Number of Islands , Clone Graph , Word Search\n \n10. Greedy \n\u2705 Make best local choice at each step \nExamples: Jump Game , Merge Intervals , Gas Station , Partition Labels\n \n11. Dynamic Programming (DP) \n\u2705 Break down problem into subproblems, store results \nExamples: House Robber , Longest Increasing Subsequence , 0/1 Knapsack, Coin Change\n \n12. Bit Manipulation \n\u2705 Work with bits for optimization or tricky logic \nExamples: Single Number , Counting Bits , Subsets (with bitmasking) \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 6, "text": "13. Union Find (Disjoint Set) \n\u2705 Track connected components \nExamples: Graph Valid Tree , Number of Connected Components, Redundant Connection\n \n14. Heap / Priority Queue \n\u2705 Get max/min quickly, sliding window max, k-largest \nExamples: Kth Largest Element, Merge K Sorted Lists, Top K Frequent Elements \n \n \n \nExtra Patterns (Advanced \u2013 optional): \nIf you have time later, explore these bonus topics: \n1. Monotonic Stack / Deque \n2. Segment Trees / Binary Indexed Trees \n3. Dijkstra\u2019s / A* for weighted graphs \n4. Tries (prefix trees) \n5. Rabin-Karp (String Hashing) \nThese are not Amazon must-knows, but helpful for: \n\uf0b7 \nGoogle \n\uf0b7 \nDeep graph / string / optimization problems \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 7, "text": "1. Built-in Functions (Essentials) \n \nFunction \nPurpose \nExample \nmax() \nGet the maximum of values max(3, 7) \u2192 7 \nmin() \nGet the minimum \nmin(3, 7) \u2192 3 \nsum() \nSum of list values \nsum([1, 2, 3]) \u2192 6 \nlen() \nLength of list, string, etc. \nlen(arr) \nrange() \nGenerate a sequence \nrange(5) \u2192 0, 1, 2, 3, 4 \nenumerate() Loop with index \nfor i, val in enumerate(arr) \nreversed() \nReverse iterator \nfor val in reversed(arr) \nsorted() \nReturns sorted version of list sorted(arr) \nlist() \nConvert to list \nlist(\"abc\") \u2192 ['a','b','c'] \n \n2. Strings \u2013 Helpful Methods \n \nFunction \nPurpose \nExample \nstr.split() \nSplit string into list \n\"a b c\".split() \u2192 ['a','b','c'] \nstr.strip() \nRemove whitespace \n\" abc \".strip() \u2192 \"abc\" \nstr.isdigit() \nCheck if string is a digit \"123\".isdigit() \u2192 True \nstr.lower() / upper() Convert case \n\"HeLLo\".lower() \u2192 \"hello\" \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 8, "text": "3. Lists \u2013 Core Methods \nMethod \nPurpose \nExample \nlist.append(x) Add element at the end \narr.append(10) \nlist.pop() \nRemove last element \narr.pop() \nlist.remove(x) Remove element by value arr.remove(2) \nlist.index(x) \nGet index of value \narr.index(5) \nlist.insert(i, x) Insert at index \narr.insert(1, 99) \nlist.count(x) Count occurrences \narr.count(2) \n \n4. Dictionary (Hashmap) \u2013 Extremely Useful \nMethod / Function \nPurpose \nExample \ndict.get(key, default) Get value or return default d.get('a', 0) \ndict.keys() / values() Iterate keys/values \nfor key in d.keys() \ndict.items() \nIterate key, value pairs \nfor k, v in d.items() \nkey in dict \nCheck if key exists \n'a' in d \ndefaultdict(int) \nAuto-handle missing keys from collections import defaultdict \n \n5. Collections Module \nTool \nPurpose \nExample \ndefaultdict(type) Dictionary with default values dd = defaultdict(int) \nCounter() \nCount occurrences of elements Counter(\"aabc\") \u2192 {'a':2, 'b':1,...} \ndeque() \nDouble-ended queue \ndq = deque([1,2,3]) \nheapq \nPriority Queue / Min Heap \nheapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 9, "text": "6. Math / Time / Random \n \nModule \nFunction \nPurpose \nmath \nmath.sqrt(), math.ceil() Square root, rounding \ntime \ntime.time() \nGet current time (for speed) \nrandom random.randint() \nRandom numbers (for mock tests) \n \n7. Useful Tricks \nTrick \nDescription \nExample \narr[::-1] \nReverse a list or string \ns[::-1] \na, b = b, a Swap variables \n \n' '.join(list) Convert list to string with spaces ' '.join(['a','b']) \u2192 \"a b\" \nall() / any() Check all / any condition is True all([1, True]) \n \nBonus: Lambda & Key Functions (for Sorting) \narr.sort(key=lambda x: x[1])  # Sort by second element of sublists \nUseful for: \n\uf0b7 \nSorting arrays of tuples \n\uf0b7 \nSorting by custom logic \n \nGreat question, Bhawana! You're already covering a solid base. But yes \u2014 here\u2019s a final \nroundup of additional useful Python concepts and functions that are often overlooked but \ncritical in real DSA problems (especially in contests and interviews like Amazon). \n \n", "file_name": "DSAnPython.pdf"}, {"page": 10, "text": "8. Advanced Built-ins & Tricks (Most Students Miss These!) \nFeature/Function \nUse Case \nExample \nzip() \nLoop over multiple iterables \nsimultaneously \nfor a, b in zip(arr1, \narr2) \nmap() \nApply function to each item \nmap(int, input().split()) \nfilter() \nFilter elements by condition \nfilter(lambda x: x > 0, \narr) \nset() \nRemoves duplicates, used for \nfast lookup \nset(arr) \nset.add() / set.remove() \nModify set \n \nislice() from itertools \nSlicing iterators \nislice(range(100), 10, 20) \nbisect.bisect_left() / \nbisect_right() \nBinary search in sorted list \nbisect.bisect_left(arr, x) \nany() \nTrue if any element is truthy \nany([False, True, False]) \n\u2192 True \nall() \nTrue if all elements are truthy \nall([1, 2, 3]) \u2192 True \nre module \nRegex for pattern matching \n(sometimes needed in parsing) re.findall(r'\\d+', s) \n \n9. Built-in Data Types You Must Master \nType \nWhen to Use \nQuick Syntax Example \nlist Ordered, indexable \na = [1, 2, 3] \ntuple Immutable, hashable keys a = (1, 2) \nset \nUnique values, fast lookup a = {1, 2, 3} \ndict Key-value mapping \nd = {'a': 1} \ndeque Queue/Stack with fast ops deque([1,2,3]) from collections \nheap Min/Max heap for priority heapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 11, "text": "10. Collections Deep Dive (Very Interview-Friendly) \nTool \nUse Case \nExample \ndefaultdict(list/int) Auto-initialize missing keys dd = defaultdict(list) \nCounter() \nCount occurrences of each \nelement \nCounter([1,2,2,3]) \u2192 {2:2, 1:1, \n3:1} \nOrderedDict() \nKeeps insertion order \n(Rarely used now, since dicts are ordered from \nPython 3.7+) \ndeque() \nQueue or two-sided \noperations \ndq.popleft(), dq.appendleft() \n \n11. heapq (Min/Max Heap) \nimport heapq \nmin_heap = [] \nheapq.heappush(min_heap, 5) \nheapq.heappush(min_heap, 3) \nheapq.heappop(min_heap)  # returns 3 (smallest) \nUse in: \n\u2705 Top-K problems, \n\u2705 Priority queues, \n\u2705 Greedy algorithms \n \n12. Functools (for memoization and recursion) \nfrom functools import lru_cache \n \n@lru_cache(None) \ndef fib(n): \n    if n <= 1: \n        return n \n    return fib(n-1) + fib(n-2) \nUse in: \n\u2705 Dynamic Programming, \n\u2705 Top-down memoization, \n\u2705 Recursion-heavy problems \n", "file_name": "DSAnPython.pdf"}, {"page": 12, "text": " \n13. Bit Manipulation Functions \nBit Trick \nPurpose \nx << 1, x >> 1 \nBit shifts (multiply/divide by 2) \nx & 1 \nCheck if x is odd \nx ^ y \nBitwise XOR \nbin(x).count('1') Count set bits in x \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 13, "text": "Python Notes for Beginners to Intermediate \n 1. Introduction to Python \n\uf0b7 \nHigh-level, interpreted, and dynamically typed programming language. \n\uf0b7 \nCreated by Guido van Rossum, released in 1991. \n\uf0b7 \nGreat for web dev, data science, automation, AI, scripting, etc. \n \n2. Basic Syntax \n# This is a comment \nprint(\"Hello, World!\")  # Output: Hello, World! \n\uf0b7 \nIndentation is mandatory in Python to define blocks. \n\uf0b7 \nNo {} or ; like in C/C++/Java. \n \n3. Data Types \n\uf0b7 \nint, float, str, bool \n\uf0b7 \nlist, tuple, set, dict \n\uf0b7 \nNoneType \na = 5               # int \nb = 5.0             # float \nc = \"Python\"        # str \nd = True            # bool \n \n4. Type Conversion \nint(\"5\")        # 5 \nfloat(\"3.14\")   # 3.14 \nstr(100)        # \"100\" \nbool(0)         # False \n \n5. Variables \n\uf0b7 \nNo need to declare the type. \n\uf0b7 \nFollows snake_case naming. \nname = \"Bhawana\" \nage = 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 14, "text": " \n6. Control Flow \nif / elif / else \nif age > 18: \n    print(\"Adult\") \nelif age == 18: \n    print(\"Just turned adult\") \nelse: \n    print(\"Minor\") \nwhile loop \ni = 0 \nwhile i < 5: \n    print(i) \n    i += 1 \nfor loop \nfor i in range(5): \n    print(i) \n \n 7. Functions \ndef greet(name): \n    return f\"Hello, {name}\" \n \nprint(greet(\"Bhawana\")) \n \n8. Strings \ntext = \"Python\" \nprint(text.upper())       # 'PYTHON' \nprint(text[0])            # 'P' \nprint(len(text))          # 6 \nprint(\"th\" in text)       # True \n \n9. Lists \nfruits = [\"apple\", \"banana\", \"mango\"] \nfruits.append(\"orange\") \nprint(fruits[1])          # \"banana\" \n \n", "file_name": "DSAnPython.pdf"}, {"page": 15, "text": "10. Tuples \nt = (1, 2, 3) \n# Immutable \nprint(t[0])               # 1 \n \n11. Dictionaries \nstudent = {\"name\": \"Alice\", \"age\": 20} \nprint(student[\"name\"])    # Alice \nstudent[\"age\"] = 21 \n \n12. Sets \nnums = {1, 2, 3, 2} \nprint(nums)               # {1, 2, 3} - duplicates removed \n \n13. Exception Handling \ntry: \n    x = 1 / 0 \nexcept ZeroDivisionError: \n    print(\"Can't divide by zero!\") \nfinally: \n    print(\"Done\") \n \n14. Modules and Libraries \nimport math \nprint(math.sqrt(16))      # 4.0 \nInstall external modules: \npip install requests \n \n15. List Comprehension \nsquares = [x**2 for x in range(5)]   # [0, 1, 4, 9, 16] \n \n16. Lambda Functions \nsquare = lambda x: x ** 2 \nprint(square(5))          # 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 16, "text": " \n 17. Object-Oriented Programming (OOP) \nclass Person: \n    def __init__(self, name): \n        self.name = name \n \n    def say_hi(self): \n        print(f\"Hi, I'm {self.name}\") \n \np = Person(\"Bhawana\") \np.say_hi() \n \n18. File Handling \nwith open(\"file.txt\", \"r\") as file: \n    content = file.read() \n    print(content) \n \n19. Useful Built-in Functions \n\uf0b7 \nlen(), type(), range(), sorted(), input(), sum(), max(), min() \n \n20. Best Practices \n\uf0b7 \nUse meaningful variable names. \n\uf0b7 \nKeep code DRY (Don't Repeat Yourself). \n\uf0b7 \nUse virtual environments. \n\uf0b7 \nFollow PEP8 (Python Style Guide). \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 17, "text": " \n", "file_name": "DSAnPython.pdf"}, {"page": 1, "text": " \n \nGeneral SQL Topics \n1. INTRODUCTION TO SQL \n\uf0b7 \nSQL: Structured Query Language, used to interact with relational databases. \n\uf0b7 \nRelational Database: Stores data in tables (rows & columns). \n\uf0b7 \nCommon RDBMS: MySQL, PostgreSQL, SQLite, Oracle, SQL Server. \n \n2. SQL DATA TYPES \n\uf0b7 \nINT: Integer numbers \n\uf0b7 \nVARCHAR(n): Variable-length string with a maximum of n characters \n\uf0b7 \nCHAR(n): Fixed-length string \n\uf0b7 \nDATE / DATETIME: Date or timestamp \n\uf0b7 \nDECIMAL(p, s): Exact numeric value with precision and scale \n\uf0b7 \nBOOLEAN: True or False \n\uf0b7 \nTEXT: Long-form string data \n \n3. BASIC SQL COMMANDS \n\u27a4 Create Table \nCREATE TABLE Employees ( \n  id INT PRIMARY KEY, \n  name VARCHAR(100), \n  salary INT, \n  department VARCHAR(50) \n); \n\u27a4 Insert \nINSERT INTO Employees (id, name, salary, department) \nVALUES (1, 'Alice', 60000, 'HR'); \n\u27a4 Select \nSELECT * FROM Employees; \nSELECT name, salary FROM Employees; \nSELECT * FROM Employees WHERE salary > 50000; \n\u27a4 Update \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 2, "text": "UPDATE Employees SET salary = 70000 WHERE id = 1; \n\u27a4 Delete \nDELETE FROM Employees WHERE id = 1; \n \n4. FILTERING DATA \n\u27a4 WHERE, AND, OR, NOT \nSELECT * FROM Employees \nWHERE department = 'HR' AND salary > 50000; \n\u27a4 IN, BETWEEN, LIKE \nSELECT * FROM Employees WHERE department IN ('HR', 'Sales'); \nSELECT * FROM Employees WHERE salary BETWEEN 40000 AND 70000; \nSELECT * FROM Employees WHERE name LIKE 'A%'; -- starts with A \n \n5. SORTING & LIMITING \nSELECT * FROM Employees ORDER BY salary DESC; \nSELECT * FROM Employees LIMIT 5; \n \n6. AGGREGATE FUNCTIONS \nSELECT COUNT(*) FROM Employees; \nSELECT AVG(salary) FROM Employees; \nSELECT SUM(salary), MAX(salary), MIN(salary) FROM Employees; \n \n7. GROUPING & FILTERING AGGREGATES \nSELECT department, AVG(salary) AS avg_salary \nFROM Employees \nGROUP BY department \nHAVING AVG(salary) > 50000; \n \n8. JOINS \n\u27a4 Syntax: \nSELECT e.name, d.name \nFROM Employees e \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 3, "text": "JOIN Departments d ON e.department_id = d.id; \n8.1. INNER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nINNER JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 Only matching department IDs shown. \n8.2. LEFT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All employees shown, even if no department. \n8.3. RIGHT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All departments shown, even if no employee. \n8.4. FULL OUTER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id \nUNION \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n \n9. SUBQUERIES \nUsed to embed one query inside another. \nSELECT name FROM Employees \nWHERE salary > ( \n  SELECT AVG(salary) FROM Employees \n); \n \n10. CONSTRAINTS \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 4, "text": "\uf0b7 \nPRIMARY KEY: Uniquely identifies each record \n\uf0b7 \nFOREIGN KEY: Links to primary key of another table \n\uf0b7 \nUNIQUE: Ensures all values in a column are different \n\uf0b7 \nNOT NULL: Disallows NULL values \n\uf0b7 \nCHECK: Ensures a condition is met \n \n11. NORMALIZATION  \n\uf0b7 \nProcess of organizing data to reduce redundancy and improve data integrity. \n\uf0b7 \n1NF: Atomic values \n\uf0b7 \n2NF: No partial dependencies \n\uf0b7 \n3NF: No transitive dependencies \n\uf0b7 \nEnsures data integrity and minimizes duplication. \n\ud83c\udfaf Why Normalize? \n\uf0b7 \nEliminate duplicate data \n\uf0b7 \nEnsure data consistency \n\uf0b7 \nImprove data structure for querying and updates \n \n\ud83d\udcda Normal Forms (NF) \n\u2705 1NF \u2013 First Normal Form \nRule: All values must be atomic (indivisible). \nFix: Remove repeating groups and store one value per cell. \nExample (Bad): \nID Name Phones \n1 Alice 1234, 5678 \nFix (1NF): \nID Name Phone \n1 Alice 1234 \n1 Alice 5678 \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 5, "text": "\u2705 2NF \u2013 Second Normal Form \nRule: Be in 1NF + No Partial Dependency on a composite key. \nFix: Move partially dependent data to a new table. \nExample: \nComposite key: (StudentID, CourseID) \nStudentID CourseID StudentName \nFix (2NF): \n\uf0b7 \nTable 1: StudentCourses(StudentID, CourseID) \n\uf0b7 \nTable 2: Students(StudentID, StudentName) \n \n\u2705 3NF \u2013 Third Normal Form \nRule: Be in 2NF + No transitive dependency. \nFix: Remove data that's indirectly dependent on the primary key. \nExample (Bad): \nEmpID Name DeptID DeptName \nFix (3NF): \n\uf0b7 \nTable 1: Employees(EmpID, Name, DeptID) \n\uf0b7 \nTable 2: Departments(DeptID, DeptName) \n \n\ud83e\udde0 When Not to Normalize? \n\uf0b7 \nFor read-heavy applications (analytics, reporting) \n\uf0b7 \nWhen query performance is more important than data integrity \n \n\u2705 Real-Life Analogy \n\uf0b7 \n1NF: Each house (record) has its own mailbox (cell), not a shared one \n\uf0b7 \n2NF: One key opens only one mailbox (no shared access) \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 6, "text": "\uf0b7 \n3NF: The key opens the right mailbox and not someone else\u2019s cabinet (no indirect \ndependencies) \n \n \n12. INDEXING \nIndexing is a powerful technique to speed up SELECT queries on large tables. \n\uf0b7 \nSpeeds up WHERE, JOIN, GROUP BY, and ORDER BY queries \n\uf0b7 \nBoosts search performance on large datasets. \n\uf0b7 \nAvoid on frequently updated or low-cardinality columns \n\uf0b7 \nUse EXPLAIN to test effectiveness \n\uf0b7 \nAvoid over-indexing (inserts & updates become slower). \n\u2705 Types \n\uf0b7 \nSingle-column Index \n \nCREATE INDEX idx_salary ON Employees(salary); \n\uf0b7 \nComposite Index \n \nCREATE INDEX idx_name_dept ON Employees(name, department);\n \n13. VIEWS \n\uf0b7 \nA view is a virtual table based on a query \n\uf0b7 \nThey do not store data. Use Materialized Views (if supported) for cached result. \n\uf0b7 \nSimplify complex queries. \n\uf0b7 \nEnhance security (restrict column access) \n\uf0b7 \nEnable reusable logic \n\u2705 Example \nCREATE VIEW HR_Employees AS \nSELECT name, salary \nFROM Employees \nWHERE department = 'HR'; \n \n \n14. TRANSACTIONS & ACID \nA Transaction is a logical unit of work consisting of one or more SQL statements. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 7, "text": "Use ROLLBACK; to undo changes before COMMIT;. \n\uf0b7 \nACID: \no \nAtomicity: All or none \no \nConsistency: Valid data state \no \nIsolation: No interference \no \nDurability: Permanent changes \n\u2705 Example \nBEGIN; \nUPDATE Accounts SET balance = balance - 100 WHERE id = 1; \nUPDATE Accounts SET balance = balance + 100 WHERE id = 2; \nCOMMIT; \n \n15. WINDOW FUNCTIONS \nWindow functions perform calculations across rows related to the current row \u2014 without collapsing \nthem like GROUP BY.  \nUsed for row-level calculations without grouping. \nUse cases : Leaderboards, Change Tracking, Tired analysis \nRANK(), DENSE_RANK(), ROW_NUMBER() \n\u2705 Example \nSELECT name, salary, \n  RANK() OVER (ORDER BY salary DESC) AS salary_rank \nFROM Employees; \n\ud83d\udd11 Popular Window Functions \n\uf0b7 \nROW_NUMBER(), RANK(), DENSE_RANK() \n\uf0b7 \nLAG(), LEAD() \n\uf0b7 \nNTILE(n) (for percentiles) \n \n16. COMMON TABLE EXPRESSIONS (CTEs) \nCTEs are temporary result sets used within queries \u2014 easier to read & maintain. \n\u2705 Syntax \nWITH HighEarners AS ( \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 8, "text": "  SELECT * FROM Employees WHERE salary > 50000 \n) \nSELECT name FROM HighEarners; \n\ud83e\udde0 Benefits \n\uf0b7 \nBreak complex queries into readable blocks \n\uf0b7 \nUse recursive CTEs for hierarchical data \n \n17. UNION vs UNION ALL \nSELECT name FROM Managers \nUNION \nSELECT name FROM Employees; -- Removes duplicates \n \nSELECT name FROM Managers \nUNION ALL \nSELECT name FROM Employees; -- Keeps duplicates \n \n18. SET OPERATIONS \nSELECT name FROM A \nINTERSECT \nSELECT name FROM B; \n \nSELECT name FROM A \nEXCEPT \nSELECT name FROM B; \n\uf0b7 \n\u26a0 Not supported in MySQL; supported in PostgreSQL/SQL Server. \n \n19. NULL Handling \nSELECT name, COALESCE(nickname, 'No Nick') FROM Users; \nSELECT NULLIF(salary, 0);  -- Returns NULL if salary = 0 \n\uf0b7 \nUse IS NULL / IS NOT NULL \n\uf0b7 \nCOALESCE(), IFNULL(), NULLIF() \n \n20. CASE Statements \nSELECT name, \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 9, "text": "CASE \n  WHEN salary > 70000 THEN 'High' \n  WHEN salary > 40000 THEN 'Medium' \n  ELSE 'Low' \nEND AS salary_level \nFROM Employees; \n \n21. Stored Procedures & Functions (Advanced) \nStored Procedures are saved SQL blocks that perform actions. \nFunctions return a single value. Use procedures for reusable logic. Use functions in SELECT, WHERE, or \nJOIN clauses \n\u2705 Procedure Example \nCREATE PROCEDURE GetHighEarners() \nBEGIN \n  SELECT * FROM Employees WHERE salary > 70000; \nEND; \n\u2705 Function Example \nCREATE FUNCTION TaxAmount(salary DECIMAL) \nRETURNS DECIMAL \nBEGIN \n  RETURN salary * 0.10; \nEND; \n \n \n22. Temporary Tables \nCREATE TEMPORARY TABLE Temp_Employees AS \nSELECT * FROM Employees WHERE department = 'HR'; \n \n23. Triggers (Advanced - Rare) \nCREATE TRIGGER before_insert_trigger \nBEFORE INSERT ON Employees \nFOR EACH ROW \nSET NEW.salary = IF(NEW.salary < 0, 0, NEW.salary); \n\uf0b7 \nUsed for validation, logging, auto-calculation. \n \n24. Data Definition vs Data Manipulation vs Data Control \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 10, "text": "\uf0b7 \nDDL (Definition): CREATE, ALTER, DROP \n\uf0b7 \nDML (Manipulation): SELECT, INSERT, UPDATE, DELETE \n\uf0b7 \nDCL (Control): GRANT, REVOKE \n\uf0b7 \nTCL (Transaction): COMMIT, ROLLBACK \n \nINTERVIEW QUERY PATTERNS \n\u27a4 Nth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET 1; -- 2nd highest \n\u27a4 Duplicate Rows \nSELECT name, COUNT(*) \nFROM Employees \nGROUP BY name \nHAVING COUNT(*) > 1; \n\u27a4 Same Salary Employees \nSELECT * FROM Employees \nWHERE salary IN ( \n  SELECT salary FROM Employees \n  GROUP BY salary \n  HAVING COUNT(*) > 1 \n); \n\u27a4 Employees with Max Salary Per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, \n         RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\u27a4 Self Join Example \nSELECT A.name AS Employee, B.name AS Manager \nFROM Employees A \nJOIN Employees B ON A.manager_id = B.id; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 11, "text": "\u27a4 EXISTS vs IN vs JOIN \n-- EXISTS \nSELECT name FROM Employees e \nWHERE EXISTS ( \n  SELECT 1 FROM Departments d WHERE d.id = e.department_id \n); \n-- IN \nSELECT name FROM Employees \nWHERE department_id IN (SELECT id FROM Departments); \n-- JOIN \nSELECT e.name, d.name FROM Employees e \nJOIN Departments d ON e.department_id = d.id; \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 12, "text": "Advanced SQL Topics \n \n1. Recursive CTEs (Made Simple) \nA Recursive CTE lets a query call itself, useful when working with hierarchies like employees \n& managers or categories & subcategories. \nEasy Analogy: \nThink of it like a loop in SQL. Start with one person (manager), then find their subordinates, then \nsubordinates of subordinates, and so on. \nSyntax: \nWITH RECURSIVE cte_name AS ( \n  SELECT ...  -- Starting point (anchor) \n  UNION ALL \n  SELECT ... FROM cte_name ... -- Repeat until done \n) \nSELECT * FROM cte_name; \nExample: \nWITH RECURSIVE Subordinates AS ( \n  SELECT id, name, manager_id FROM Employees WHERE id = 1 -- Top manager \n  UNION ALL \n  SELECT e.id, e.name, e.manager_id \n  FROM Employees e \n  JOIN Subordinates s ON e.manager_id = s.id \n) \nSELECT * FROM Subordinates; \n\u2705 This will return all employees working under manager ID 1, even indirectly. \n \n2. Window Functions \nThese functions look at other rows in the result without grouping them. Useful when you \nwant to compare each row with others. \nEveryday Use Case: \n\"Show each employee's salary along with the previous and next employee's salary.\" \nKey Functions: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 13, "text": "\uf0b7 \nLAG(column) \u2013 Looks before current row \n\uf0b7 \nLEAD(column) \u2013 Looks after current row \n\uf0b7 \nNTILE(n) \u2013 Divides into n equal groups (for percentiles/quartiles) \n\uf0b7 \nRANK(), DENSE_RANK(), ROW_NUMBER() \u2013 Ranking logic \nExample: \nSELECT name, salary, \n       LAG(salary) OVER (ORDER BY salary) AS prev_salary, \n       LEAD(salary) OVER (ORDER BY salary) AS next_salary \nFROM Employees; \n \n3. Working with JSON in SQL \nModern databases allow storing and querying JSON data inside SQL columns (especially \nuseful in dynamic or semi-structured data). \nPostgreSQL: \nSELECT data->>'name' AS name FROM orders WHERE data->>'status' = 'shipped'; \nMySQL: \nSELECT JSON_EXTRACT(data, '$.name') AS name FROM orders; \n\ud83d\udd0d Here, data is a column containing JSON like: { \"name\": \"Laptop\", \"status\": \"shipped\" } \n \n4. Performance Optimization Techniques \nOptimizing your SQL queries can make your app faster, especially for large data. \na. Indexing \n\uf0b7 \nLike a book index: helps locate rows faster \n\uf0b7 \nUseful for WHERE, JOIN, and ORDER BY \nCREATE INDEX idx_salary ON Employees(salary); \nb. Query Refactoring \n\uf0b7 \nAvoid SELECT * \u2192 only select needed columns \n\uf0b7 \nUse EXISTS instead of IN when subquery is large \n\uf0b7 \nApply filters early (use WHERE before GROUP BY) \nc. Execution Plan \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 14, "text": "Use EXPLAIN to understand how the database runs your query: \nEXPLAIN SELECT * FROM Employees WHERE department_id = 3; \n \n5. Stored Procedures & Functions (Simplified) \nStored Procedures = SQL scripts stored in the database that can be reused. Like a saved \nfunction. \nExample with Loop: \nDELIMITER // \nCREATE PROCEDURE GiveBonus() \nBEGIN \n  DECLARE done INT DEFAULT FALSE; \n  DECLARE emp_id INT; \n  DECLARE emp_cursor CURSOR FOR SELECT id FROM Employees; \n  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE; \n \n  OPEN emp_cursor; \n  read_loop: LOOP \n    FETCH emp_cursor INTO emp_id; \n    IF done THEN \n      LEAVE read_loop; \n    END IF; \n    UPDATE Employees SET salary = salary + 5000 WHERE id = emp_id; \n  END LOOP; \n  CLOSE emp_cursor; \nEND // \nDELIMITER ; \n\u2705 This procedure gives a \u20b95000 bonus to all employees. \n \n6. Importing/Exporting Data \nMoving data between CSV files and SQL is common in real projects. \nMySQL: \nLOAD DATA INFILE '/path/file.csv' \nINTO TABLE Employees \nFIELDS TERMINATED BY ',' \nLINES TERMINATED BY '\\n' \nIGNORE 1 ROWS; \nPostgreSQL: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 15, "text": "COPY Employees(name, salary) \nFROM '/path/file.csv' \nDELIMITER ',' \nCSV HEADER; \n \n7. Role-Based Access Control (Security Basics) \nSQL lets you give different permissions to different users. \nExample: \nGRANT SELECT, INSERT ON Employees TO 'analyst'; \nREVOKE DELETE ON Employees FROM 'analyst'; \n\u2705 'analyst' can view and add data, but can't delete anything. \n \n8. Star vs Snowflake Schema  \nUsed in Data Warehouses & Reporting Tools. \nStar Schema: \n\uf0b7 \nOne central fact table (e.g., Sales) \n\uf0b7 \nLinked to dimension tables (Customer, Product) \n\uf0b7 \nEasy to query, faster for reporting \nSnowflake Schema: \n\uf0b7 \nDimensions are normalized \n\uf0b7 \nLess redundancy but more joins \n \n9. OLTP vs OLAP (Database Types Simplified) \nFeature \nOLTP \nOLAP \n              Purpose \nDaily transactions \nData analysis \n              Design \nHighly normalized \ntables \nDenormalized \nschema \n             Examples \nBanking, eCommerce Reporting,Data \nWarehouse \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "\ud83c\udfaf INTERVIEW & PLACEMENT \n \n\ud83d\udd39 Basic Level (Entry / Fresher) \n1. What is SQL? \nStructured Query Language used to interact with relational databases. \n2. What is the difference between WHERE and HAVING? \nWHERE filters rows before aggregation, HAVING filters after aggregation. \n3. What is a Primary Key? \nA unique identifier for each row in a table. Cannot contain NULL values. \n4. Difference between INNER JOIN and LEFT JOIN? \nINNER JOIN: Returns matched rows only. \nLEFT JOIN: Returns all rows from the left table, even if no match. \n5. How do you handle NULLs in SQL? \nUse IS NULL, IS NOT NULL, COALESCE(), IFNULL(), NULLIF(). \n6. What is a Foreign Key? \nIt links two tables by referring to the primary key of another table. \n7. What is normalization? \nProcess of organizing data to reduce redundancy and improve integrity. \n8. What is denormalization? \nCombining tables to improve read performance by reducing joins. \n9. What does the DISTINCT keyword do? \nRemoves duplicate rows from the result set. \n10. What is the use of LIMIT or TOP? \nUsed to limit the number of rows returned by a query. \n\ud83d\udd39 Intermediate Level \n11. What are aggregate functions? \nFunctions like SUM(), AVG(), COUNT(), MAX(), MIN(). \n12. What is a subquery? \nA query nested inside another query. \n13. What is the difference between UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey impro", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "een UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey improve the speed of data retrieval. \n16. What is a view? \nA virtual table based on the result-set of a query. \n17. What are window functions? \nFunctions like RANK(), ROW_NUMBER() that work across rows. \n18. Difference between RANK() and DENSE_RANK()? \nRANK() skips ranks on ties, DENSE_RANK() does not. \n19. What is a CTE (Common Table Expression)? \nA temporary result set defined within the execution scope of a query. \n20. Explain ACID properties. \nAtomicity, Consistency, Isolation, Durability - ensures reliable transactions. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": "21. What is a composite key? \nA primary key made of multiple columns. \n22. Difference between DELETE and TRUNCATE? \nDELETE can be conditional and logs row-by-row deletion; TRUNCATE removes all rows \nfaster without logging each deletion. \n23. What is a surrogate key? \nA unique identifier for an entity that is not derived from application data. \n24. What is referential integrity? \nEnsures foreign key values match primary key values in the referenced table. \n25. How does EXISTS differ from IN? \nEXISTS stops on first match; IN evaluates all results. \n26. How do you use GROUP BY with multiple columns? \nYou can group by multiple columns by separating them with commas. \n27. Can we use ORDER BY with GROUP BY? \nYes. GROUP BY groups the data; ORDER BY sorts the grouped results. \n28. What is a scalar subquery? \nA subquery that returns exactly one value. \n29. What are correlated subqueries? \nSubqueries that refer to columns from the outer query. \n30. What is the use of ISNULL() or IFNULL()? \nTo replace NULL values with custom values. \n\ud83d\udd39 Advanced Level \n31. What are triggers in SQL? \nProcedures that automatically execute on certain events. \n32. What are stored procedures? \nReusable blocks of SQL statements stored in the database. \n33. What is the use of EXPLAIN or EXPLAIN PLAN? \nTo understand how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *,", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": " how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *, and use EXPLAIN to analyze. \n36. Difference between clustered and non-clustered index? \nClustered index determines row order in the table; non-clustered does not. \n37. Difference between OLTP and OLAP systems? \nOLTP: Online Transaction Processing (day-to-day operations). \nOLAP: Online Analytical Processing (data analysis and reporting). \n38. What are materialized views? \nStored query results that can be refreshed periodically. \n39. How do you implement pagination in SQL? \nUsing LIMIT and OFFSET or ROW_NUMBER() for custom logic. \n40. How do you handle duplicate rows? \nUsing ROW_NUMBER() or DISTINCT or CTEs with filtering. \n41. What are the different types of joins? \nINNER, LEFT, RIGHT, FULL OUTER, CROSS JOIN, SELF JOIN. \n42. What is a CROSS JOIN? \nReturns Cartesian product of two tables. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 18, "text": "43. Can you sort by an alias in SQL? \nYes, you can use the alias name in the ORDER BY clause. \n44. What is the difference between SQL and NoSQL? \nSQL is relational and uses tables. NoSQL is non-relational and uses documents, key-\nvalue pairs, etc. \n45. What are the common data types in SQL? \nINT, VARCHAR, DATE, BOOLEAN, DECIMAL, TEXT. \n46. Can a table have multiple foreign keys? \nYes, a table can reference multiple other tables using foreign keys. \n47. What happens if you violate a foreign key constraint? \nThe query fails with an integrity constraint violation. \n48. How can you change a column datatype in SQL? \nUsing ALTER TABLE table_name MODIFY column_name new_datatype; \n49. What are NULL-safe operators? \nOperators like <=> in MySQL allow safe comparison with NULL. \n50. How would you detect and remove duplicate records? \nUsing CTE and ROW_NUMBER() to filter duplicates. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 19, "text": "Real Company SQL Questions \nGoogle \n\uf0b7 \nSecond Highest Salary \nSELECT MAX(salary) AS SecondHighest \nFROM Employees \nWHERE salary < (SELECT MAX(salary) FROM Employees); \n\uf0b7 \nRemove Duplicate Emails Using ROW_NUMBER() \nWITH RankedEmails AS ( \n  SELECT *, ROW_NUMBER() OVER (PARTITION BY email ORDER BY id) \nAS rn \n  FROM Users \n) \nDELETE FROM RankedEmails WHERE rn > 1; \n\uf0b7 \nEmployees Earning More Than Average Salary \nSELECT name, salary \nFROM Employees \nWHERE salary > (SELECT AVG(salary) FROM Employees); \nAmazon \n\uf0b7 \nCustomers Who Ordered in Every Month \nSELECT customer_id \nFROM Orders \nGROUP BY customer_id \nHAVING COUNT(DISTINCT MONTH(order_date)) = 12; \n\uf0b7 \nTop 3 Earners in Each Department \nSELECT * \nFROM ( \n  SELECT *, DENSE_RANK() OVER (PARTITION BY department_id \nORDER BY salary DESC) AS rank \n  FROM Employees \n) ranked \nWHERE rank <= 3; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 20, "text": "\uf0b7 \nFind Returning Users Using LAG \nSELECT user_id, order_date, \n       LAG(order_date) OVER (PARTITION BY user_id ORDER BY \norder_date) AS previous_order \nFROM Orders; \nTCS \n\uf0b7 \nEmployees Joined in Last 6 Months \nSELECT * FROM Employees \nWHERE join_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH); \n\uf0b7 \nManager-Reportee Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n\uf0b7 \nDepartment with Highest Average Salary \nSELECT department_id \nFROM Employees \nGROUP BY department_id \nORDER BY AVG(salary) DESC \nLIMIT 1; \nFlipkart \n\uf0b7 \nTop 5 Selling Products by Revenue \nSELECT product_id, SUM(price * quantity) AS revenue \nFROM Orders \nGROUP BY product_id \nORDER BY revenue DESC \nLIMIT 5; \n\uf0b7 \nUsers with More Than 3 Failed Transactions \nSELECT user_id \nFROM Transactions \nWHERE status = 'FAILED' \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 21, "text": "GROUP BY user_id \nHAVING COUNT(*) > 3; \n\uf0b7 \nOrders Not Yet Shipped \nSELECT * \nFROM Orders \nWHERE status = 'PLACED' AND shipped_date IS NULL; \nSQL Problem-Solving Round \n \n\uf0b7 \nNth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET N-1; \n\uf0b7 \nDuplicate Emails \nSELECT email, COUNT(*) \nFROM Users \nGROUP BY email \nHAVING COUNT(*) > 1; \n\uf0b7 \nTop Earner per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, RANK() OVER (PARTITION BY department_id ORDER BY \nsalary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\uf0b7 \nCustomers Who Never Ordered \nSELECT c.customer_id, c.name \nFROM Customers c \nLEFT JOIN Orders o ON c.customer_id = o.customer_id \nWHERE o.order_id IS NULL; \n\uf0b7 \nEmployees Hired in the Last Month \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 22, "text": "SELECT * FROM Employees \nWHERE hire_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 \nMONTH) AND CURDATE(); \n\uf0b7 \nUser Order Summary \nSELECT user_id, COUNT(*) AS order_count, SUM(total_amount) AS \ntotal_spent \nFROM Orders \nGROUP BY user_id; \n\uf0b7 \n7-Day Rolling Login Count \nSELECT user_id, login_date, \n       COUNT(*) OVER ( \n         PARTITION BY user_id ORDER BY login_date \n         ROWS BETWEEN 6 PRECEDING AND CURRENT ROW \n       ) AS seven_day_logins \nFROM Logins; \n\uf0b7 \nFunnel Drop-off Analysis \nSELECT stage, COUNT(DISTINCT user_id) AS user_count \nFROM Funnel \nGROUP BY stage \nORDER BY stage; \n\uf0b7 \nAverage Time Between Orders \nSELECT user_id, AVG(DATEDIFF(order_date, LAG(order_date) OVER \n(PARTITION BY user_id ORDER BY order_date))) AS \navg_days_between_orders \nFROM Orders; \n\uf0b7 \nSelf Join for Employee Manager Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 1, "text": " \n \nGeneral SQL Topics \n1. INTRODUCTION TO SQL \n\uf0b7 \nSQL: Structured Query Language, used to interact with relational databases. \n\uf0b7 \nRelational Database: Stores data in tables (rows & columns). \n\uf0b7 \nCommon RDBMS: MySQL, PostgreSQL, SQLite, Oracle, SQL Server. \n \n2. SQL DATA TYPES \n\uf0b7 \nINT: Integer numbers \n\uf0b7 \nVARCHAR(n): Variable-length string with a maximum of n characters \n\uf0b7 \nCHAR(n): Fixed-length string \n\uf0b7 \nDATE / DATETIME: Date or timestamp \n\uf0b7 \nDECIMAL(p, s): Exact numeric value with precision and scale \n\uf0b7 \nBOOLEAN: True or False \n\uf0b7 \nTEXT: Long-form string data \n \n3. BASIC SQL COMMANDS \n\u27a4 Create Table \nCREATE TABLE Employees ( \n  id INT PRIMARY KEY, \n  name VARCHAR(100), \n  salary INT, \n  department VARCHAR(50) \n); \n\u27a4 Insert \nINSERT INTO Employees (id, name, salary, department) \nVALUES (1, 'Alice', 60000, 'HR'); \n\u27a4 Select \nSELECT * FROM Employees; \nSELECT name, salary FROM Employees; \nSELECT * FROM Employees WHERE salary > 50000; \n\u27a4 Update \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 2, "text": "UPDATE Employees SET salary = 70000 WHERE id = 1; \n\u27a4 Delete \nDELETE FROM Employees WHERE id = 1; \n \n4. FILTERING DATA \n\u27a4 WHERE, AND, OR, NOT \nSELECT * FROM Employees \nWHERE department = 'HR' AND salary > 50000; \n\u27a4 IN, BETWEEN, LIKE \nSELECT * FROM Employees WHERE department IN ('HR', 'Sales'); \nSELECT * FROM Employees WHERE salary BETWEEN 40000 AND 70000; \nSELECT * FROM Employees WHERE name LIKE 'A%'; -- starts with A \n \n5. SORTING & LIMITING \nSELECT * FROM Employees ORDER BY salary DESC; \nSELECT * FROM Employees LIMIT 5; \n \n6. AGGREGATE FUNCTIONS \nSELECT COUNT(*) FROM Employees; \nSELECT AVG(salary) FROM Employees; \nSELECT SUM(salary), MAX(salary), MIN(salary) FROM Employees; \n \n7. GROUPING & FILTERING AGGREGATES \nSELECT department, AVG(salary) AS avg_salary \nFROM Employees \nGROUP BY department \nHAVING AVG(salary) > 50000; \n \n8. JOINS \n\u27a4 Syntax: \nSELECT e.name, d.name \nFROM Employees e \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 3, "text": "JOIN Departments d ON e.department_id = d.id; \n8.1. INNER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nINNER JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 Only matching department IDs shown. \n8.2. LEFT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All employees shown, even if no department. \n8.3. RIGHT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All departments shown, even if no employee. \n8.4. FULL OUTER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id \nUNION \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n \n9. SUBQUERIES \nUsed to embed one query inside another. \nSELECT name FROM Employees \nWHERE salary > ( \n  SELECT AVG(salary) FROM Employees \n); \n \n10. CONSTRAINTS \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 4, "text": "\uf0b7 \nPRIMARY KEY: Uniquely identifies each record \n\uf0b7 \nFOREIGN KEY: Links to primary key of another table \n\uf0b7 \nUNIQUE: Ensures all values in a column are different \n\uf0b7 \nNOT NULL: Disallows NULL values \n\uf0b7 \nCHECK: Ensures a condition is met \n \n11. NORMALIZATION  \n\uf0b7 \nProcess of organizing data to reduce redundancy and improve data integrity. \n\uf0b7 \n1NF: Atomic values \n\uf0b7 \n2NF: No partial dependencies \n\uf0b7 \n3NF: No transitive dependencies \n\uf0b7 \nEnsures data integrity and minimizes duplication. \n\ud83c\udfaf Why Normalize? \n\uf0b7 \nEliminate duplicate data \n\uf0b7 \nEnsure data consistency \n\uf0b7 \nImprove data structure for querying and updates \n \n\ud83d\udcda Normal Forms (NF) \n\u2705 1NF \u2013 First Normal Form \nRule: All values must be atomic (indivisible). \nFix: Remove repeating groups and store one value per cell. \nExample (Bad): \nID Name Phones \n1 Alice 1234, 5678 \nFix (1NF): \nID Name Phone \n1 Alice 1234 \n1 Alice 5678 \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 5, "text": "\u2705 2NF \u2013 Second Normal Form \nRule: Be in 1NF + No Partial Dependency on a composite key. \nFix: Move partially dependent data to a new table. \nExample: \nComposite key: (StudentID, CourseID) \nStudentID CourseID StudentName \nFix (2NF): \n\uf0b7 \nTable 1: StudentCourses(StudentID, CourseID) \n\uf0b7 \nTable 2: Students(StudentID, StudentName) \n \n\u2705 3NF \u2013 Third Normal Form \nRule: Be in 2NF + No transitive dependency. \nFix: Remove data that's indirectly dependent on the primary key. \nExample (Bad): \nEmpID Name DeptID DeptName \nFix (3NF): \n\uf0b7 \nTable 1: Employees(EmpID, Name, DeptID) \n\uf0b7 \nTable 2: Departments(DeptID, DeptName) \n \n\ud83e\udde0 When Not to Normalize? \n\uf0b7 \nFor read-heavy applications (analytics, reporting) \n\uf0b7 \nWhen query performance is more important than data integrity \n \n\u2705 Real-Life Analogy \n\uf0b7 \n1NF: Each house (record) has its own mailbox (cell), not a shared one \n\uf0b7 \n2NF: One key opens only one mailbox (no shared access) \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 6, "text": "\uf0b7 \n3NF: The key opens the right mailbox and not someone else\u2019s cabinet (no indirect \ndependencies) \n \n \n12. INDEXING \nIndexing is a powerful technique to speed up SELECT queries on large tables. \n\uf0b7 \nSpeeds up WHERE, JOIN, GROUP BY, and ORDER BY queries \n\uf0b7 \nBoosts search performance on large datasets. \n\uf0b7 \nAvoid on frequently updated or low-cardinality columns \n\uf0b7 \nUse EXPLAIN to test effectiveness \n\uf0b7 \nAvoid over-indexing (inserts & updates become slower). \n\u2705 Types \n\uf0b7 \nSingle-column Index \n \nCREATE INDEX idx_salary ON Employees(salary); \n\uf0b7 \nComposite Index \n \nCREATE INDEX idx_name_dept ON Employees(name, department);\n \n13. VIEWS \n\uf0b7 \nA view is a virtual table based on a query \n\uf0b7 \nThey do not store data. Use Materialized Views (if supported) for cached result. \n\uf0b7 \nSimplify complex queries. \n\uf0b7 \nEnhance security (restrict column access) \n\uf0b7 \nEnable reusable logic \n\u2705 Example \nCREATE VIEW HR_Employees AS \nSELECT name, salary \nFROM Employees \nWHERE department = 'HR'; \n \n \n14. TRANSACTIONS & ACID \nA Transaction is a logical unit of work consisting of one or more SQL statements. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 7, "text": "Use ROLLBACK; to undo changes before COMMIT;. \n\uf0b7 \nACID: \no \nAtomicity: All or none \no \nConsistency: Valid data state \no \nIsolation: No interference \no \nDurability: Permanent changes \n\u2705 Example \nBEGIN; \nUPDATE Accounts SET balance = balance - 100 WHERE id = 1; \nUPDATE Accounts SET balance = balance + 100 WHERE id = 2; \nCOMMIT; \n \n15. WINDOW FUNCTIONS \nWindow functions perform calculations across rows related to the current row \u2014 without collapsing \nthem like GROUP BY.  \nUsed for row-level calculations without grouping. \nUse cases : Leaderboards, Change Tracking, Tired analysis \nRANK(), DENSE_RANK(), ROW_NUMBER() \n\u2705 Example \nSELECT name, salary, \n  RANK() OVER (ORDER BY salary DESC) AS salary_rank \nFROM Employees; \n\ud83d\udd11 Popular Window Functions \n\uf0b7 \nROW_NUMBER(), RANK(), DENSE_RANK() \n\uf0b7 \nLAG(), LEAD() \n\uf0b7 \nNTILE(n) (for percentiles) \n \n16. COMMON TABLE EXPRESSIONS (CTEs) \nCTEs are temporary result sets used within queries \u2014 easier to read & maintain. \n\u2705 Syntax \nWITH HighEarners AS ( \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 8, "text": "  SELECT * FROM Employees WHERE salary > 50000 \n) \nSELECT name FROM HighEarners; \n\ud83e\udde0 Benefits \n\uf0b7 \nBreak complex queries into readable blocks \n\uf0b7 \nUse recursive CTEs for hierarchical data \n \n17. UNION vs UNION ALL \nSELECT name FROM Managers \nUNION \nSELECT name FROM Employees; -- Removes duplicates \n \nSELECT name FROM Managers \nUNION ALL \nSELECT name FROM Employees; -- Keeps duplicates \n \n18. SET OPERATIONS \nSELECT name FROM A \nINTERSECT \nSELECT name FROM B; \n \nSELECT name FROM A \nEXCEPT \nSELECT name FROM B; \n\uf0b7 \n\u26a0 Not supported in MySQL; supported in PostgreSQL/SQL Server. \n \n19. NULL Handling \nSELECT name, COALESCE(nickname, 'No Nick') FROM Users; \nSELECT NULLIF(salary, 0);  -- Returns NULL if salary = 0 \n\uf0b7 \nUse IS NULL / IS NOT NULL \n\uf0b7 \nCOALESCE(), IFNULL(), NULLIF() \n \n20. CASE Statements \nSELECT name, \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 9, "text": "CASE \n  WHEN salary > 70000 THEN 'High' \n  WHEN salary > 40000 THEN 'Medium' \n  ELSE 'Low' \nEND AS salary_level \nFROM Employees; \n \n21. Stored Procedures & Functions (Advanced) \nStored Procedures are saved SQL blocks that perform actions. \nFunctions return a single value. Use procedures for reusable logic. Use functions in SELECT, WHERE, or \nJOIN clauses \n\u2705 Procedure Example \nCREATE PROCEDURE GetHighEarners() \nBEGIN \n  SELECT * FROM Employees WHERE salary > 70000; \nEND; \n\u2705 Function Example \nCREATE FUNCTION TaxAmount(salary DECIMAL) \nRETURNS DECIMAL \nBEGIN \n  RETURN salary * 0.10; \nEND; \n \n \n22. Temporary Tables \nCREATE TEMPORARY TABLE Temp_Employees AS \nSELECT * FROM Employees WHERE department = 'HR'; \n \n23. Triggers (Advanced - Rare) \nCREATE TRIGGER before_insert_trigger \nBEFORE INSERT ON Employees \nFOR EACH ROW \nSET NEW.salary = IF(NEW.salary < 0, 0, NEW.salary); \n\uf0b7 \nUsed for validation, logging, auto-calculation. \n \n24. Data Definition vs Data Manipulation vs Data Control \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 10, "text": "\uf0b7 \nDDL (Definition): CREATE, ALTER, DROP \n\uf0b7 \nDML (Manipulation): SELECT, INSERT, UPDATE, DELETE \n\uf0b7 \nDCL (Control): GRANT, REVOKE \n\uf0b7 \nTCL (Transaction): COMMIT, ROLLBACK \n \nINTERVIEW QUERY PATTERNS \n\u27a4 Nth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET 1; -- 2nd highest \n\u27a4 Duplicate Rows \nSELECT name, COUNT(*) \nFROM Employees \nGROUP BY name \nHAVING COUNT(*) > 1; \n\u27a4 Same Salary Employees \nSELECT * FROM Employees \nWHERE salary IN ( \n  SELECT salary FROM Employees \n  GROUP BY salary \n  HAVING COUNT(*) > 1 \n); \n\u27a4 Employees with Max Salary Per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, \n         RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\u27a4 Self Join Example \nSELECT A.name AS Employee, B.name AS Manager \nFROM Employees A \nJOIN Employees B ON A.manager_id = B.id; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 11, "text": "\u27a4 EXISTS vs IN vs JOIN \n-- EXISTS \nSELECT name FROM Employees e \nWHERE EXISTS ( \n  SELECT 1 FROM Departments d WHERE d.id = e.department_id \n); \n-- IN \nSELECT name FROM Employees \nWHERE department_id IN (SELECT id FROM Departments); \n-- JOIN \nSELECT e.name, d.name FROM Employees e \nJOIN Departments d ON e.department_id = d.id; \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 12, "text": "Advanced SQL Topics \n \n1. Recursive CTEs (Made Simple) \nA Recursive CTE lets a query call itself, useful when working with hierarchies like employees \n& managers or categories & subcategories. \nEasy Analogy: \nThink of it like a loop in SQL. Start with one person (manager), then find their subordinates, then \nsubordinates of subordinates, and so on. \nSyntax: \nWITH RECURSIVE cte_name AS ( \n  SELECT ...  -- Starting point (anchor) \n  UNION ALL \n  SELECT ... FROM cte_name ... -- Repeat until done \n) \nSELECT * FROM cte_name; \nExample: \nWITH RECURSIVE Subordinates AS ( \n  SELECT id, name, manager_id FROM Employees WHERE id = 1 -- Top manager \n  UNION ALL \n  SELECT e.id, e.name, e.manager_id \n  FROM Employees e \n  JOIN Subordinates s ON e.manager_id = s.id \n) \nSELECT * FROM Subordinates; \n\u2705 This will return all employees working under manager ID 1, even indirectly. \n \n2. Window Functions \nThese functions look at other rows in the result without grouping them. Useful when you \nwant to compare each row with others. \nEveryday Use Case: \n\"Show each employee's salary along with the previous and next employee's salary.\" \nKey Functions: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 13, "text": "\uf0b7 \nLAG(column) \u2013 Looks before current row \n\uf0b7 \nLEAD(column) \u2013 Looks after current row \n\uf0b7 \nNTILE(n) \u2013 Divides into n equal groups (for percentiles/quartiles) \n\uf0b7 \nRANK(), DENSE_RANK(), ROW_NUMBER() \u2013 Ranking logic \nExample: \nSELECT name, salary, \n       LAG(salary) OVER (ORDER BY salary) AS prev_salary, \n       LEAD(salary) OVER (ORDER BY salary) AS next_salary \nFROM Employees; \n \n3. Working with JSON in SQL \nModern databases allow storing and querying JSON data inside SQL columns (especially \nuseful in dynamic or semi-structured data). \nPostgreSQL: \nSELECT data->>'name' AS name FROM orders WHERE data->>'status' = 'shipped'; \nMySQL: \nSELECT JSON_EXTRACT(data, '$.name') AS name FROM orders; \n\ud83d\udd0d Here, data is a column containing JSON like: { \"name\": \"Laptop\", \"status\": \"shipped\" } \n \n4. Performance Optimization Techniques \nOptimizing your SQL queries can make your app faster, especially for large data. \na. Indexing \n\uf0b7 \nLike a book index: helps locate rows faster \n\uf0b7 \nUseful for WHERE, JOIN, and ORDER BY \nCREATE INDEX idx_salary ON Employees(salary); \nb. Query Refactoring \n\uf0b7 \nAvoid SELECT * \u2192 only select needed columns \n\uf0b7 \nUse EXISTS instead of IN when subquery is large \n\uf0b7 \nApply filters early (use WHERE before GROUP BY) \nc. Execution Plan \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 14, "text": "Use EXPLAIN to understand how the database runs your query: \nEXPLAIN SELECT * FROM Employees WHERE department_id = 3; \n \n5. Stored Procedures & Functions (Simplified) \nStored Procedures = SQL scripts stored in the database that can be reused. Like a saved \nfunction. \nExample with Loop: \nDELIMITER // \nCREATE PROCEDURE GiveBonus() \nBEGIN \n  DECLARE done INT DEFAULT FALSE; \n  DECLARE emp_id INT; \n  DECLARE emp_cursor CURSOR FOR SELECT id FROM Employees; \n  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE; \n \n  OPEN emp_cursor; \n  read_loop: LOOP \n    FETCH emp_cursor INTO emp_id; \n    IF done THEN \n      LEAVE read_loop; \n    END IF; \n    UPDATE Employees SET salary = salary + 5000 WHERE id = emp_id; \n  END LOOP; \n  CLOSE emp_cursor; \nEND // \nDELIMITER ; \n\u2705 This procedure gives a \u20b95000 bonus to all employees. \n \n6. Importing/Exporting Data \nMoving data between CSV files and SQL is common in real projects. \nMySQL: \nLOAD DATA INFILE '/path/file.csv' \nINTO TABLE Employees \nFIELDS TERMINATED BY ',' \nLINES TERMINATED BY '\\n' \nIGNORE 1 ROWS; \nPostgreSQL: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 15, "text": "COPY Employees(name, salary) \nFROM '/path/file.csv' \nDELIMITER ',' \nCSV HEADER; \n \n7. Role-Based Access Control (Security Basics) \nSQL lets you give different permissions to different users. \nExample: \nGRANT SELECT, INSERT ON Employees TO 'analyst'; \nREVOKE DELETE ON Employees FROM 'analyst'; \n\u2705 'analyst' can view and add data, but can't delete anything. \n \n8. Star vs Snowflake Schema  \nUsed in Data Warehouses & Reporting Tools. \nStar Schema: \n\uf0b7 \nOne central fact table (e.g., Sales) \n\uf0b7 \nLinked to dimension tables (Customer, Product) \n\uf0b7 \nEasy to query, faster for reporting \nSnowflake Schema: \n\uf0b7 \nDimensions are normalized \n\uf0b7 \nLess redundancy but more joins \n \n9. OLTP vs OLAP (Database Types Simplified) \nFeature \nOLTP \nOLAP \n              Purpose \nDaily transactions \nData analysis \n              Design \nHighly normalized \ntables \nDenormalized \nschema \n             Examples \nBanking, eCommerce Reporting,Data \nWarehouse \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "\ud83c\udfaf INTERVIEW & PLACEMENT \n \n\ud83d\udd39 Basic Level (Entry / Fresher) \n1. What is SQL? \nStructured Query Language used to interact with relational databases. \n2. What is the difference between WHERE and HAVING? \nWHERE filters rows before aggregation, HAVING filters after aggregation. \n3. What is a Primary Key? \nA unique identifier for each row in a table. Cannot contain NULL values. \n4. Difference between INNER JOIN and LEFT JOIN? \nINNER JOIN: Returns matched rows only. \nLEFT JOIN: Returns all rows from the left table, even if no match. \n5. How do you handle NULLs in SQL? \nUse IS NULL, IS NOT NULL, COALESCE(), IFNULL(), NULLIF(). \n6. What is a Foreign Key? \nIt links two tables by referring to the primary key of another table. \n7. What is normalization? \nProcess of organizing data to reduce redundancy and improve integrity. \n8. What is denormalization? \nCombining tables to improve read performance by reducing joins. \n9. What does the DISTINCT keyword do? \nRemoves duplicate rows from the result set. \n10. What is the use of LIMIT or TOP? \nUsed to limit the number of rows returned by a query. \n\ud83d\udd39 Intermediate Level \n11. What are aggregate functions? \nFunctions like SUM(), AVG(), COUNT(), MAX(), MIN(). \n12. What is a subquery? \nA query nested inside another query. \n13. What is the difference between UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey impro", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "een UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey improve the speed of data retrieval. \n16. What is a view? \nA virtual table based on the result-set of a query. \n17. What are window functions? \nFunctions like RANK(), ROW_NUMBER() that work across rows. \n18. Difference between RANK() and DENSE_RANK()? \nRANK() skips ranks on ties, DENSE_RANK() does not. \n19. What is a CTE (Common Table Expression)? \nA temporary result set defined within the execution scope of a query. \n20. Explain ACID properties. \nAtomicity, Consistency, Isolation, Durability - ensures reliable transactions. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": "21. What is a composite key? \nA primary key made of multiple columns. \n22. Difference between DELETE and TRUNCATE? \nDELETE can be conditional and logs row-by-row deletion; TRUNCATE removes all rows \nfaster without logging each deletion. \n23. What is a surrogate key? \nA unique identifier for an entity that is not derived from application data. \n24. What is referential integrity? \nEnsures foreign key values match primary key values in the referenced table. \n25. How does EXISTS differ from IN? \nEXISTS stops on first match; IN evaluates all results. \n26. How do you use GROUP BY with multiple columns? \nYou can group by multiple columns by separating them with commas. \n27. Can we use ORDER BY with GROUP BY? \nYes. GROUP BY groups the data; ORDER BY sorts the grouped results. \n28. What is a scalar subquery? \nA subquery that returns exactly one value. \n29. What are correlated subqueries? \nSubqueries that refer to columns from the outer query. \n30. What is the use of ISNULL() or IFNULL()? \nTo replace NULL values with custom values. \n\ud83d\udd39 Advanced Level \n31. What are triggers in SQL? \nProcedures that automatically execute on certain events. \n32. What are stored procedures? \nReusable blocks of SQL statements stored in the database. \n33. What is the use of EXPLAIN or EXPLAIN PLAN? \nTo understand how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *,", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": " how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *, and use EXPLAIN to analyze. \n36. Difference between clustered and non-clustered index? \nClustered index determines row order in the table; non-clustered does not. \n37. Difference between OLTP and OLAP systems? \nOLTP: Online Transaction Processing (day-to-day operations). \nOLAP: Online Analytical Processing (data analysis and reporting). \n38. What are materialized views? \nStored query results that can be refreshed periodically. \n39. How do you implement pagination in SQL? \nUsing LIMIT and OFFSET or ROW_NUMBER() for custom logic. \n40. How do you handle duplicate rows? \nUsing ROW_NUMBER() or DISTINCT or CTEs with filtering. \n41. What are the different types of joins? \nINNER, LEFT, RIGHT, FULL OUTER, CROSS JOIN, SELF JOIN. \n42. What is a CROSS JOIN? \nReturns Cartesian product of two tables. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 18, "text": "43. Can you sort by an alias in SQL? \nYes, you can use the alias name in the ORDER BY clause. \n44. What is the difference between SQL and NoSQL? \nSQL is relational and uses tables. NoSQL is non-relational and uses documents, key-\nvalue pairs, etc. \n45. What are the common data types in SQL? \nINT, VARCHAR, DATE, BOOLEAN, DECIMAL, TEXT. \n46. Can a table have multiple foreign keys? \nYes, a table can reference multiple other tables using foreign keys. \n47. What happens if you violate a foreign key constraint? \nThe query fails with an integrity constraint violation. \n48. How can you change a column datatype in SQL? \nUsing ALTER TABLE table_name MODIFY column_name new_datatype; \n49. What are NULL-safe operators? \nOperators like <=> in MySQL allow safe comparison with NULL. \n50. How would you detect and remove duplicate records? \nUsing CTE and ROW_NUMBER() to filter duplicates. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 19, "text": "Real Company SQL Questions \nGoogle \n\uf0b7 \nSecond Highest Salary \nSELECT MAX(salary) AS SecondHighest \nFROM Employees \nWHERE salary < (SELECT MAX(salary) FROM Employees); \n\uf0b7 \nRemove Duplicate Emails Using ROW_NUMBER() \nWITH RankedEmails AS ( \n  SELECT *, ROW_NUMBER() OVER (PARTITION BY email ORDER BY id) \nAS rn \n  FROM Users \n) \nDELETE FROM RankedEmails WHERE rn > 1; \n\uf0b7 \nEmployees Earning More Than Average Salary \nSELECT name, salary \nFROM Employees \nWHERE salary > (SELECT AVG(salary) FROM Employees); \nAmazon \n\uf0b7 \nCustomers Who Ordered in Every Month \nSELECT customer_id \nFROM Orders \nGROUP BY customer_id \nHAVING COUNT(DISTINCT MONTH(order_date)) = 12; \n\uf0b7 \nTop 3 Earners in Each Department \nSELECT * \nFROM ( \n  SELECT *, DENSE_RANK() OVER (PARTITION BY department_id \nORDER BY salary DESC) AS rank \n  FROM Employees \n) ranked \nWHERE rank <= 3; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 20, "text": "\uf0b7 \nFind Returning Users Using LAG \nSELECT user_id, order_date, \n       LAG(order_date) OVER (PARTITION BY user_id ORDER BY \norder_date) AS previous_order \nFROM Orders; \nTCS \n\uf0b7 \nEmployees Joined in Last 6 Months \nSELECT * FROM Employees \nWHERE join_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH); \n\uf0b7 \nManager-Reportee Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n\uf0b7 \nDepartment with Highest Average Salary \nSELECT department_id \nFROM Employees \nGROUP BY department_id \nORDER BY AVG(salary) DESC \nLIMIT 1; \nFlipkart \n\uf0b7 \nTop 5 Selling Products by Revenue \nSELECT product_id, SUM(price * quantity) AS revenue \nFROM Orders \nGROUP BY product_id \nORDER BY revenue DESC \nLIMIT 5; \n\uf0b7 \nUsers with More Than 3 Failed Transactions \nSELECT user_id \nFROM Transactions \nWHERE status = 'FAILED' \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 21, "text": "GROUP BY user_id \nHAVING COUNT(*) > 3; \n\uf0b7 \nOrders Not Yet Shipped \nSELECT * \nFROM Orders \nWHERE status = 'PLACED' AND shipped_date IS NULL; \nSQL Problem-Solving Round \n \n\uf0b7 \nNth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET N-1; \n\uf0b7 \nDuplicate Emails \nSELECT email, COUNT(*) \nFROM Users \nGROUP BY email \nHAVING COUNT(*) > 1; \n\uf0b7 \nTop Earner per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, RANK() OVER (PARTITION BY department_id ORDER BY \nsalary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\uf0b7 \nCustomers Who Never Ordered \nSELECT c.customer_id, c.name \nFROM Customers c \nLEFT JOIN Orders o ON c.customer_id = o.customer_id \nWHERE o.order_id IS NULL; \n\uf0b7 \nEmployees Hired in the Last Month \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 22, "text": "SELECT * FROM Employees \nWHERE hire_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 \nMONTH) AND CURDATE(); \n\uf0b7 \nUser Order Summary \nSELECT user_id, COUNT(*) AS order_count, SUM(total_amount) AS \ntotal_spent \nFROM Orders \nGROUP BY user_id; \n\uf0b7 \n7-Day Rolling Login Count \nSELECT user_id, login_date, \n       COUNT(*) OVER ( \n         PARTITION BY user_id ORDER BY login_date \n         ROWS BETWEEN 6 PRECEDING AND CURRENT ROW \n       ) AS seven_day_logins \nFROM Logins; \n\uf0b7 \nFunnel Drop-off Analysis \nSELECT stage, COUNT(DISTINCT user_id) AS user_count \nFROM Funnel \nGROUP BY stage \nORDER BY stage; \n\uf0b7 \nAverage Time Between Orders \nSELECT user_id, AVG(DATEDIFF(order_date, LAG(order_date) OVER \n(PARTITION BY user_id ORDER BY order_date))) AS \navg_days_between_orders \nFROM Orders; \n\uf0b7 \nSelf Join for Employee Manager Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 1, "text": "Global Paid Developer & Mentorship Programs  \n1. Paid Developer Programs  \n  \nProgram  \nLocation  \nDuration  \nPay (INR)  \nApply Timeline  \nLinkedIn REACH  \nHybrid (USA)  \n1-5 years  \nRs.1.16-1.41 Cr/year    \n          June  \nMicrosoft LEAP  \nOn-site (USA/Canada)  16 weeks  \nRs.82-96 L/year  \n         August   \nAdobe Digital Academy  \nOn-site (USA)  \n6-9 months  \nStipend + Paid Apprenticeship  \n       September  \nGoogle Summer of Code (  GSoC)Remote  \n12+ weeks  \nRs.1.25-2.5 L  \n          March   \nMLH Fellowship  \nRemote  \n12 weeks  \nRs.4.1 L  \n     March- April  \nLinux Foundation Mentorsh ip (LFX)Remote  \n3-24 weeks  \nRs.2.5-5 L  \n     Feb-July (varies)  \n  \n2. Application Links   \n1. LinkedIn REACH: https://careers.linkedin.com/reach  \n2. Microsoft LEAP:  https://leap.microsoft.com  \n3. Adobe Digital Academy: https://www.adobe.com/corporate-\nresponsibility/creativity/digitalacademy  \n4. Google Summer of Code (GSoC): https://summerofcode.withgoogle.com  \n5. MLH Fellowship: https://fellowship.mlh.io/  \n6. Linux Foundation Mentorship (LFX): https://lfx.linuxfoundation.org/mentorship/  \n3. Paid Remote Mentorship Opportunities  \n1. Google Summer of Code (Mentor)  \nDetails: Experienced developers can apply as paid mentors for open-source projects.  \nApply: https://summerofcode.withgoogle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-sou", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "gle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-source project maintainers or contributors can apply to host/mentor projects. Apply: \nhttps://lfx.linuxfoundation.org/mentorship/  \n  \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Ecommerce  Mobility  \nCompanies  \nCloud  \nServices/  \nSaaS  \nCRM/Workflow \nManagement  \nTravel  \nPayments/  \nFintech  \nInvestment Banks/  \nHedge Funds  \nFlipkart  \nOla  \nVmWare  \nZoho  \nAirbnb  \nPaypal  \nDE Shaw  \nMyntra  \nUber  \nRedHat  \nSalesforce  \nOYO  \nVisa  \nGoldman Sachs  \nTesco  \nMeru  \nOCI  \nEngageBay  \nMakeMyTrip  \nPhonepe  \nWorld Quant  \nWalmart  \nZoomcar  \nSAP Labs  \nServiceNow  \nExpedia  \nPaytm  \nArcessium  \nTarget  \nRapido  \nIBM  \n \nBooking.com  BharatPe  \nIntuit  \nShopsy  \n \nBrowserStack   \nAgoda  \nCred  \nJP Morgan  \nBloomerang  \n \nNutanix  \n \nGroupon  \nSlice  \nMorgan Stanley  \nCult.fit  \n \nHp  \n \n \nRazorpay  \nWells Fargo  \nAJIO  \n \nNetApp  \n \n \nZeta  \nDruva  \nPharmaeasy   \nCohesity  \n \n \nRupeek  \n \nMeesho  \n \nTekion Corp  \n \n \nClearTax  \n \nLowe\u2019s  \n  \nRubrik  \n  \n  \nJupiter  \n  \nCompanies  \n \nMost High Paying Remote Jobs and few On-site jobs (Use FILTERS) \n1. https://tinyparticlejobs.com/ \n2. https://www.remoterocketship.com \n3. https://nodesk.co/remote-jobs/ \n4. https://wellfound.com/jobs \n5. https://weworkremotely.com/categories/remote-programming-jobs \n6. https://stackoverflow.com/jobs \n7. https://jobs.github.com \n8. https://www.linkedin.com/jobs/ \n9. https://www.toptal.com/ \n10. https://remoteok.io/remote-dev-jobs \n \nFew very high paying remote \u2013  \nSpreeTail \nBlink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Blink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": " \n \nRICH PEOPLE USES / BILLIONAIRES LINKS \n Investment & Startup Platforms \n AngelList Ventures  \u2014 https://angel.co/venture \n MicroVentures \u2014 https://microventures.com/ \n ToptalSeedInvest \u2014 https://www.seedinvest.com/ \n Product Hunt Makers -- https://www.producthunt.com/makers \n Y Cobinator Startup School \u2013 https://www.startupschool.org/ \n      Premium Networking & Professional Platforms \n Lunchclub \u2014 https://lunchclub.com/ \n Shapr \u2014 https://www.shapr.co/ \n Toptal \u2014 https://www.toptal.com/ \n Tiger 21 (private network for investors) \u2014https://tiger21.com/ \n FoundersCard \u2014 https://founderscard.com/ \n      Exclusive Social & Community Platforms \n Clubhouse (invite-only audio network) \u2014 https://www.joinclubhouse.com/ \n Techstars Founders Slack (invite-only; search online to join) \n Various Venture Capital & Startup Discord communities (search Discord servers) \n     Conferences & Summits (for networking) \n TED \u2014 https://www.ted.com/ \n Web Summit -- https://websummit.com/ \n SXSW -- https://www.sxsw.com/ \n TechCrunch Disrupt \u2014 https://techcrunch.com/events/disrupt-sf-2024/ \n Forbes 30 Under 30 Summit \u2014https://www.forbes.com/30-under-30-summit/ \n     Private Family Office & Wealth Networks \n Family Office Club \u2014 https://familyoffices.com/ \n Opal Group \u2014 https://opalgroup.net/ \n \nEmails/Numbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLead", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": "mbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLeads \nVoilaNorbert, AngelList Talent, YCombinator Jobs, WellFound, Triplebyte, HackerRank Talent, Wiza \nLinkedIn Email Finder by Skrapp or Snov.io, Hunter for Chrome, Clearbit Reveal, Lusha Chrome \nExtension \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "React Mastery Path  \n \nPhase 1: React Fundamentals \n1. JSX (JavaScript XML) \n\uf0b7 \nWhat: A syntax extension for JavaScript that looks like HTML and is used to describe \nUI structure in React. \n\uf0b7 \nWhy Important: Enables declarative UI creation and readable component structure. \n\uf0b7 \nUnder the Hood: JSX is transpiled to React.createElement() by Babel, which builds \na virtual DOM tree. \n\uf0b7 \nUsed in Real Apps: Defining component UI layout. \n\uf0b7 \nExample: \n\uf0b7 \nconst Welcome = () => <h1>Hello, SafeWeb AI User!</h1>; \n\uf0b7 \nHands-On Task: Create a Header, Footer, and Landing JSX layout. \n\uf0b7 \nInterview Question: What happens to JSX during the build process? \n\uf0b7 \nSafeWeb AI Use: Structure landing pages, hero sections, or onboarding screens. \n2. Components (Functional & Class) \n\uf0b7 \nWhat: Independent, reusable pieces of UI. \n\uf0b7 \nWhy Important: Encapsulates logic and markup for reuse and readability. \n\uf0b7 \nUnder the Hood: Each component maintains its own lifecycle and props/context \nhandling. \n\uf0b7 \nUsed in Real Apps: Every UI block (Navbar, Card, Form) is a component. \n\uf0b7 \nExample: \n\uf0b7 \nfunction Card(props) { \n\uf0b7 \n  return <div className=\"card\">{props.content}</div>; \n\uf0b7 \n} \n\uf0b7 \nHands-On Task: Build a FeatureCard component for highlighting SafeWeb AI \nfeatures. \n\uf0b7 \nInterview Question: Difference between functional and class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables c", "file_name": "React Notes.pdf"}, {"page": 1, "text": "nd class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables communication between components. \n\uf0b7 \nUnder the Hood: Props are passed as parameters to functions. \n\uf0b7 \nUsed in Real Apps: Passing user info, config, styles. \n\uf0b7 \nExample: \n\uf0b7 \nconst Greeting = ({ name }) => <h2>Hello, {name}</h2>; \n\uf0b7 \nHands-On Task: Pass site scan results from parent to child. \n", "file_name": "React Notes.pdf"}, {"page": 2, "text": "\uf0b7 \nInterview Question: Can a child modify props? \n\uf0b7 \nSafeWeb AI Use: Show user-specific security reports. \n4. State \n\uf0b7 \nWhat: A built-in object used to hold dynamic data. \n\uf0b7 \nWhy Important: Controls component behavior over time. \n\uf0b7 \nUnder the Hood: React uses useState to store and re-render components on update. \n\uf0b7 \nUsed in Real Apps: Handling form inputs, toggles, modals. \n\uf0b7 \nExample: \n\uf0b7 \nconst [email, setEmail] = useState(''); \n\uf0b7 \nHands-On Task: Build a login form managing email/password state. \n\uf0b7 \nInterview Question: How does state cause a re-render? \n\uf0b7 \nSafeWeb AI Use: Manage user input and scan configuration. \n5. Event Handling \n\uf0b7 \nWhat: Listening and responding to user events. \n\uf0b7 \nWhy Important: Powers interactivity. \n\uf0b7 \nUnder the Hood: Synthetic event system based on native events. \n\uf0b7 \nUsed in Real Apps: Form submission, buttons, toggles. \n\uf0b7 \nExample: \n\uf0b7 \n<button onClick={handleScan}>Start Scan</button> \n\uf0b7 \nHands-On Task: Add a \u201cStart Scan\u201d button with click handler. \n\uf0b7 \nInterview Question: What is a synthetic event? \n\uf0b7 \nSafeWeb AI Use: Trigger a website scan. \n6. Conditional Rendering \n\uf0b7 \nWhat: Rendering different UI based on conditions. \n\uf0b7 \nWhy Important: Enhances UX by showing relevant data. \n\uf0b7 \nUnder the Hood: Simple JavaScript logic (ternaries, &&, if). \n\uf0b7 \nUsed in Real Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to impl", "file_name": "React Notes.pdf"}, {"page": 2, "text": "al Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to implement conditional rendering? \n\uf0b7 \nSafeWeb AI Use: Show different UI during scan progress. \n7. Lists and Keys \n\uf0b7 \nWhat: Rendering multiple elements using map() with unique key props. \n\uf0b7 \nWhy Important: Efficient rendering and reconciliation. \n\uf0b7 \nUnder the Hood: Keys help React identify changed, added, or removed items. \n\uf0b7 \nUsed in Real Apps: Listing scan results, history logs. \n\uf0b7 \nExample: \n", "file_name": "React Notes.pdf"}, {"page": 3, "text": "\uf0b7 \n{urls.map((url) => <li key={url}>{url}</li>)} \n\uf0b7 \nHands-On Task: Display a list of scanned URLs. \n\uf0b7 \nInterview Question: Why are keys important in lists? \n\uf0b7 \nSafeWeb AI Use: Show scanned website list. \n8. useEffect \n\uf0b7 \nWhat: Side effects like data fetching, subscriptions. \n\uf0b7 \nWhy Important: Handles operations outside render. \n\uf0b7 \nUnder the Hood: Scheduled after paint, cleanup via return function. \n\uf0b7 \nUsed in Real Apps: Fetching scan results, triggering alerts. \n\uf0b7 \nExample: \n\uf0b7 \nuseEffect(() => { fetchData(); }, []); \n\uf0b7 \nHands-On Task: Fetch dummy scan data on load. \n\uf0b7 \nInterview Question: How does the dependency array work? \n\uf0b7 \nSafeWeb AI Use: Load recent scan history on dashboard. \n9. Hooks (Intro) \n\uf0b7 \nWhat: Special functions to use React features in functional components. \n\uf0b7 \nWhy Important: Replaces classes with reusable logic. \n\uf0b7 \nUnder the Hood: Hooks use internal closures and React's fiber scheduler. \n\uf0b7 \nUsed in Real Apps: All stateful or side-effect components. \n\uf0b7 \nExample: useState, useEffect \n\uf0b7 \nHands-On Task: Use useState and useEffect together. \n\uf0b7 \nInterview Question: Why can\u2019t hooks be called conditionally? \n\uf0b7 \nSafeWeb AI Use: State and side effect logic. \n10. Forms \n\uf0b7 \nWhat: Collecting and managing user input. \n\uf0b7 \nWhy Important: Central for user interaction. \n\uf0b7 \nUnder the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 ", "file_name": "React Notes.pdf"}, {"page": 3, "text": "r the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 \nHands-On Task: Build scan request form. \n\uf0b7 \nInterview Question: Difference between controlled and uncontrolled components? \n\uf0b7 \nSafeWeb AI Use: Get website input from users. \n11. Context API \n\uf0b7 \nWhat: Global state manager for passing data without prop drilling. \n\uf0b7 \nWhy Important: Simplifies state sharing. \n\uf0b7 \nUnder the Hood: Uses React context provider/consumer. \n\uf0b7 \nUsed in Real Apps: Theme, auth, locale. \n", "file_name": "React Notes.pdf"}, {"page": 4, "text": "\uf0b7 \nExample: \n\uf0b7 \nconst UserContext = React.createContext(); \n\uf0b7 \nHands-On Task: Create AuthContext. \n\uf0b7 \nInterview Question: How does context re-render consumers? \n\uf0b7 \nSafeWeb AI Use: Share user data across pages. \n12. React Router \n\uf0b7 \nWhat: Routing library to handle navigation. \n\uf0b7 \nWhy Important: Enables multi-page apps. \n\uf0b7 \nUnder the Hood: Uses HTML5 history API. \n\uf0b7 \nUsed in Real Apps: Page navigation. \n\uf0b7 \nExample: \n\uf0b7 \n<Route path=\"/scan\" element={<Scan />} /> \n\uf0b7 \nHands-On Task: Setup Login, Dashboard, Scan routes. \n\uf0b7 \nInterview Question: Difference between browser and hash routers? \n\uf0b7 \nSafeWeb AI Use: Navigate between sections. \n13. Custom Hooks \n\uf0b7 \nWhat: User-defined reusable hook functions. \n\uf0b7 \nWhy Important: Abstraction and reuse of logic. \n\uf0b7 \nUnder the Hood: Functions that call other hooks. \n\uf0b7 \nUsed in Real Apps: Reusable logic blocks. \n\uf0b7 \nExample: useAuth, useScanStatus \n\uf0b7 \nHands-On Task: Create useAuthGuard. \n\uf0b7 \nInterview Question: Naming rule for hooks? \n\uf0b7 \nSafeWeb AI Use: Custom logic management. \n14. useMemo & useCallback \n\uf0b7 \nWhat: Memoization hooks to optimize performance. \n\uf0b7 \nWhy Important: Prevents unnecessary recalculations or re-renders. \n\uf0b7 \nUnder the Hood: Caches previous return values. \n\uf0b7 \nUsed in Real Apps: Expensive operations, function refs. \n\uf0b7 \nExample: \n\uf0b7 \nconst memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. ", "file_name": "React Notes.pdf"}, {"page": 4, "text": "st memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. \n15. Refs and useRef \n\uf0b7 \nWhat: Direct DOM access or persist values across renders. \n\uf0b7 \nWhy Important: Needed for focus, timers, scroll. \n\uf0b7 \nUnder the Hood: Maintains mutable .current reference. \n", "file_name": "React Notes.pdf"}, {"page": 5, "text": "\uf0b7 \nUsed in Real Apps: Form fields, animations. \n\uf0b7 \nExample: inputRef.current.focus() \n\uf0b7 \nHands-On Task: Focus input on mount. \n\uf0b7 \nInterview Question: When to use refs? \n\uf0b7 \nSafeWeb AI Use: Scroll to report. \n16. Error Boundaries \n\uf0b7 \nWhat: Catch and handle render errors. \n\uf0b7 \nWhy Important: Prevent crashes. \n\uf0b7 \nUnder the Hood: Uses lifecycle methods (componentDidCatch). \n\uf0b7 \nUsed in Real Apps: Wrapping entire app/components. \n\uf0b7 \nExample: Class-based error catcher. \n\uf0b7 \nHands-On Task: Create ErrorBoundary wrapper. \n\uf0b7 \nInterview Question: Can hooks catch errors? \n\uf0b7 \nSafeWeb AI Use: Catch scan/report failures. \n17. Code Splitting \n\uf0b7 \nWhat: Load JS bundles on demand. \n\uf0b7 \nWhy Important: Reduces initial load. \n\uf0b7 \nUnder the Hood: Uses React.lazy and dynamic import. \n\uf0b7 \nUsed in Real Apps: Lazy-loading routes/pages. \n\uf0b7 \nExample: \n\uf0b7 \nconst Scan = React.lazy(() => import('./Scan')); \n\uf0b7 \nHands-On Task: Split heavy components. \n\uf0b7 \nInterview Question: Difference between lazy and suspense? \n\uf0b7 \nSafeWeb AI Use: Speed up first load. \n18. Higher Order Components \n\uf0b7 \nWhat: Functions returning components. \n\uf0b7 \nWhy Important: Reusable logic decorators. \n\uf0b7 \nUnder the Hood: Functional pattern. \n\uf0b7 \nUsed in Real Apps: Permissions, tracking. \n\uf0b7 \nExample: withLogging(Component) \n\uf0b7 \nHands-On Task: Create HOC for authentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Impo", "file_name": "React Notes.pdf"}, {"page": 5, "text": "uthentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Important: Flexible pattern. \n\uf0b7 \nUnder the Hood: Functions as children. \n\uf0b7 \nUsed in Real Apps: Sliders, animations. \n", "file_name": "React Notes.pdf"}, {"page": 6, "text": "\uf0b7 \nExample: <DataProvider render={(data) => <Chart data={data} />} \n\uf0b7 \nHands-On Task: Create MouseTracker. \n\uf0b7 \nInterview Question: Downsides of render props? \n\uf0b7 \nSafeWeb AI Use: Share UI logic. \n20. State Management \n\uf0b7 \nWhat: Tools to manage complex app state. \n\uf0b7 \nWhy Important: Scalability. \n\uf0b7 \nUnder the Hood: Central store and dispatch pattern. \n\uf0b7 \nUsed in Real Apps: Redux, Zustand. \n\uf0b7 \nExample: useReducer, Redux store \n\uf0b7 \nHands-On Task: Manage scan logs in global state. \n\uf0b7 \nInterview Question: Redux vs context? \n\uf0b7 \nSafeWeb AI Use: Global scan/auth state. \n21. Axios / Fetch \n\uf0b7 \nWhat: HTTP libraries to talk to APIs. \n\uf0b7 \nWhy Important: Core for data interaction. \n\uf0b7 \nUnder the Hood: Promise-based APIs. \n\uf0b7 \nUsed in Real Apps: Backend communication. \n\uf0b7 \nExample: axios.get('/api/report') \n\uf0b7 \nHands-On Task: Fetch scan results. \n\uf0b7 \nInterview Question: Axios vs fetch? \n\uf0b7 \nSafeWeb AI Use: Talk to scan API. \n22. Folder Structure \n\uf0b7 \nWhat: Organizing codebase. \n\uf0b7 \nWhy Important: Maintainability. \n\uf0b7 \nUnder the Hood: Logical separation. \n\uf0b7 \nUsed in Real Apps: Feature/domain-based. \n\uf0b7 \nExample: src/components, src/services \n\uf0b7 \nHands-On Task: Restructure SafeWeb AI project. \n\uf0b7 \nInterview Question: Best practices for large apps? \n\uf0b7 \nSafeWeb AI Use: Scale codebase. \n23. PropTypes / TypeScript \n\uf0b7 \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.p", "file_name": "React Notes.pdf"}, {"page": 6, "text": " \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.propTypes = { name: PropTypes.string } \n", "file_name": "React Notes.pdf"}, {"page": 7, "text": "\uf0b7 \nHands-On Task: Add PropTypes to core components. \n\uf0b7 \nInterview Question: TS vs PropTypes? \n\uf0b7 \nSafeWeb AI Use: Ensure correct data handling. \n24. Testing (Jest + RTL) \n\uf0b7 \nWhat: Automated validation of logic and UI. \n\uf0b7 \nWhy Important: Prevent regressions. \n\uf0b7 \nUnder the Hood: Simulates components. \n\uf0b7 \nUsed in Real Apps: CI pipelines. \n\uf0b7 \nExample: expect(getByText('Welcome')).toBeInTheDocument() \n\uf0b7 \nHands-On Task: Test login and scan page. \n\uf0b7 \nInterview Question: Unit vs integration test? \n\uf0b7 \nSafeWeb AI Use: Bug-free reliability. \n \n \nReact Interview Questions & Precise Answers \n \n1. What happens to JSX during the build process? \no JSX is transpiled by Babel into React.createElement() calls that build the \nvirtual DOM. \n2. Difference between functional and class components? \no Functional: Simple functions using hooks. Class: ES6 classes using lifecycle \nmethods. \n3. Can a child modify props? \no No. Props are read-only; only the parent can change them. \n4. How does state cause a re-render? \no Calling setState triggers React\u2019s scheduler to re-render that component with \nupdated state. \n5. What is a synthetic event? \no A cross-browser wrapper around native events, provided by React for \nconsistency. \n6. Ways to implement conditional rendering? \no \nif/else, ternary ? :, logical AND &&, IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useE", "file_name": "React Notes.pdf"}, {"page": 7, "text": ", IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useEffect? \no It determines when the effect runs. Empty array means run once. Include variables \nto trigger rerun when they change. \n9. Why can\u2019t hooks be called conditionally? \n", "file_name": "React Notes.pdf"}, {"page": 8, "text": "o Because React relies on the order of hooks. Conditional calls break this order, \ncausing bugs. \n10. Difference between controlled and uncontrolled components? \no Controlled: state-driven. Uncontrolled: DOM-driven (using refs). \n11. How does context re-render consumers? \no When context value changes, all consumers using that context re-render. \n12. Difference between browser and hash routers? \no BrowserRouter uses HTML5 history API. HashRouter uses URL hash (#) for \nrouting. \n13. Naming rule for custom hooks? \no Must start with use to let React track them internally. \n14. When does useMemo recalculate? \no When any dependency in its dependency array changes. \n15. When to use refs? \no When you need direct DOM access or to persist values without triggering re-\nrenders. \n16. Can hooks catch errors? \no No. Only class-based error boundaries can catch render-time errors. \n17. Difference between lazy and suspense? \no \nlazy dynamically imports components. Suspense wraps lazy-loaded components \nto handle loading fallback. \n18. Compare HOCs with hooks? \no HOCs wrap components for reuse. Hooks reuse logic inside functional \ncomponents. \n19. Downsides of render props? \no Can lead to deeply nested structures (callback hell). \n20. Redux vs Context? \no Redux is for complex/global state with middleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps fo", "file_name": "React Notes.pdf"}, {"page": 8, "text": "dleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps folder structure? \no Feature-based or domain-based structure with clear separation of concerns. \n23. TypeScript vs PropTypes? \no TypeScript checks types at compile-time. PropTypes check at runtime and are \nlimited. \n24. Unit vs integration test? \no Unit: test single component/function. Integration: test interactions between \ncomponents. \n \n \n", "file_name": "React Notes.pdf"}, {"page": 1, "text": "Global Paid Developer & Mentorship Programs  \n1. Paid Developer Programs  \n  \nProgram  \nLocation  \nDuration  \nPay (INR)  \nApply Timeline  \nLinkedIn REACH  \nHybrid (USA)  \n1-5 years  \nRs.1.16-1.41 Cr/year    \n          June  \nMicrosoft LEAP  \nOn-site (USA/Canada)  16 weeks  \nRs.82-96 L/year  \n         August   \nAdobe Digital Academy  \nOn-site (USA)  \n6-9 months  \nStipend + Paid Apprenticeship  \n       September  \nGoogle Summer of Code (  GSoC)Remote  \n12+ weeks  \nRs.1.25-2.5 L  \n          March   \nMLH Fellowship  \nRemote  \n12 weeks  \nRs.4.1 L  \n     March- April  \nLinux Foundation Mentorsh ip (LFX)Remote  \n3-24 weeks  \nRs.2.5-5 L  \n     Feb-July (varies)  \n  \n2. Application Links   \n1. LinkedIn REACH: https://careers.linkedin.com/reach  \n2. Microsoft LEAP:  https://leap.microsoft.com  \n3. Adobe Digital Academy: https://www.adobe.com/corporate-\nresponsibility/creativity/digitalacademy  \n4. Google Summer of Code (GSoC): https://summerofcode.withgoogle.com  \n5. MLH Fellowship: https://fellowship.mlh.io/  \n6. Linux Foundation Mentorship (LFX): https://lfx.linuxfoundation.org/mentorship/  \n3. Paid Remote Mentorship Opportunities  \n1. Google Summer of Code (Mentor)  \nDetails: Experienced developers can apply as paid mentors for open-source projects.  \nApply: https://summerofcode.withgoogle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-sou", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "gle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-source project maintainers or contributors can apply to host/mentor projects. Apply: \nhttps://lfx.linuxfoundation.org/mentorship/  \n  \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Ecommerce  Mobility  \nCompanies  \nCloud  \nServices/  \nSaaS  \nCRM/Workflow \nManagement  \nTravel  \nPayments/  \nFintech  \nInvestment Banks/  \nHedge Funds  \nFlipkart  \nOla  \nVmWare  \nZoho  \nAirbnb  \nPaypal  \nDE Shaw  \nMyntra  \nUber  \nRedHat  \nSalesforce  \nOYO  \nVisa  \nGoldman Sachs  \nTesco  \nMeru  \nOCI  \nEngageBay  \nMakeMyTrip  \nPhonepe  \nWorld Quant  \nWalmart  \nZoomcar  \nSAP Labs  \nServiceNow  \nExpedia  \nPaytm  \nArcessium  \nTarget  \nRapido  \nIBM  \n \nBooking.com  BharatPe  \nIntuit  \nShopsy  \n \nBrowserStack   \nAgoda  \nCred  \nJP Morgan  \nBloomerang  \n \nNutanix  \n \nGroupon  \nSlice  \nMorgan Stanley  \nCult.fit  \n \nHp  \n \n \nRazorpay  \nWells Fargo  \nAJIO  \n \nNetApp  \n \n \nZeta  \nDruva  \nPharmaeasy   \nCohesity  \n \n \nRupeek  \n \nMeesho  \n \nTekion Corp  \n \n \nClearTax  \n \nLowe\u2019s  \n  \nRubrik  \n  \n  \nJupiter  \n  \nCompanies  \n \nMost High Paying Remote Jobs and few On-site jobs (Use FILTERS) \n1. https://tinyparticlejobs.com/ \n2. https://www.remoterocketship.com \n3. https://nodesk.co/remote-jobs/ \n4. https://wellfound.com/jobs \n5. https://weworkremotely.com/categories/remote-programming-jobs \n6. https://stackoverflow.com/jobs \n7. https://jobs.github.com \n8. https://www.linkedin.com/jobs/ \n9. https://www.toptal.com/ \n10. https://remoteok.io/remote-dev-jobs \n \nFew very high paying remote \u2013  \nSpreeTail \nBlink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Blink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": " \n \nRICH PEOPLE USES / BILLIONAIRES LINKS \n Investment & Startup Platforms \n AngelList Ventures  \u2014 https://angel.co/venture \n MicroVentures \u2014 https://microventures.com/ \n ToptalSeedInvest \u2014 https://www.seedinvest.com/ \n Product Hunt Makers -- https://www.producthunt.com/makers \n Y Cobinator Startup School \u2013 https://www.startupschool.org/ \n      Premium Networking & Professional Platforms \n Lunchclub \u2014 https://lunchclub.com/ \n Shapr \u2014 https://www.shapr.co/ \n Toptal \u2014 https://www.toptal.com/ \n Tiger 21 (private network for investors) \u2014https://tiger21.com/ \n FoundersCard \u2014 https://founderscard.com/ \n      Exclusive Social & Community Platforms \n Clubhouse (invite-only audio network) \u2014 https://www.joinclubhouse.com/ \n Techstars Founders Slack (invite-only; search online to join) \n Various Venture Capital & Startup Discord communities (search Discord servers) \n     Conferences & Summits (for networking) \n TED \u2014 https://www.ted.com/ \n Web Summit -- https://websummit.com/ \n SXSW -- https://www.sxsw.com/ \n TechCrunch Disrupt \u2014 https://techcrunch.com/events/disrupt-sf-2024/ \n Forbes 30 Under 30 Summit \u2014https://www.forbes.com/30-under-30-summit/ \n     Private Family Office & Wealth Networks \n Family Office Club \u2014 https://familyoffices.com/ \n Opal Group \u2014 https://opalgroup.net/ \n \nEmails/Numbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLead", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": "mbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLeads \nVoilaNorbert, AngelList Talent, YCombinator Jobs, WellFound, Triplebyte, HackerRank Talent, Wiza \nLinkedIn Email Finder by Skrapp or Snov.io, Hunter for Chrome, Clearbit Reveal, Lusha Chrome \nExtension \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "React Mastery Path  \n \nPhase 1: React Fundamentals \n1. JSX (JavaScript XML) \n\uf0b7 \nWhat: A syntax extension for JavaScript that looks like HTML and is used to describe \nUI structure in React. \n\uf0b7 \nWhy Important: Enables declarative UI creation and readable component structure. \n\uf0b7 \nUnder the Hood: JSX is transpiled to React.createElement() by Babel, which builds \na virtual DOM tree. \n\uf0b7 \nUsed in Real Apps: Defining component UI layout. \n\uf0b7 \nExample: \n\uf0b7 \nconst Welcome = () => <h1>Hello, SafeWeb AI User!</h1>; \n\uf0b7 \nHands-On Task: Create a Header, Footer, and Landing JSX layout. \n\uf0b7 \nInterview Question: What happens to JSX during the build process? \n\uf0b7 \nSafeWeb AI Use: Structure landing pages, hero sections, or onboarding screens. \n2. Components (Functional & Class) \n\uf0b7 \nWhat: Independent, reusable pieces of UI. \n\uf0b7 \nWhy Important: Encapsulates logic and markup for reuse and readability. \n\uf0b7 \nUnder the Hood: Each component maintains its own lifecycle and props/context \nhandling. \n\uf0b7 \nUsed in Real Apps: Every UI block (Navbar, Card, Form) is a component. \n\uf0b7 \nExample: \n\uf0b7 \nfunction Card(props) { \n\uf0b7 \n  return <div className=\"card\">{props.content}</div>; \n\uf0b7 \n} \n\uf0b7 \nHands-On Task: Build a FeatureCard component for highlighting SafeWeb AI \nfeatures. \n\uf0b7 \nInterview Question: Difference between functional and class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables c", "file_name": "React Notes.pdf"}, {"page": 1, "text": "nd class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables communication between components. \n\uf0b7 \nUnder the Hood: Props are passed as parameters to functions. \n\uf0b7 \nUsed in Real Apps: Passing user info, config, styles. \n\uf0b7 \nExample: \n\uf0b7 \nconst Greeting = ({ name }) => <h2>Hello, {name}</h2>; \n\uf0b7 \nHands-On Task: Pass site scan results from parent to child. \n", "file_name": "React Notes.pdf"}, {"page": 2, "text": "\uf0b7 \nInterview Question: Can a child modify props? \n\uf0b7 \nSafeWeb AI Use: Show user-specific security reports. \n4. State \n\uf0b7 \nWhat: A built-in object used to hold dynamic data. \n\uf0b7 \nWhy Important: Controls component behavior over time. \n\uf0b7 \nUnder the Hood: React uses useState to store and re-render components on update. \n\uf0b7 \nUsed in Real Apps: Handling form inputs, toggles, modals. \n\uf0b7 \nExample: \n\uf0b7 \nconst [email, setEmail] = useState(''); \n\uf0b7 \nHands-On Task: Build a login form managing email/password state. \n\uf0b7 \nInterview Question: How does state cause a re-render? \n\uf0b7 \nSafeWeb AI Use: Manage user input and scan configuration. \n5. Event Handling \n\uf0b7 \nWhat: Listening and responding to user events. \n\uf0b7 \nWhy Important: Powers interactivity. \n\uf0b7 \nUnder the Hood: Synthetic event system based on native events. \n\uf0b7 \nUsed in Real Apps: Form submission, buttons, toggles. \n\uf0b7 \nExample: \n\uf0b7 \n<button onClick={handleScan}>Start Scan</button> \n\uf0b7 \nHands-On Task: Add a \u201cStart Scan\u201d button with click handler. \n\uf0b7 \nInterview Question: What is a synthetic event? \n\uf0b7 \nSafeWeb AI Use: Trigger a website scan. \n6. Conditional Rendering \n\uf0b7 \nWhat: Rendering different UI based on conditions. \n\uf0b7 \nWhy Important: Enhances UX by showing relevant data. \n\uf0b7 \nUnder the Hood: Simple JavaScript logic (ternaries, &&, if). \n\uf0b7 \nUsed in Real Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to impl", "file_name": "React Notes.pdf"}, {"page": 2, "text": "al Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to implement conditional rendering? \n\uf0b7 \nSafeWeb AI Use: Show different UI during scan progress. \n7. Lists and Keys \n\uf0b7 \nWhat: Rendering multiple elements using map() with unique key props. \n\uf0b7 \nWhy Important: Efficient rendering and reconciliation. \n\uf0b7 \nUnder the Hood: Keys help React identify changed, added, or removed items. \n\uf0b7 \nUsed in Real Apps: Listing scan results, history logs. \n\uf0b7 \nExample: \n", "file_name": "React Notes.pdf"}, {"page": 3, "text": "\uf0b7 \n{urls.map((url) => <li key={url}>{url}</li>)} \n\uf0b7 \nHands-On Task: Display a list of scanned URLs. \n\uf0b7 \nInterview Question: Why are keys important in lists? \n\uf0b7 \nSafeWeb AI Use: Show scanned website list. \n8. useEffect \n\uf0b7 \nWhat: Side effects like data fetching, subscriptions. \n\uf0b7 \nWhy Important: Handles operations outside render. \n\uf0b7 \nUnder the Hood: Scheduled after paint, cleanup via return function. \n\uf0b7 \nUsed in Real Apps: Fetching scan results, triggering alerts. \n\uf0b7 \nExample: \n\uf0b7 \nuseEffect(() => { fetchData(); }, []); \n\uf0b7 \nHands-On Task: Fetch dummy scan data on load. \n\uf0b7 \nInterview Question: How does the dependency array work? \n\uf0b7 \nSafeWeb AI Use: Load recent scan history on dashboard. \n9. Hooks (Intro) \n\uf0b7 \nWhat: Special functions to use React features in functional components. \n\uf0b7 \nWhy Important: Replaces classes with reusable logic. \n\uf0b7 \nUnder the Hood: Hooks use internal closures and React's fiber scheduler. \n\uf0b7 \nUsed in Real Apps: All stateful or side-effect components. \n\uf0b7 \nExample: useState, useEffect \n\uf0b7 \nHands-On Task: Use useState and useEffect together. \n\uf0b7 \nInterview Question: Why can\u2019t hooks be called conditionally? \n\uf0b7 \nSafeWeb AI Use: State and side effect logic. \n10. Forms \n\uf0b7 \nWhat: Collecting and managing user input. \n\uf0b7 \nWhy Important: Central for user interaction. \n\uf0b7 \nUnder the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 ", "file_name": "React Notes.pdf"}, {"page": 3, "text": "r the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 \nHands-On Task: Build scan request form. \n\uf0b7 \nInterview Question: Difference between controlled and uncontrolled components? \n\uf0b7 \nSafeWeb AI Use: Get website input from users. \n11. Context API \n\uf0b7 \nWhat: Global state manager for passing data without prop drilling. \n\uf0b7 \nWhy Important: Simplifies state sharing. \n\uf0b7 \nUnder the Hood: Uses React context provider/consumer. \n\uf0b7 \nUsed in Real Apps: Theme, auth, locale. \n", "file_name": "React Notes.pdf"}, {"page": 4, "text": "\uf0b7 \nExample: \n\uf0b7 \nconst UserContext = React.createContext(); \n\uf0b7 \nHands-On Task: Create AuthContext. \n\uf0b7 \nInterview Question: How does context re-render consumers? \n\uf0b7 \nSafeWeb AI Use: Share user data across pages. \n12. React Router \n\uf0b7 \nWhat: Routing library to handle navigation. \n\uf0b7 \nWhy Important: Enables multi-page apps. \n\uf0b7 \nUnder the Hood: Uses HTML5 history API. \n\uf0b7 \nUsed in Real Apps: Page navigation. \n\uf0b7 \nExample: \n\uf0b7 \n<Route path=\"/scan\" element={<Scan />} /> \n\uf0b7 \nHands-On Task: Setup Login, Dashboard, Scan routes. \n\uf0b7 \nInterview Question: Difference between browser and hash routers? \n\uf0b7 \nSafeWeb AI Use: Navigate between sections. \n13. Custom Hooks \n\uf0b7 \nWhat: User-defined reusable hook functions. \n\uf0b7 \nWhy Important: Abstraction and reuse of logic. \n\uf0b7 \nUnder the Hood: Functions that call other hooks. \n\uf0b7 \nUsed in Real Apps: Reusable logic blocks. \n\uf0b7 \nExample: useAuth, useScanStatus \n\uf0b7 \nHands-On Task: Create useAuthGuard. \n\uf0b7 \nInterview Question: Naming rule for hooks? \n\uf0b7 \nSafeWeb AI Use: Custom logic management. \n14. useMemo & useCallback \n\uf0b7 \nWhat: Memoization hooks to optimize performance. \n\uf0b7 \nWhy Important: Prevents unnecessary recalculations or re-renders. \n\uf0b7 \nUnder the Hood: Caches previous return values. \n\uf0b7 \nUsed in Real Apps: Expensive operations, function refs. \n\uf0b7 \nExample: \n\uf0b7 \nconst memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. ", "file_name": "React Notes.pdf"}, {"page": 4, "text": "st memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. \n15. Refs and useRef \n\uf0b7 \nWhat: Direct DOM access or persist values across renders. \n\uf0b7 \nWhy Important: Needed for focus, timers, scroll. \n\uf0b7 \nUnder the Hood: Maintains mutable .current reference. \n", "file_name": "React Notes.pdf"}, {"page": 5, "text": "\uf0b7 \nUsed in Real Apps: Form fields, animations. \n\uf0b7 \nExample: inputRef.current.focus() \n\uf0b7 \nHands-On Task: Focus input on mount. \n\uf0b7 \nInterview Question: When to use refs? \n\uf0b7 \nSafeWeb AI Use: Scroll to report. \n16. Error Boundaries \n\uf0b7 \nWhat: Catch and handle render errors. \n\uf0b7 \nWhy Important: Prevent crashes. \n\uf0b7 \nUnder the Hood: Uses lifecycle methods (componentDidCatch). \n\uf0b7 \nUsed in Real Apps: Wrapping entire app/components. \n\uf0b7 \nExample: Class-based error catcher. \n\uf0b7 \nHands-On Task: Create ErrorBoundary wrapper. \n\uf0b7 \nInterview Question: Can hooks catch errors? \n\uf0b7 \nSafeWeb AI Use: Catch scan/report failures. \n17. Code Splitting \n\uf0b7 \nWhat: Load JS bundles on demand. \n\uf0b7 \nWhy Important: Reduces initial load. \n\uf0b7 \nUnder the Hood: Uses React.lazy and dynamic import. \n\uf0b7 \nUsed in Real Apps: Lazy-loading routes/pages. \n\uf0b7 \nExample: \n\uf0b7 \nconst Scan = React.lazy(() => import('./Scan')); \n\uf0b7 \nHands-On Task: Split heavy components. \n\uf0b7 \nInterview Question: Difference between lazy and suspense? \n\uf0b7 \nSafeWeb AI Use: Speed up first load. \n18. Higher Order Components \n\uf0b7 \nWhat: Functions returning components. \n\uf0b7 \nWhy Important: Reusable logic decorators. \n\uf0b7 \nUnder the Hood: Functional pattern. \n\uf0b7 \nUsed in Real Apps: Permissions, tracking. \n\uf0b7 \nExample: withLogging(Component) \n\uf0b7 \nHands-On Task: Create HOC for authentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Impo", "file_name": "React Notes.pdf"}, {"page": 5, "text": "uthentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Important: Flexible pattern. \n\uf0b7 \nUnder the Hood: Functions as children. \n\uf0b7 \nUsed in Real Apps: Sliders, animations. \n", "file_name": "React Notes.pdf"}, {"page": 6, "text": "\uf0b7 \nExample: <DataProvider render={(data) => <Chart data={data} />} \n\uf0b7 \nHands-On Task: Create MouseTracker. \n\uf0b7 \nInterview Question: Downsides of render props? \n\uf0b7 \nSafeWeb AI Use: Share UI logic. \n20. State Management \n\uf0b7 \nWhat: Tools to manage complex app state. \n\uf0b7 \nWhy Important: Scalability. \n\uf0b7 \nUnder the Hood: Central store and dispatch pattern. \n\uf0b7 \nUsed in Real Apps: Redux, Zustand. \n\uf0b7 \nExample: useReducer, Redux store \n\uf0b7 \nHands-On Task: Manage scan logs in global state. \n\uf0b7 \nInterview Question: Redux vs context? \n\uf0b7 \nSafeWeb AI Use: Global scan/auth state. \n21. Axios / Fetch \n\uf0b7 \nWhat: HTTP libraries to talk to APIs. \n\uf0b7 \nWhy Important: Core for data interaction. \n\uf0b7 \nUnder the Hood: Promise-based APIs. \n\uf0b7 \nUsed in Real Apps: Backend communication. \n\uf0b7 \nExample: axios.get('/api/report') \n\uf0b7 \nHands-On Task: Fetch scan results. \n\uf0b7 \nInterview Question: Axios vs fetch? \n\uf0b7 \nSafeWeb AI Use: Talk to scan API. \n22. Folder Structure \n\uf0b7 \nWhat: Organizing codebase. \n\uf0b7 \nWhy Important: Maintainability. \n\uf0b7 \nUnder the Hood: Logical separation. \n\uf0b7 \nUsed in Real Apps: Feature/domain-based. \n\uf0b7 \nExample: src/components, src/services \n\uf0b7 \nHands-On Task: Restructure SafeWeb AI project. \n\uf0b7 \nInterview Question: Best practices for large apps? \n\uf0b7 \nSafeWeb AI Use: Scale codebase. \n23. PropTypes / TypeScript \n\uf0b7 \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.p", "file_name": "React Notes.pdf"}, {"page": 6, "text": " \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.propTypes = { name: PropTypes.string } \n", "file_name": "React Notes.pdf"}, {"page": 7, "text": "\uf0b7 \nHands-On Task: Add PropTypes to core components. \n\uf0b7 \nInterview Question: TS vs PropTypes? \n\uf0b7 \nSafeWeb AI Use: Ensure correct data handling. \n24. Testing (Jest + RTL) \n\uf0b7 \nWhat: Automated validation of logic and UI. \n\uf0b7 \nWhy Important: Prevent regressions. \n\uf0b7 \nUnder the Hood: Simulates components. \n\uf0b7 \nUsed in Real Apps: CI pipelines. \n\uf0b7 \nExample: expect(getByText('Welcome')).toBeInTheDocument() \n\uf0b7 \nHands-On Task: Test login and scan page. \n\uf0b7 \nInterview Question: Unit vs integration test? \n\uf0b7 \nSafeWeb AI Use: Bug-free reliability. \n \n \nReact Interview Questions & Precise Answers \n \n1. What happens to JSX during the build process? \no JSX is transpiled by Babel into React.createElement() calls that build the \nvirtual DOM. \n2. Difference between functional and class components? \no Functional: Simple functions using hooks. Class: ES6 classes using lifecycle \nmethods. \n3. Can a child modify props? \no No. Props are read-only; only the parent can change them. \n4. How does state cause a re-render? \no Calling setState triggers React\u2019s scheduler to re-render that component with \nupdated state. \n5. What is a synthetic event? \no A cross-browser wrapper around native events, provided by React for \nconsistency. \n6. Ways to implement conditional rendering? \no \nif/else, ternary ? :, logical AND &&, IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useE", "file_name": "React Notes.pdf"}, {"page": 7, "text": ", IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useEffect? \no It determines when the effect runs. Empty array means run once. Include variables \nto trigger rerun when they change. \n9. Why can\u2019t hooks be called conditionally? \n", "file_name": "React Notes.pdf"}, {"page": 8, "text": "o Because React relies on the order of hooks. Conditional calls break this order, \ncausing bugs. \n10. Difference between controlled and uncontrolled components? \no Controlled: state-driven. Uncontrolled: DOM-driven (using refs). \n11. How does context re-render consumers? \no When context value changes, all consumers using that context re-render. \n12. Difference between browser and hash routers? \no BrowserRouter uses HTML5 history API. HashRouter uses URL hash (#) for \nrouting. \n13. Naming rule for custom hooks? \no Must start with use to let React track them internally. \n14. When does useMemo recalculate? \no When any dependency in its dependency array changes. \n15. When to use refs? \no When you need direct DOM access or to persist values without triggering re-\nrenders. \n16. Can hooks catch errors? \no No. Only class-based error boundaries can catch render-time errors. \n17. Difference between lazy and suspense? \no \nlazy dynamically imports components. Suspense wraps lazy-loaded components \nto handle loading fallback. \n18. Compare HOCs with hooks? \no HOCs wrap components for reuse. Hooks reuse logic inside functional \ncomponents. \n19. Downsides of render props? \no Can lead to deeply nested structures (callback hell). \n20. Redux vs Context? \no Redux is for complex/global state with middleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps fo", "file_name": "React Notes.pdf"}, {"page": 8, "text": "dleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps folder structure? \no Feature-based or domain-based structure with clear separation of concerns. \n23. TypeScript vs PropTypes? \no TypeScript checks types at compile-time. PropTypes check at runtime and are \nlimited. \n24. Unit vs integration test? \no Unit: test single component/function. Integration: test interactions between \ncomponents. \n \n \n", "file_name": "React Notes.pdf"}, {"page": 1, "text": " \n \nGeneral SQL Topics \n1. INTRODUCTION TO SQL \n\uf0b7 \nSQL: Structured Query Language, used to interact with relational databases. \n\uf0b7 \nRelational Database: Stores data in tables (rows & columns). \n\uf0b7 \nCommon RDBMS: MySQL, PostgreSQL, SQLite, Oracle, SQL Server. \n \n2. SQL DATA TYPES \n\uf0b7 \nINT: Integer numbers \n\uf0b7 \nVARCHAR(n): Variable-length string with a maximum of n characters \n\uf0b7 \nCHAR(n): Fixed-length string \n\uf0b7 \nDATE / DATETIME: Date or timestamp \n\uf0b7 \nDECIMAL(p, s): Exact numeric value with precision and scale \n\uf0b7 \nBOOLEAN: True or False \n\uf0b7 \nTEXT: Long-form string data \n \n3. BASIC SQL COMMANDS \n\u27a4 Create Table \nCREATE TABLE Employees ( \n  id INT PRIMARY KEY, \n  name VARCHAR(100), \n  salary INT, \n  department VARCHAR(50) \n); \n\u27a4 Insert \nINSERT INTO Employees (id, name, salary, department) \nVALUES (1, 'Alice', 60000, 'HR'); \n\u27a4 Select \nSELECT * FROM Employees; \nSELECT name, salary FROM Employees; \nSELECT * FROM Employees WHERE salary > 50000; \n\u27a4 Update \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 2, "text": "UPDATE Employees SET salary = 70000 WHERE id = 1; \n\u27a4 Delete \nDELETE FROM Employees WHERE id = 1; \n \n4. FILTERING DATA \n\u27a4 WHERE, AND, OR, NOT \nSELECT * FROM Employees \nWHERE department = 'HR' AND salary > 50000; \n\u27a4 IN, BETWEEN, LIKE \nSELECT * FROM Employees WHERE department IN ('HR', 'Sales'); \nSELECT * FROM Employees WHERE salary BETWEEN 40000 AND 70000; \nSELECT * FROM Employees WHERE name LIKE 'A%'; -- starts with A \n \n5. SORTING & LIMITING \nSELECT * FROM Employees ORDER BY salary DESC; \nSELECT * FROM Employees LIMIT 5; \n \n6. AGGREGATE FUNCTIONS \nSELECT COUNT(*) FROM Employees; \nSELECT AVG(salary) FROM Employees; \nSELECT SUM(salary), MAX(salary), MIN(salary) FROM Employees; \n \n7. GROUPING & FILTERING AGGREGATES \nSELECT department, AVG(salary) AS avg_salary \nFROM Employees \nGROUP BY department \nHAVING AVG(salary) > 50000; \n \n8. JOINS \n\u27a4 Syntax: \nSELECT e.name, d.name \nFROM Employees e \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 3, "text": "JOIN Departments d ON e.department_id = d.id; \n8.1. INNER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nINNER JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 Only matching department IDs shown. \n8.2. LEFT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All employees shown, even if no department. \n8.3. RIGHT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All departments shown, even if no employee. \n8.4. FULL OUTER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id \nUNION \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n \n9. SUBQUERIES \nUsed to embed one query inside another. \nSELECT name FROM Employees \nWHERE salary > ( \n  SELECT AVG(salary) FROM Employees \n); \n \n10. CONSTRAINTS \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 4, "text": "\uf0b7 \nPRIMARY KEY: Uniquely identifies each record \n\uf0b7 \nFOREIGN KEY: Links to primary key of another table \n\uf0b7 \nUNIQUE: Ensures all values in a column are different \n\uf0b7 \nNOT NULL: Disallows NULL values \n\uf0b7 \nCHECK: Ensures a condition is met \n \n11. NORMALIZATION  \n\uf0b7 \nProcess of organizing data to reduce redundancy and improve data integrity. \n\uf0b7 \n1NF: Atomic values \n\uf0b7 \n2NF: No partial dependencies \n\uf0b7 \n3NF: No transitive dependencies \n\uf0b7 \nEnsures data integrity and minimizes duplication. \n\ud83c\udfaf Why Normalize? \n\uf0b7 \nEliminate duplicate data \n\uf0b7 \nEnsure data consistency \n\uf0b7 \nImprove data structure for querying and updates \n \n\ud83d\udcda Normal Forms (NF) \n\u2705 1NF \u2013 First Normal Form \nRule: All values must be atomic (indivisible). \nFix: Remove repeating groups and store one value per cell. \nExample (Bad): \nID Name Phones \n1 Alice 1234, 5678 \nFix (1NF): \nID Name Phone \n1 Alice 1234 \n1 Alice 5678 \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 5, "text": "\u2705 2NF \u2013 Second Normal Form \nRule: Be in 1NF + No Partial Dependency on a composite key. \nFix: Move partially dependent data to a new table. \nExample: \nComposite key: (StudentID, CourseID) \nStudentID CourseID StudentName \nFix (2NF): \n\uf0b7 \nTable 1: StudentCourses(StudentID, CourseID) \n\uf0b7 \nTable 2: Students(StudentID, StudentName) \n \n\u2705 3NF \u2013 Third Normal Form \nRule: Be in 2NF + No transitive dependency. \nFix: Remove data that's indirectly dependent on the primary key. \nExample (Bad): \nEmpID Name DeptID DeptName \nFix (3NF): \n\uf0b7 \nTable 1: Employees(EmpID, Name, DeptID) \n\uf0b7 \nTable 2: Departments(DeptID, DeptName) \n \n\ud83e\udde0 When Not to Normalize? \n\uf0b7 \nFor read-heavy applications (analytics, reporting) \n\uf0b7 \nWhen query performance is more important than data integrity \n \n\u2705 Real-Life Analogy \n\uf0b7 \n1NF: Each house (record) has its own mailbox (cell), not a shared one \n\uf0b7 \n2NF: One key opens only one mailbox (no shared access) \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 6, "text": "\uf0b7 \n3NF: The key opens the right mailbox and not someone else\u2019s cabinet (no indirect \ndependencies) \n \n \n12. INDEXING \nIndexing is a powerful technique to speed up SELECT queries on large tables. \n\uf0b7 \nSpeeds up WHERE, JOIN, GROUP BY, and ORDER BY queries \n\uf0b7 \nBoosts search performance on large datasets. \n\uf0b7 \nAvoid on frequently updated or low-cardinality columns \n\uf0b7 \nUse EXPLAIN to test effectiveness \n\uf0b7 \nAvoid over-indexing (inserts & updates become slower). \n\u2705 Types \n\uf0b7 \nSingle-column Index \n \nCREATE INDEX idx_salary ON Employees(salary); \n\uf0b7 \nComposite Index \n \nCREATE INDEX idx_name_dept ON Employees(name, department);\n \n13. VIEWS \n\uf0b7 \nA view is a virtual table based on a query \n\uf0b7 \nThey do not store data. Use Materialized Views (if supported) for cached result. \n\uf0b7 \nSimplify complex queries. \n\uf0b7 \nEnhance security (restrict column access) \n\uf0b7 \nEnable reusable logic \n\u2705 Example \nCREATE VIEW HR_Employees AS \nSELECT name, salary \nFROM Employees \nWHERE department = 'HR'; \n \n \n14. TRANSACTIONS & ACID \nA Transaction is a logical unit of work consisting of one or more SQL statements. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 7, "text": "Use ROLLBACK; to undo changes before COMMIT;. \n\uf0b7 \nACID: \no \nAtomicity: All or none \no \nConsistency: Valid data state \no \nIsolation: No interference \no \nDurability: Permanent changes \n\u2705 Example \nBEGIN; \nUPDATE Accounts SET balance = balance - 100 WHERE id = 1; \nUPDATE Accounts SET balance = balance + 100 WHERE id = 2; \nCOMMIT; \n \n15. WINDOW FUNCTIONS \nWindow functions perform calculations across rows related to the current row \u2014 without collapsing \nthem like GROUP BY.  \nUsed for row-level calculations without grouping. \nUse cases : Leaderboards, Change Tracking, Tired analysis \nRANK(), DENSE_RANK(), ROW_NUMBER() \n\u2705 Example \nSELECT name, salary, \n  RANK() OVER (ORDER BY salary DESC) AS salary_rank \nFROM Employees; \n\ud83d\udd11 Popular Window Functions \n\uf0b7 \nROW_NUMBER(), RANK(), DENSE_RANK() \n\uf0b7 \nLAG(), LEAD() \n\uf0b7 \nNTILE(n) (for percentiles) \n \n16. COMMON TABLE EXPRESSIONS (CTEs) \nCTEs are temporary result sets used within queries \u2014 easier to read & maintain. \n\u2705 Syntax \nWITH HighEarners AS ( \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 8, "text": "  SELECT * FROM Employees WHERE salary > 50000 \n) \nSELECT name FROM HighEarners; \n\ud83e\udde0 Benefits \n\uf0b7 \nBreak complex queries into readable blocks \n\uf0b7 \nUse recursive CTEs for hierarchical data \n \n17. UNION vs UNION ALL \nSELECT name FROM Managers \nUNION \nSELECT name FROM Employees; -- Removes duplicates \n \nSELECT name FROM Managers \nUNION ALL \nSELECT name FROM Employees; -- Keeps duplicates \n \n18. SET OPERATIONS \nSELECT name FROM A \nINTERSECT \nSELECT name FROM B; \n \nSELECT name FROM A \nEXCEPT \nSELECT name FROM B; \n\uf0b7 \n\u26a0 Not supported in MySQL; supported in PostgreSQL/SQL Server. \n \n19. NULL Handling \nSELECT name, COALESCE(nickname, 'No Nick') FROM Users; \nSELECT NULLIF(salary, 0);  -- Returns NULL if salary = 0 \n\uf0b7 \nUse IS NULL / IS NOT NULL \n\uf0b7 \nCOALESCE(), IFNULL(), NULLIF() \n \n20. CASE Statements \nSELECT name, \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 9, "text": "CASE \n  WHEN salary > 70000 THEN 'High' \n  WHEN salary > 40000 THEN 'Medium' \n  ELSE 'Low' \nEND AS salary_level \nFROM Employees; \n \n21. Stored Procedures & Functions (Advanced) \nStored Procedures are saved SQL blocks that perform actions. \nFunctions return a single value. Use procedures for reusable logic. Use functions in SELECT, WHERE, or \nJOIN clauses \n\u2705 Procedure Example \nCREATE PROCEDURE GetHighEarners() \nBEGIN \n  SELECT * FROM Employees WHERE salary > 70000; \nEND; \n\u2705 Function Example \nCREATE FUNCTION TaxAmount(salary DECIMAL) \nRETURNS DECIMAL \nBEGIN \n  RETURN salary * 0.10; \nEND; \n \n \n22. Temporary Tables \nCREATE TEMPORARY TABLE Temp_Employees AS \nSELECT * FROM Employees WHERE department = 'HR'; \n \n23. Triggers (Advanced - Rare) \nCREATE TRIGGER before_insert_trigger \nBEFORE INSERT ON Employees \nFOR EACH ROW \nSET NEW.salary = IF(NEW.salary < 0, 0, NEW.salary); \n\uf0b7 \nUsed for validation, logging, auto-calculation. \n \n24. Data Definition vs Data Manipulation vs Data Control \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 10, "text": "\uf0b7 \nDDL (Definition): CREATE, ALTER, DROP \n\uf0b7 \nDML (Manipulation): SELECT, INSERT, UPDATE, DELETE \n\uf0b7 \nDCL (Control): GRANT, REVOKE \n\uf0b7 \nTCL (Transaction): COMMIT, ROLLBACK \n \nINTERVIEW QUERY PATTERNS \n\u27a4 Nth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET 1; -- 2nd highest \n\u27a4 Duplicate Rows \nSELECT name, COUNT(*) \nFROM Employees \nGROUP BY name \nHAVING COUNT(*) > 1; \n\u27a4 Same Salary Employees \nSELECT * FROM Employees \nWHERE salary IN ( \n  SELECT salary FROM Employees \n  GROUP BY salary \n  HAVING COUNT(*) > 1 \n); \n\u27a4 Employees with Max Salary Per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, \n         RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\u27a4 Self Join Example \nSELECT A.name AS Employee, B.name AS Manager \nFROM Employees A \nJOIN Employees B ON A.manager_id = B.id; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 11, "text": "\u27a4 EXISTS vs IN vs JOIN \n-- EXISTS \nSELECT name FROM Employees e \nWHERE EXISTS ( \n  SELECT 1 FROM Departments d WHERE d.id = e.department_id \n); \n-- IN \nSELECT name FROM Employees \nWHERE department_id IN (SELECT id FROM Departments); \n-- JOIN \nSELECT e.name, d.name FROM Employees e \nJOIN Departments d ON e.department_id = d.id; \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 12, "text": "Advanced SQL Topics \n \n1. Recursive CTEs (Made Simple) \nA Recursive CTE lets a query call itself, useful when working with hierarchies like employees \n& managers or categories & subcategories. \nEasy Analogy: \nThink of it like a loop in SQL. Start with one person (manager), then find their subordinates, then \nsubordinates of subordinates, and so on. \nSyntax: \nWITH RECURSIVE cte_name AS ( \n  SELECT ...  -- Starting point (anchor) \n  UNION ALL \n  SELECT ... FROM cte_name ... -- Repeat until done \n) \nSELECT * FROM cte_name; \nExample: \nWITH RECURSIVE Subordinates AS ( \n  SELECT id, name, manager_id FROM Employees WHERE id = 1 -- Top manager \n  UNION ALL \n  SELECT e.id, e.name, e.manager_id \n  FROM Employees e \n  JOIN Subordinates s ON e.manager_id = s.id \n) \nSELECT * FROM Subordinates; \n\u2705 This will return all employees working under manager ID 1, even indirectly. \n \n2. Window Functions \nThese functions look at other rows in the result without grouping them. Useful when you \nwant to compare each row with others. \nEveryday Use Case: \n\"Show each employee's salary along with the previous and next employee's salary.\" \nKey Functions: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 13, "text": "\uf0b7 \nLAG(column) \u2013 Looks before current row \n\uf0b7 \nLEAD(column) \u2013 Looks after current row \n\uf0b7 \nNTILE(n) \u2013 Divides into n equal groups (for percentiles/quartiles) \n\uf0b7 \nRANK(), DENSE_RANK(), ROW_NUMBER() \u2013 Ranking logic \nExample: \nSELECT name, salary, \n       LAG(salary) OVER (ORDER BY salary) AS prev_salary, \n       LEAD(salary) OVER (ORDER BY salary) AS next_salary \nFROM Employees; \n \n3. Working with JSON in SQL \nModern databases allow storing and querying JSON data inside SQL columns (especially \nuseful in dynamic or semi-structured data). \nPostgreSQL: \nSELECT data->>'name' AS name FROM orders WHERE data->>'status' = 'shipped'; \nMySQL: \nSELECT JSON_EXTRACT(data, '$.name') AS name FROM orders; \n\ud83d\udd0d Here, data is a column containing JSON like: { \"name\": \"Laptop\", \"status\": \"shipped\" } \n \n4. Performance Optimization Techniques \nOptimizing your SQL queries can make your app faster, especially for large data. \na. Indexing \n\uf0b7 \nLike a book index: helps locate rows faster \n\uf0b7 \nUseful for WHERE, JOIN, and ORDER BY \nCREATE INDEX idx_salary ON Employees(salary); \nb. Query Refactoring \n\uf0b7 \nAvoid SELECT * \u2192 only select needed columns \n\uf0b7 \nUse EXISTS instead of IN when subquery is large \n\uf0b7 \nApply filters early (use WHERE before GROUP BY) \nc. Execution Plan \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 14, "text": "Use EXPLAIN to understand how the database runs your query: \nEXPLAIN SELECT * FROM Employees WHERE department_id = 3; \n \n5. Stored Procedures & Functions (Simplified) \nStored Procedures = SQL scripts stored in the database that can be reused. Like a saved \nfunction. \nExample with Loop: \nDELIMITER // \nCREATE PROCEDURE GiveBonus() \nBEGIN \n  DECLARE done INT DEFAULT FALSE; \n  DECLARE emp_id INT; \n  DECLARE emp_cursor CURSOR FOR SELECT id FROM Employees; \n  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE; \n \n  OPEN emp_cursor; \n  read_loop: LOOP \n    FETCH emp_cursor INTO emp_id; \n    IF done THEN \n      LEAVE read_loop; \n    END IF; \n    UPDATE Employees SET salary = salary + 5000 WHERE id = emp_id; \n  END LOOP; \n  CLOSE emp_cursor; \nEND // \nDELIMITER ; \n\u2705 This procedure gives a \u20b95000 bonus to all employees. \n \n6. Importing/Exporting Data \nMoving data between CSV files and SQL is common in real projects. \nMySQL: \nLOAD DATA INFILE '/path/file.csv' \nINTO TABLE Employees \nFIELDS TERMINATED BY ',' \nLINES TERMINATED BY '\\n' \nIGNORE 1 ROWS; \nPostgreSQL: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 15, "text": "COPY Employees(name, salary) \nFROM '/path/file.csv' \nDELIMITER ',' \nCSV HEADER; \n \n7. Role-Based Access Control (Security Basics) \nSQL lets you give different permissions to different users. \nExample: \nGRANT SELECT, INSERT ON Employees TO 'analyst'; \nREVOKE DELETE ON Employees FROM 'analyst'; \n\u2705 'analyst' can view and add data, but can't delete anything. \n \n8. Star vs Snowflake Schema  \nUsed in Data Warehouses & Reporting Tools. \nStar Schema: \n\uf0b7 \nOne central fact table (e.g., Sales) \n\uf0b7 \nLinked to dimension tables (Customer, Product) \n\uf0b7 \nEasy to query, faster for reporting \nSnowflake Schema: \n\uf0b7 \nDimensions are normalized \n\uf0b7 \nLess redundancy but more joins \n \n9. OLTP vs OLAP (Database Types Simplified) \nFeature \nOLTP \nOLAP \n              Purpose \nDaily transactions \nData analysis \n              Design \nHighly normalized \ntables \nDenormalized \nschema \n             Examples \nBanking, eCommerce Reporting,Data \nWarehouse \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "\ud83c\udfaf INTERVIEW & PLACEMENT \n \n\ud83d\udd39 Basic Level (Entry / Fresher) \n1. What is SQL? \nStructured Query Language used to interact with relational databases. \n2. What is the difference between WHERE and HAVING? \nWHERE filters rows before aggregation, HAVING filters after aggregation. \n3. What is a Primary Key? \nA unique identifier for each row in a table. Cannot contain NULL values. \n4. Difference between INNER JOIN and LEFT JOIN? \nINNER JOIN: Returns matched rows only. \nLEFT JOIN: Returns all rows from the left table, even if no match. \n5. How do you handle NULLs in SQL? \nUse IS NULL, IS NOT NULL, COALESCE(), IFNULL(), NULLIF(). \n6. What is a Foreign Key? \nIt links two tables by referring to the primary key of another table. \n7. What is normalization? \nProcess of organizing data to reduce redundancy and improve integrity. \n8. What is denormalization? \nCombining tables to improve read performance by reducing joins. \n9. What does the DISTINCT keyword do? \nRemoves duplicate rows from the result set. \n10. What is the use of LIMIT or TOP? \nUsed to limit the number of rows returned by a query. \n\ud83d\udd39 Intermediate Level \n11. What are aggregate functions? \nFunctions like SUM(), AVG(), COUNT(), MAX(), MIN(). \n12. What is a subquery? \nA query nested inside another query. \n13. What is the difference between UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey impro", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "een UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey improve the speed of data retrieval. \n16. What is a view? \nA virtual table based on the result-set of a query. \n17. What are window functions? \nFunctions like RANK(), ROW_NUMBER() that work across rows. \n18. Difference between RANK() and DENSE_RANK()? \nRANK() skips ranks on ties, DENSE_RANK() does not. \n19. What is a CTE (Common Table Expression)? \nA temporary result set defined within the execution scope of a query. \n20. Explain ACID properties. \nAtomicity, Consistency, Isolation, Durability - ensures reliable transactions. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": "21. What is a composite key? \nA primary key made of multiple columns. \n22. Difference between DELETE and TRUNCATE? \nDELETE can be conditional and logs row-by-row deletion; TRUNCATE removes all rows \nfaster without logging each deletion. \n23. What is a surrogate key? \nA unique identifier for an entity that is not derived from application data. \n24. What is referential integrity? \nEnsures foreign key values match primary key values in the referenced table. \n25. How does EXISTS differ from IN? \nEXISTS stops on first match; IN evaluates all results. \n26. How do you use GROUP BY with multiple columns? \nYou can group by multiple columns by separating them with commas. \n27. Can we use ORDER BY with GROUP BY? \nYes. GROUP BY groups the data; ORDER BY sorts the grouped results. \n28. What is a scalar subquery? \nA subquery that returns exactly one value. \n29. What are correlated subqueries? \nSubqueries that refer to columns from the outer query. \n30. What is the use of ISNULL() or IFNULL()? \nTo replace NULL values with custom values. \n\ud83d\udd39 Advanced Level \n31. What are triggers in SQL? \nProcedures that automatically execute on certain events. \n32. What are stored procedures? \nReusable blocks of SQL statements stored in the database. \n33. What is the use of EXPLAIN or EXPLAIN PLAN? \nTo understand how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *,", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": " how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *, and use EXPLAIN to analyze. \n36. Difference between clustered and non-clustered index? \nClustered index determines row order in the table; non-clustered does not. \n37. Difference between OLTP and OLAP systems? \nOLTP: Online Transaction Processing (day-to-day operations). \nOLAP: Online Analytical Processing (data analysis and reporting). \n38. What are materialized views? \nStored query results that can be refreshed periodically. \n39. How do you implement pagination in SQL? \nUsing LIMIT and OFFSET or ROW_NUMBER() for custom logic. \n40. How do you handle duplicate rows? \nUsing ROW_NUMBER() or DISTINCT or CTEs with filtering. \n41. What are the different types of joins? \nINNER, LEFT, RIGHT, FULL OUTER, CROSS JOIN, SELF JOIN. \n42. What is a CROSS JOIN? \nReturns Cartesian product of two tables. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 18, "text": "43. Can you sort by an alias in SQL? \nYes, you can use the alias name in the ORDER BY clause. \n44. What is the difference between SQL and NoSQL? \nSQL is relational and uses tables. NoSQL is non-relational and uses documents, key-\nvalue pairs, etc. \n45. What are the common data types in SQL? \nINT, VARCHAR, DATE, BOOLEAN, DECIMAL, TEXT. \n46. Can a table have multiple foreign keys? \nYes, a table can reference multiple other tables using foreign keys. \n47. What happens if you violate a foreign key constraint? \nThe query fails with an integrity constraint violation. \n48. How can you change a column datatype in SQL? \nUsing ALTER TABLE table_name MODIFY column_name new_datatype; \n49. What are NULL-safe operators? \nOperators like <=> in MySQL allow safe comparison with NULL. \n50. How would you detect and remove duplicate records? \nUsing CTE and ROW_NUMBER() to filter duplicates. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 19, "text": "Real Company SQL Questions \nGoogle \n\uf0b7 \nSecond Highest Salary \nSELECT MAX(salary) AS SecondHighest \nFROM Employees \nWHERE salary < (SELECT MAX(salary) FROM Employees); \n\uf0b7 \nRemove Duplicate Emails Using ROW_NUMBER() \nWITH RankedEmails AS ( \n  SELECT *, ROW_NUMBER() OVER (PARTITION BY email ORDER BY id) \nAS rn \n  FROM Users \n) \nDELETE FROM RankedEmails WHERE rn > 1; \n\uf0b7 \nEmployees Earning More Than Average Salary \nSELECT name, salary \nFROM Employees \nWHERE salary > (SELECT AVG(salary) FROM Employees); \nAmazon \n\uf0b7 \nCustomers Who Ordered in Every Month \nSELECT customer_id \nFROM Orders \nGROUP BY customer_id \nHAVING COUNT(DISTINCT MONTH(order_date)) = 12; \n\uf0b7 \nTop 3 Earners in Each Department \nSELECT * \nFROM ( \n  SELECT *, DENSE_RANK() OVER (PARTITION BY department_id \nORDER BY salary DESC) AS rank \n  FROM Employees \n) ranked \nWHERE rank <= 3; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 20, "text": "\uf0b7 \nFind Returning Users Using LAG \nSELECT user_id, order_date, \n       LAG(order_date) OVER (PARTITION BY user_id ORDER BY \norder_date) AS previous_order \nFROM Orders; \nTCS \n\uf0b7 \nEmployees Joined in Last 6 Months \nSELECT * FROM Employees \nWHERE join_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH); \n\uf0b7 \nManager-Reportee Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n\uf0b7 \nDepartment with Highest Average Salary \nSELECT department_id \nFROM Employees \nGROUP BY department_id \nORDER BY AVG(salary) DESC \nLIMIT 1; \nFlipkart \n\uf0b7 \nTop 5 Selling Products by Revenue \nSELECT product_id, SUM(price * quantity) AS revenue \nFROM Orders \nGROUP BY product_id \nORDER BY revenue DESC \nLIMIT 5; \n\uf0b7 \nUsers with More Than 3 Failed Transactions \nSELECT user_id \nFROM Transactions \nWHERE status = 'FAILED' \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 21, "text": "GROUP BY user_id \nHAVING COUNT(*) > 3; \n\uf0b7 \nOrders Not Yet Shipped \nSELECT * \nFROM Orders \nWHERE status = 'PLACED' AND shipped_date IS NULL; \nSQL Problem-Solving Round \n \n\uf0b7 \nNth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET N-1; \n\uf0b7 \nDuplicate Emails \nSELECT email, COUNT(*) \nFROM Users \nGROUP BY email \nHAVING COUNT(*) > 1; \n\uf0b7 \nTop Earner per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, RANK() OVER (PARTITION BY department_id ORDER BY \nsalary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\uf0b7 \nCustomers Who Never Ordered \nSELECT c.customer_id, c.name \nFROM Customers c \nLEFT JOIN Orders o ON c.customer_id = o.customer_id \nWHERE o.order_id IS NULL; \n\uf0b7 \nEmployees Hired in the Last Month \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 22, "text": "SELECT * FROM Employees \nWHERE hire_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 \nMONTH) AND CURDATE(); \n\uf0b7 \nUser Order Summary \nSELECT user_id, COUNT(*) AS order_count, SUM(total_amount) AS \ntotal_spent \nFROM Orders \nGROUP BY user_id; \n\uf0b7 \n7-Day Rolling Login Count \nSELECT user_id, login_date, \n       COUNT(*) OVER ( \n         PARTITION BY user_id ORDER BY login_date \n         ROWS BETWEEN 6 PRECEDING AND CURRENT ROW \n       ) AS seven_day_logins \nFROM Logins; \n\uf0b7 \nFunnel Drop-off Analysis \nSELECT stage, COUNT(DISTINCT user_id) AS user_count \nFROM Funnel \nGROUP BY stage \nORDER BY stage; \n\uf0b7 \nAverage Time Between Orders \nSELECT user_id, AVG(DATEDIFF(order_date, LAG(order_date) OVER \n(PARTITION BY user_id ORDER BY order_date))) AS \navg_days_between_orders \nFROM Orders; \n\uf0b7 \nSelf Join for Employee Manager Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 1, "text": "React Mastery Path  \n \nPhase 1: React Fundamentals \n1. JSX (JavaScript XML) \n\uf0b7 \nWhat: A syntax extension for JavaScript that looks like HTML and is used to describe \nUI structure in React. \n\uf0b7 \nWhy Important: Enables declarative UI creation and readable component structure. \n\uf0b7 \nUnder the Hood: JSX is transpiled to React.createElement() by Babel, which builds \na virtual DOM tree. \n\uf0b7 \nUsed in Real Apps: Defining component UI layout. \n\uf0b7 \nExample: \n\uf0b7 \nconst Welcome = () => <h1>Hello, SafeWeb AI User!</h1>; \n\uf0b7 \nHands-On Task: Create a Header, Footer, and Landing JSX layout. \n\uf0b7 \nInterview Question: What happens to JSX during the build process? \n\uf0b7 \nSafeWeb AI Use: Structure landing pages, hero sections, or onboarding screens. \n2. Components (Functional & Class) \n\uf0b7 \nWhat: Independent, reusable pieces of UI. \n\uf0b7 \nWhy Important: Encapsulates logic and markup for reuse and readability. \n\uf0b7 \nUnder the Hood: Each component maintains its own lifecycle and props/context \nhandling. \n\uf0b7 \nUsed in Real Apps: Every UI block (Navbar, Card, Form) is a component. \n\uf0b7 \nExample: \n\uf0b7 \nfunction Card(props) { \n\uf0b7 \n  return <div className=\"card\">{props.content}</div>; \n\uf0b7 \n} \n\uf0b7 \nHands-On Task: Build a FeatureCard component for highlighting SafeWeb AI \nfeatures. \n\uf0b7 \nInterview Question: Difference between functional and class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables c", "file_name": "React Notes.pdf"}, {"page": 1, "text": "nd class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables communication between components. \n\uf0b7 \nUnder the Hood: Props are passed as parameters to functions. \n\uf0b7 \nUsed in Real Apps: Passing user info, config, styles. \n\uf0b7 \nExample: \n\uf0b7 \nconst Greeting = ({ name }) => <h2>Hello, {name}</h2>; \n\uf0b7 \nHands-On Task: Pass site scan results from parent to child. \n", "file_name": "React Notes.pdf"}, {"page": 2, "text": "\uf0b7 \nInterview Question: Can a child modify props? \n\uf0b7 \nSafeWeb AI Use: Show user-specific security reports. \n4. State \n\uf0b7 \nWhat: A built-in object used to hold dynamic data. \n\uf0b7 \nWhy Important: Controls component behavior over time. \n\uf0b7 \nUnder the Hood: React uses useState to store and re-render components on update. \n\uf0b7 \nUsed in Real Apps: Handling form inputs, toggles, modals. \n\uf0b7 \nExample: \n\uf0b7 \nconst [email, setEmail] = useState(''); \n\uf0b7 \nHands-On Task: Build a login form managing email/password state. \n\uf0b7 \nInterview Question: How does state cause a re-render? \n\uf0b7 \nSafeWeb AI Use: Manage user input and scan configuration. \n5. Event Handling \n\uf0b7 \nWhat: Listening and responding to user events. \n\uf0b7 \nWhy Important: Powers interactivity. \n\uf0b7 \nUnder the Hood: Synthetic event system based on native events. \n\uf0b7 \nUsed in Real Apps: Form submission, buttons, toggles. \n\uf0b7 \nExample: \n\uf0b7 \n<button onClick={handleScan}>Start Scan</button> \n\uf0b7 \nHands-On Task: Add a \u201cStart Scan\u201d button with click handler. \n\uf0b7 \nInterview Question: What is a synthetic event? \n\uf0b7 \nSafeWeb AI Use: Trigger a website scan. \n6. Conditional Rendering \n\uf0b7 \nWhat: Rendering different UI based on conditions. \n\uf0b7 \nWhy Important: Enhances UX by showing relevant data. \n\uf0b7 \nUnder the Hood: Simple JavaScript logic (ternaries, &&, if). \n\uf0b7 \nUsed in Real Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to impl", "file_name": "React Notes.pdf"}, {"page": 2, "text": "al Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to implement conditional rendering? \n\uf0b7 \nSafeWeb AI Use: Show different UI during scan progress. \n7. Lists and Keys \n\uf0b7 \nWhat: Rendering multiple elements using map() with unique key props. \n\uf0b7 \nWhy Important: Efficient rendering and reconciliation. \n\uf0b7 \nUnder the Hood: Keys help React identify changed, added, or removed items. \n\uf0b7 \nUsed in Real Apps: Listing scan results, history logs. \n\uf0b7 \nExample: \n", "file_name": "React Notes.pdf"}, {"page": 3, "text": "\uf0b7 \n{urls.map((url) => <li key={url}>{url}</li>)} \n\uf0b7 \nHands-On Task: Display a list of scanned URLs. \n\uf0b7 \nInterview Question: Why are keys important in lists? \n\uf0b7 \nSafeWeb AI Use: Show scanned website list. \n8. useEffect \n\uf0b7 \nWhat: Side effects like data fetching, subscriptions. \n\uf0b7 \nWhy Important: Handles operations outside render. \n\uf0b7 \nUnder the Hood: Scheduled after paint, cleanup via return function. \n\uf0b7 \nUsed in Real Apps: Fetching scan results, triggering alerts. \n\uf0b7 \nExample: \n\uf0b7 \nuseEffect(() => { fetchData(); }, []); \n\uf0b7 \nHands-On Task: Fetch dummy scan data on load. \n\uf0b7 \nInterview Question: How does the dependency array work? \n\uf0b7 \nSafeWeb AI Use: Load recent scan history on dashboard. \n9. Hooks (Intro) \n\uf0b7 \nWhat: Special functions to use React features in functional components. \n\uf0b7 \nWhy Important: Replaces classes with reusable logic. \n\uf0b7 \nUnder the Hood: Hooks use internal closures and React's fiber scheduler. \n\uf0b7 \nUsed in Real Apps: All stateful or side-effect components. \n\uf0b7 \nExample: useState, useEffect \n\uf0b7 \nHands-On Task: Use useState and useEffect together. \n\uf0b7 \nInterview Question: Why can\u2019t hooks be called conditionally? \n\uf0b7 \nSafeWeb AI Use: State and side effect logic. \n10. Forms \n\uf0b7 \nWhat: Collecting and managing user input. \n\uf0b7 \nWhy Important: Central for user interaction. \n\uf0b7 \nUnder the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 ", "file_name": "React Notes.pdf"}, {"page": 3, "text": "r the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 \nHands-On Task: Build scan request form. \n\uf0b7 \nInterview Question: Difference between controlled and uncontrolled components? \n\uf0b7 \nSafeWeb AI Use: Get website input from users. \n11. Context API \n\uf0b7 \nWhat: Global state manager for passing data without prop drilling. \n\uf0b7 \nWhy Important: Simplifies state sharing. \n\uf0b7 \nUnder the Hood: Uses React context provider/consumer. \n\uf0b7 \nUsed in Real Apps: Theme, auth, locale. \n", "file_name": "React Notes.pdf"}, {"page": 4, "text": "\uf0b7 \nExample: \n\uf0b7 \nconst UserContext = React.createContext(); \n\uf0b7 \nHands-On Task: Create AuthContext. \n\uf0b7 \nInterview Question: How does context re-render consumers? \n\uf0b7 \nSafeWeb AI Use: Share user data across pages. \n12. React Router \n\uf0b7 \nWhat: Routing library to handle navigation. \n\uf0b7 \nWhy Important: Enables multi-page apps. \n\uf0b7 \nUnder the Hood: Uses HTML5 history API. \n\uf0b7 \nUsed in Real Apps: Page navigation. \n\uf0b7 \nExample: \n\uf0b7 \n<Route path=\"/scan\" element={<Scan />} /> \n\uf0b7 \nHands-On Task: Setup Login, Dashboard, Scan routes. \n\uf0b7 \nInterview Question: Difference between browser and hash routers? \n\uf0b7 \nSafeWeb AI Use: Navigate between sections. \n13. Custom Hooks \n\uf0b7 \nWhat: User-defined reusable hook functions. \n\uf0b7 \nWhy Important: Abstraction and reuse of logic. \n\uf0b7 \nUnder the Hood: Functions that call other hooks. \n\uf0b7 \nUsed in Real Apps: Reusable logic blocks. \n\uf0b7 \nExample: useAuth, useScanStatus \n\uf0b7 \nHands-On Task: Create useAuthGuard. \n\uf0b7 \nInterview Question: Naming rule for hooks? \n\uf0b7 \nSafeWeb AI Use: Custom logic management. \n14. useMemo & useCallback \n\uf0b7 \nWhat: Memoization hooks to optimize performance. \n\uf0b7 \nWhy Important: Prevents unnecessary recalculations or re-renders. \n\uf0b7 \nUnder the Hood: Caches previous return values. \n\uf0b7 \nUsed in Real Apps: Expensive operations, function refs. \n\uf0b7 \nExample: \n\uf0b7 \nconst memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. ", "file_name": "React Notes.pdf"}, {"page": 4, "text": "st memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. \n15. Refs and useRef \n\uf0b7 \nWhat: Direct DOM access or persist values across renders. \n\uf0b7 \nWhy Important: Needed for focus, timers, scroll. \n\uf0b7 \nUnder the Hood: Maintains mutable .current reference. \n", "file_name": "React Notes.pdf"}, {"page": 5, "text": "\uf0b7 \nUsed in Real Apps: Form fields, animations. \n\uf0b7 \nExample: inputRef.current.focus() \n\uf0b7 \nHands-On Task: Focus input on mount. \n\uf0b7 \nInterview Question: When to use refs? \n\uf0b7 \nSafeWeb AI Use: Scroll to report. \n16. Error Boundaries \n\uf0b7 \nWhat: Catch and handle render errors. \n\uf0b7 \nWhy Important: Prevent crashes. \n\uf0b7 \nUnder the Hood: Uses lifecycle methods (componentDidCatch). \n\uf0b7 \nUsed in Real Apps: Wrapping entire app/components. \n\uf0b7 \nExample: Class-based error catcher. \n\uf0b7 \nHands-On Task: Create ErrorBoundary wrapper. \n\uf0b7 \nInterview Question: Can hooks catch errors? \n\uf0b7 \nSafeWeb AI Use: Catch scan/report failures. \n17. Code Splitting \n\uf0b7 \nWhat: Load JS bundles on demand. \n\uf0b7 \nWhy Important: Reduces initial load. \n\uf0b7 \nUnder the Hood: Uses React.lazy and dynamic import. \n\uf0b7 \nUsed in Real Apps: Lazy-loading routes/pages. \n\uf0b7 \nExample: \n\uf0b7 \nconst Scan = React.lazy(() => import('./Scan')); \n\uf0b7 \nHands-On Task: Split heavy components. \n\uf0b7 \nInterview Question: Difference between lazy and suspense? \n\uf0b7 \nSafeWeb AI Use: Speed up first load. \n18. Higher Order Components \n\uf0b7 \nWhat: Functions returning components. \n\uf0b7 \nWhy Important: Reusable logic decorators. \n\uf0b7 \nUnder the Hood: Functional pattern. \n\uf0b7 \nUsed in Real Apps: Permissions, tracking. \n\uf0b7 \nExample: withLogging(Component) \n\uf0b7 \nHands-On Task: Create HOC for authentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Impo", "file_name": "React Notes.pdf"}, {"page": 5, "text": "uthentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Important: Flexible pattern. \n\uf0b7 \nUnder the Hood: Functions as children. \n\uf0b7 \nUsed in Real Apps: Sliders, animations. \n", "file_name": "React Notes.pdf"}, {"page": 6, "text": "\uf0b7 \nExample: <DataProvider render={(data) => <Chart data={data} />} \n\uf0b7 \nHands-On Task: Create MouseTracker. \n\uf0b7 \nInterview Question: Downsides of render props? \n\uf0b7 \nSafeWeb AI Use: Share UI logic. \n20. State Management \n\uf0b7 \nWhat: Tools to manage complex app state. \n\uf0b7 \nWhy Important: Scalability. \n\uf0b7 \nUnder the Hood: Central store and dispatch pattern. \n\uf0b7 \nUsed in Real Apps: Redux, Zustand. \n\uf0b7 \nExample: useReducer, Redux store \n\uf0b7 \nHands-On Task: Manage scan logs in global state. \n\uf0b7 \nInterview Question: Redux vs context? \n\uf0b7 \nSafeWeb AI Use: Global scan/auth state. \n21. Axios / Fetch \n\uf0b7 \nWhat: HTTP libraries to talk to APIs. \n\uf0b7 \nWhy Important: Core for data interaction. \n\uf0b7 \nUnder the Hood: Promise-based APIs. \n\uf0b7 \nUsed in Real Apps: Backend communication. \n\uf0b7 \nExample: axios.get('/api/report') \n\uf0b7 \nHands-On Task: Fetch scan results. \n\uf0b7 \nInterview Question: Axios vs fetch? \n\uf0b7 \nSafeWeb AI Use: Talk to scan API. \n22. Folder Structure \n\uf0b7 \nWhat: Organizing codebase. \n\uf0b7 \nWhy Important: Maintainability. \n\uf0b7 \nUnder the Hood: Logical separation. \n\uf0b7 \nUsed in Real Apps: Feature/domain-based. \n\uf0b7 \nExample: src/components, src/services \n\uf0b7 \nHands-On Task: Restructure SafeWeb AI project. \n\uf0b7 \nInterview Question: Best practices for large apps? \n\uf0b7 \nSafeWeb AI Use: Scale codebase. \n23. PropTypes / TypeScript \n\uf0b7 \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.p", "file_name": "React Notes.pdf"}, {"page": 6, "text": " \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.propTypes = { name: PropTypes.string } \n", "file_name": "React Notes.pdf"}, {"page": 7, "text": "\uf0b7 \nHands-On Task: Add PropTypes to core components. \n\uf0b7 \nInterview Question: TS vs PropTypes? \n\uf0b7 \nSafeWeb AI Use: Ensure correct data handling. \n24. Testing (Jest + RTL) \n\uf0b7 \nWhat: Automated validation of logic and UI. \n\uf0b7 \nWhy Important: Prevent regressions. \n\uf0b7 \nUnder the Hood: Simulates components. \n\uf0b7 \nUsed in Real Apps: CI pipelines. \n\uf0b7 \nExample: expect(getByText('Welcome')).toBeInTheDocument() \n\uf0b7 \nHands-On Task: Test login and scan page. \n\uf0b7 \nInterview Question: Unit vs integration test? \n\uf0b7 \nSafeWeb AI Use: Bug-free reliability. \n \n \nReact Interview Questions & Precise Answers \n \n1. What happens to JSX during the build process? \no JSX is transpiled by Babel into React.createElement() calls that build the \nvirtual DOM. \n2. Difference between functional and class components? \no Functional: Simple functions using hooks. Class: ES6 classes using lifecycle \nmethods. \n3. Can a child modify props? \no No. Props are read-only; only the parent can change them. \n4. How does state cause a re-render? \no Calling setState triggers React\u2019s scheduler to re-render that component with \nupdated state. \n5. What is a synthetic event? \no A cross-browser wrapper around native events, provided by React for \nconsistency. \n6. Ways to implement conditional rendering? \no \nif/else, ternary ? :, logical AND &&, IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useE", "file_name": "React Notes.pdf"}, {"page": 7, "text": ", IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useEffect? \no It determines when the effect runs. Empty array means run once. Include variables \nto trigger rerun when they change. \n9. Why can\u2019t hooks be called conditionally? \n", "file_name": "React Notes.pdf"}, {"page": 8, "text": "o Because React relies on the order of hooks. Conditional calls break this order, \ncausing bugs. \n10. Difference between controlled and uncontrolled components? \no Controlled: state-driven. Uncontrolled: DOM-driven (using refs). \n11. How does context re-render consumers? \no When context value changes, all consumers using that context re-render. \n12. Difference between browser and hash routers? \no BrowserRouter uses HTML5 history API. HashRouter uses URL hash (#) for \nrouting. \n13. Naming rule for custom hooks? \no Must start with use to let React track them internally. \n14. When does useMemo recalculate? \no When any dependency in its dependency array changes. \n15. When to use refs? \no When you need direct DOM access or to persist values without triggering re-\nrenders. \n16. Can hooks catch errors? \no No. Only class-based error boundaries can catch render-time errors. \n17. Difference between lazy and suspense? \no \nlazy dynamically imports components. Suspense wraps lazy-loaded components \nto handle loading fallback. \n18. Compare HOCs with hooks? \no HOCs wrap components for reuse. Hooks reuse logic inside functional \ncomponents. \n19. Downsides of render props? \no Can lead to deeply nested structures (callback hell). \n20. Redux vs Context? \no Redux is for complex/global state with middleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps fo", "file_name": "React Notes.pdf"}, {"page": 8, "text": "dleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps folder structure? \no Feature-based or domain-based structure with clear separation of concerns. \n23. TypeScript vs PropTypes? \no TypeScript checks types at compile-time. PropTypes check at runtime and are \nlimited. \n24. Unit vs integration test? \no Unit: test single component/function. Integration: test interactions between \ncomponents. \n \n \n", "file_name": "React Notes.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "Global Paid Developer & Mentorship Programs  \n1. Paid Developer Programs  \n  \nProgram  \nLocation  \nDuration  \nPay (INR)  \nApply Timeline  \nLinkedIn REACH  \nHybrid (USA)  \n1-5 years  \nRs.1.16-1.41 Cr/year    \n          June  \nMicrosoft LEAP  \nOn-site (USA/Canada)  16 weeks  \nRs.82-96 L/year  \n         August   \nAdobe Digital Academy  \nOn-site (USA)  \n6-9 months  \nStipend + Paid Apprenticeship  \n       September  \nGoogle Summer of Code (  GSoC)Remote  \n12+ weeks  \nRs.1.25-2.5 L  \n          March   \nMLH Fellowship  \nRemote  \n12 weeks  \nRs.4.1 L  \n     March- April  \nLinux Foundation Mentorsh ip (LFX)Remote  \n3-24 weeks  \nRs.2.5-5 L  \n     Feb-July (varies)  \n  \n2. Application Links   \n1. LinkedIn REACH: https://careers.linkedin.com/reach  \n2. Microsoft LEAP:  https://leap.microsoft.com  \n3. Adobe Digital Academy: https://www.adobe.com/corporate-\nresponsibility/creativity/digitalacademy  \n4. Google Summer of Code (GSoC): https://summerofcode.withgoogle.com  \n5. MLH Fellowship: https://fellowship.mlh.io/  \n6. Linux Foundation Mentorship (LFX): https://lfx.linuxfoundation.org/mentorship/  \n3. Paid Remote Mentorship Opportunities  \n1. Google Summer of Code (Mentor)  \nDetails: Experienced developers can apply as paid mentors for open-source projects.  \nApply: https://summerofcode.withgoogle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-sou", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "gle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-source project maintainers or contributors can apply to host/mentor projects. Apply: \nhttps://lfx.linuxfoundation.org/mentorship/  \n  \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Ecommerce  Mobility  \nCompanies  \nCloud  \nServices/  \nSaaS  \nCRM/Workflow \nManagement  \nTravel  \nPayments/  \nFintech  \nInvestment Banks/  \nHedge Funds  \nFlipkart  \nOla  \nVmWare  \nZoho  \nAirbnb  \nPaypal  \nDE Shaw  \nMyntra  \nUber  \nRedHat  \nSalesforce  \nOYO  \nVisa  \nGoldman Sachs  \nTesco  \nMeru  \nOCI  \nEngageBay  \nMakeMyTrip  \nPhonepe  \nWorld Quant  \nWalmart  \nZoomcar  \nSAP Labs  \nServiceNow  \nExpedia  \nPaytm  \nArcessium  \nTarget  \nRapido  \nIBM  \n \nBooking.com  BharatPe  \nIntuit  \nShopsy  \n \nBrowserStack   \nAgoda  \nCred  \nJP Morgan  \nBloomerang  \n \nNutanix  \n \nGroupon  \nSlice  \nMorgan Stanley  \nCult.fit  \n \nHp  \n \n \nRazorpay  \nWells Fargo  \nAJIO  \n \nNetApp  \n \n \nZeta  \nDruva  \nPharmaeasy   \nCohesity  \n \n \nRupeek  \n \nMeesho  \n \nTekion Corp  \n \n \nClearTax  \n \nLowe\u2019s  \n  \nRubrik  \n  \n  \nJupiter  \n  \nCompanies  \n \nMost High Paying Remote Jobs and few On-site jobs (Use FILTERS) \n1. https://tinyparticlejobs.com/ \n2. https://www.remoterocketship.com \n3. https://nodesk.co/remote-jobs/ \n4. https://wellfound.com/jobs \n5. https://weworkremotely.com/categories/remote-programming-jobs \n6. https://stackoverflow.com/jobs \n7. https://jobs.github.com \n8. https://www.linkedin.com/jobs/ \n9. https://www.toptal.com/ \n10. https://remoteok.io/remote-dev-jobs \n \nFew very high paying remote \u2013  \nSpreeTail \nBlink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Blink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": " \n \nRICH PEOPLE USES / BILLIONAIRES LINKS \n Investment & Startup Platforms \n AngelList Ventures  \u2014 https://angel.co/venture \n MicroVentures \u2014 https://microventures.com/ \n ToptalSeedInvest \u2014 https://www.seedinvest.com/ \n Product Hunt Makers -- https://www.producthunt.com/makers \n Y Cobinator Startup School \u2013 https://www.startupschool.org/ \n      Premium Networking & Professional Platforms \n Lunchclub \u2014 https://lunchclub.com/ \n Shapr \u2014 https://www.shapr.co/ \n Toptal \u2014 https://www.toptal.com/ \n Tiger 21 (private network for investors) \u2014https://tiger21.com/ \n FoundersCard \u2014 https://founderscard.com/ \n      Exclusive Social & Community Platforms \n Clubhouse (invite-only audio network) \u2014 https://www.joinclubhouse.com/ \n Techstars Founders Slack (invite-only; search online to join) \n Various Venture Capital & Startup Discord communities (search Discord servers) \n     Conferences & Summits (for networking) \n TED \u2014 https://www.ted.com/ \n Web Summit -- https://websummit.com/ \n SXSW -- https://www.sxsw.com/ \n TechCrunch Disrupt \u2014 https://techcrunch.com/events/disrupt-sf-2024/ \n Forbes 30 Under 30 Summit \u2014https://www.forbes.com/30-under-30-summit/ \n     Private Family Office & Wealth Networks \n Family Office Club \u2014 https://familyoffices.com/ \n Opal Group \u2014 https://opalgroup.net/ \n \nEmails/Numbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLead", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": "mbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLeads \nVoilaNorbert, AngelList Talent, YCombinator Jobs, WellFound, Triplebyte, HackerRank Talent, Wiza \nLinkedIn Email Finder by Skrapp or Snov.io, Hunter for Chrome, Clearbit Reveal, Lusha Chrome \nExtension \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": " \n \nGeneral SQL Topics \n1. INTRODUCTION TO SQL \n\uf0b7 \nSQL: Structured Query Language, used to interact with relational databases. \n\uf0b7 \nRelational Database: Stores data in tables (rows & columns). \n\uf0b7 \nCommon RDBMS: MySQL, PostgreSQL, SQLite, Oracle, SQL Server. \n \n2. SQL DATA TYPES \n\uf0b7 \nINT: Integer numbers \n\uf0b7 \nVARCHAR(n): Variable-length string with a maximum of n characters \n\uf0b7 \nCHAR(n): Fixed-length string \n\uf0b7 \nDATE / DATETIME: Date or timestamp \n\uf0b7 \nDECIMAL(p, s): Exact numeric value with precision and scale \n\uf0b7 \nBOOLEAN: True or False \n\uf0b7 \nTEXT: Long-form string data \n \n3. BASIC SQL COMMANDS \n\u27a4 Create Table \nCREATE TABLE Employees ( \n  id INT PRIMARY KEY, \n  name VARCHAR(100), \n  salary INT, \n  department VARCHAR(50) \n); \n\u27a4 Insert \nINSERT INTO Employees (id, name, salary, department) \nVALUES (1, 'Alice', 60000, 'HR'); \n\u27a4 Select \nSELECT * FROM Employees; \nSELECT name, salary FROM Employees; \nSELECT * FROM Employees WHERE salary > 50000; \n\u27a4 Update \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 2, "text": "UPDATE Employees SET salary = 70000 WHERE id = 1; \n\u27a4 Delete \nDELETE FROM Employees WHERE id = 1; \n \n4. FILTERING DATA \n\u27a4 WHERE, AND, OR, NOT \nSELECT * FROM Employees \nWHERE department = 'HR' AND salary > 50000; \n\u27a4 IN, BETWEEN, LIKE \nSELECT * FROM Employees WHERE department IN ('HR', 'Sales'); \nSELECT * FROM Employees WHERE salary BETWEEN 40000 AND 70000; \nSELECT * FROM Employees WHERE name LIKE 'A%'; -- starts with A \n \n5. SORTING & LIMITING \nSELECT * FROM Employees ORDER BY salary DESC; \nSELECT * FROM Employees LIMIT 5; \n \n6. AGGREGATE FUNCTIONS \nSELECT COUNT(*) FROM Employees; \nSELECT AVG(salary) FROM Employees; \nSELECT SUM(salary), MAX(salary), MIN(salary) FROM Employees; \n \n7. GROUPING & FILTERING AGGREGATES \nSELECT department, AVG(salary) AS avg_salary \nFROM Employees \nGROUP BY department \nHAVING AVG(salary) > 50000; \n \n8. JOINS \n\u27a4 Syntax: \nSELECT e.name, d.name \nFROM Employees e \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 3, "text": "JOIN Departments d ON e.department_id = d.id; \n8.1. INNER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nINNER JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 Only matching department IDs shown. \n8.2. LEFT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All employees shown, even if no department. \n8.3. RIGHT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All departments shown, even if no employee. \n8.4. FULL OUTER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id \nUNION \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n \n9. SUBQUERIES \nUsed to embed one query inside another. \nSELECT name FROM Employees \nWHERE salary > ( \n  SELECT AVG(salary) FROM Employees \n); \n \n10. CONSTRAINTS \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 4, "text": "\uf0b7 \nPRIMARY KEY: Uniquely identifies each record \n\uf0b7 \nFOREIGN KEY: Links to primary key of another table \n\uf0b7 \nUNIQUE: Ensures all values in a column are different \n\uf0b7 \nNOT NULL: Disallows NULL values \n\uf0b7 \nCHECK: Ensures a condition is met \n \n11. NORMALIZATION  \n\uf0b7 \nProcess of organizing data to reduce redundancy and improve data integrity. \n\uf0b7 \n1NF: Atomic values \n\uf0b7 \n2NF: No partial dependencies \n\uf0b7 \n3NF: No transitive dependencies \n\uf0b7 \nEnsures data integrity and minimizes duplication. \n\ud83c\udfaf Why Normalize? \n\uf0b7 \nEliminate duplicate data \n\uf0b7 \nEnsure data consistency \n\uf0b7 \nImprove data structure for querying and updates \n \n\ud83d\udcda Normal Forms (NF) \n\u2705 1NF \u2013 First Normal Form \nRule: All values must be atomic (indivisible). \nFix: Remove repeating groups and store one value per cell. \nExample (Bad): \nID Name Phones \n1 Alice 1234, 5678 \nFix (1NF): \nID Name Phone \n1 Alice 1234 \n1 Alice 5678 \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 5, "text": "\u2705 2NF \u2013 Second Normal Form \nRule: Be in 1NF + No Partial Dependency on a composite key. \nFix: Move partially dependent data to a new table. \nExample: \nComposite key: (StudentID, CourseID) \nStudentID CourseID StudentName \nFix (2NF): \n\uf0b7 \nTable 1: StudentCourses(StudentID, CourseID) \n\uf0b7 \nTable 2: Students(StudentID, StudentName) \n \n\u2705 3NF \u2013 Third Normal Form \nRule: Be in 2NF + No transitive dependency. \nFix: Remove data that's indirectly dependent on the primary key. \nExample (Bad): \nEmpID Name DeptID DeptName \nFix (3NF): \n\uf0b7 \nTable 1: Employees(EmpID, Name, DeptID) \n\uf0b7 \nTable 2: Departments(DeptID, DeptName) \n \n\ud83e\udde0 When Not to Normalize? \n\uf0b7 \nFor read-heavy applications (analytics, reporting) \n\uf0b7 \nWhen query performance is more important than data integrity \n \n\u2705 Real-Life Analogy \n\uf0b7 \n1NF: Each house (record) has its own mailbox (cell), not a shared one \n\uf0b7 \n2NF: One key opens only one mailbox (no shared access) \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 6, "text": "\uf0b7 \n3NF: The key opens the right mailbox and not someone else\u2019s cabinet (no indirect \ndependencies) \n \n \n12. INDEXING \nIndexing is a powerful technique to speed up SELECT queries on large tables. \n\uf0b7 \nSpeeds up WHERE, JOIN, GROUP BY, and ORDER BY queries \n\uf0b7 \nBoosts search performance on large datasets. \n\uf0b7 \nAvoid on frequently updated or low-cardinality columns \n\uf0b7 \nUse EXPLAIN to test effectiveness \n\uf0b7 \nAvoid over-indexing (inserts & updates become slower). \n\u2705 Types \n\uf0b7 \nSingle-column Index \n \nCREATE INDEX idx_salary ON Employees(salary); \n\uf0b7 \nComposite Index \n \nCREATE INDEX idx_name_dept ON Employees(name, department);\n \n13. VIEWS \n\uf0b7 \nA view is a virtual table based on a query \n\uf0b7 \nThey do not store data. Use Materialized Views (if supported) for cached result. \n\uf0b7 \nSimplify complex queries. \n\uf0b7 \nEnhance security (restrict column access) \n\uf0b7 \nEnable reusable logic \n\u2705 Example \nCREATE VIEW HR_Employees AS \nSELECT name, salary \nFROM Employees \nWHERE department = 'HR'; \n \n \n14. TRANSACTIONS & ACID \nA Transaction is a logical unit of work consisting of one or more SQL statements. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 7, "text": "Use ROLLBACK; to undo changes before COMMIT;. \n\uf0b7 \nACID: \no \nAtomicity: All or none \no \nConsistency: Valid data state \no \nIsolation: No interference \no \nDurability: Permanent changes \n\u2705 Example \nBEGIN; \nUPDATE Accounts SET balance = balance - 100 WHERE id = 1; \nUPDATE Accounts SET balance = balance + 100 WHERE id = 2; \nCOMMIT; \n \n15. WINDOW FUNCTIONS \nWindow functions perform calculations across rows related to the current row \u2014 without collapsing \nthem like GROUP BY.  \nUsed for row-level calculations without grouping. \nUse cases : Leaderboards, Change Tracking, Tired analysis \nRANK(), DENSE_RANK(), ROW_NUMBER() \n\u2705 Example \nSELECT name, salary, \n  RANK() OVER (ORDER BY salary DESC) AS salary_rank \nFROM Employees; \n\ud83d\udd11 Popular Window Functions \n\uf0b7 \nROW_NUMBER(), RANK(), DENSE_RANK() \n\uf0b7 \nLAG(), LEAD() \n\uf0b7 \nNTILE(n) (for percentiles) \n \n16. COMMON TABLE EXPRESSIONS (CTEs) \nCTEs are temporary result sets used within queries \u2014 easier to read & maintain. \n\u2705 Syntax \nWITH HighEarners AS ( \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 8, "text": "  SELECT * FROM Employees WHERE salary > 50000 \n) \nSELECT name FROM HighEarners; \n\ud83e\udde0 Benefits \n\uf0b7 \nBreak complex queries into readable blocks \n\uf0b7 \nUse recursive CTEs for hierarchical data \n \n17. UNION vs UNION ALL \nSELECT name FROM Managers \nUNION \nSELECT name FROM Employees; -- Removes duplicates \n \nSELECT name FROM Managers \nUNION ALL \nSELECT name FROM Employees; -- Keeps duplicates \n \n18. SET OPERATIONS \nSELECT name FROM A \nINTERSECT \nSELECT name FROM B; \n \nSELECT name FROM A \nEXCEPT \nSELECT name FROM B; \n\uf0b7 \n\u26a0 Not supported in MySQL; supported in PostgreSQL/SQL Server. \n \n19. NULL Handling \nSELECT name, COALESCE(nickname, 'No Nick') FROM Users; \nSELECT NULLIF(salary, 0);  -- Returns NULL if salary = 0 \n\uf0b7 \nUse IS NULL / IS NOT NULL \n\uf0b7 \nCOALESCE(), IFNULL(), NULLIF() \n \n20. CASE Statements \nSELECT name, \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 9, "text": "CASE \n  WHEN salary > 70000 THEN 'High' \n  WHEN salary > 40000 THEN 'Medium' \n  ELSE 'Low' \nEND AS salary_level \nFROM Employees; \n \n21. Stored Procedures & Functions (Advanced) \nStored Procedures are saved SQL blocks that perform actions. \nFunctions return a single value. Use procedures for reusable logic. Use functions in SELECT, WHERE, or \nJOIN clauses \n\u2705 Procedure Example \nCREATE PROCEDURE GetHighEarners() \nBEGIN \n  SELECT * FROM Employees WHERE salary > 70000; \nEND; \n\u2705 Function Example \nCREATE FUNCTION TaxAmount(salary DECIMAL) \nRETURNS DECIMAL \nBEGIN \n  RETURN salary * 0.10; \nEND; \n \n \n22. Temporary Tables \nCREATE TEMPORARY TABLE Temp_Employees AS \nSELECT * FROM Employees WHERE department = 'HR'; \n \n23. Triggers (Advanced - Rare) \nCREATE TRIGGER before_insert_trigger \nBEFORE INSERT ON Employees \nFOR EACH ROW \nSET NEW.salary = IF(NEW.salary < 0, 0, NEW.salary); \n\uf0b7 \nUsed for validation, logging, auto-calculation. \n \n24. Data Definition vs Data Manipulation vs Data Control \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 10, "text": "\uf0b7 \nDDL (Definition): CREATE, ALTER, DROP \n\uf0b7 \nDML (Manipulation): SELECT, INSERT, UPDATE, DELETE \n\uf0b7 \nDCL (Control): GRANT, REVOKE \n\uf0b7 \nTCL (Transaction): COMMIT, ROLLBACK \n \nINTERVIEW QUERY PATTERNS \n\u27a4 Nth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET 1; -- 2nd highest \n\u27a4 Duplicate Rows \nSELECT name, COUNT(*) \nFROM Employees \nGROUP BY name \nHAVING COUNT(*) > 1; \n\u27a4 Same Salary Employees \nSELECT * FROM Employees \nWHERE salary IN ( \n  SELECT salary FROM Employees \n  GROUP BY salary \n  HAVING COUNT(*) > 1 \n); \n\u27a4 Employees with Max Salary Per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, \n         RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\u27a4 Self Join Example \nSELECT A.name AS Employee, B.name AS Manager \nFROM Employees A \nJOIN Employees B ON A.manager_id = B.id; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 11, "text": "\u27a4 EXISTS vs IN vs JOIN \n-- EXISTS \nSELECT name FROM Employees e \nWHERE EXISTS ( \n  SELECT 1 FROM Departments d WHERE d.id = e.department_id \n); \n-- IN \nSELECT name FROM Employees \nWHERE department_id IN (SELECT id FROM Departments); \n-- JOIN \nSELECT e.name, d.name FROM Employees e \nJOIN Departments d ON e.department_id = d.id; \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 12, "text": "Advanced SQL Topics \n \n1. Recursive CTEs (Made Simple) \nA Recursive CTE lets a query call itself, useful when working with hierarchies like employees \n& managers or categories & subcategories. \nEasy Analogy: \nThink of it like a loop in SQL. Start with one person (manager), then find their subordinates, then \nsubordinates of subordinates, and so on. \nSyntax: \nWITH RECURSIVE cte_name AS ( \n  SELECT ...  -- Starting point (anchor) \n  UNION ALL \n  SELECT ... FROM cte_name ... -- Repeat until done \n) \nSELECT * FROM cte_name; \nExample: \nWITH RECURSIVE Subordinates AS ( \n  SELECT id, name, manager_id FROM Employees WHERE id = 1 -- Top manager \n  UNION ALL \n  SELECT e.id, e.name, e.manager_id \n  FROM Employees e \n  JOIN Subordinates s ON e.manager_id = s.id \n) \nSELECT * FROM Subordinates; \n\u2705 This will return all employees working under manager ID 1, even indirectly. \n \n2. Window Functions \nThese functions look at other rows in the result without grouping them. Useful when you \nwant to compare each row with others. \nEveryday Use Case: \n\"Show each employee's salary along with the previous and next employee's salary.\" \nKey Functions: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 13, "text": "\uf0b7 \nLAG(column) \u2013 Looks before current row \n\uf0b7 \nLEAD(column) \u2013 Looks after current row \n\uf0b7 \nNTILE(n) \u2013 Divides into n equal groups (for percentiles/quartiles) \n\uf0b7 \nRANK(), DENSE_RANK(), ROW_NUMBER() \u2013 Ranking logic \nExample: \nSELECT name, salary, \n       LAG(salary) OVER (ORDER BY salary) AS prev_salary, \n       LEAD(salary) OVER (ORDER BY salary) AS next_salary \nFROM Employees; \n \n3. Working with JSON in SQL \nModern databases allow storing and querying JSON data inside SQL columns (especially \nuseful in dynamic or semi-structured data). \nPostgreSQL: \nSELECT data->>'name' AS name FROM orders WHERE data->>'status' = 'shipped'; \nMySQL: \nSELECT JSON_EXTRACT(data, '$.name') AS name FROM orders; \n\ud83d\udd0d Here, data is a column containing JSON like: { \"name\": \"Laptop\", \"status\": \"shipped\" } \n \n4. Performance Optimization Techniques \nOptimizing your SQL queries can make your app faster, especially for large data. \na. Indexing \n\uf0b7 \nLike a book index: helps locate rows faster \n\uf0b7 \nUseful for WHERE, JOIN, and ORDER BY \nCREATE INDEX idx_salary ON Employees(salary); \nb. Query Refactoring \n\uf0b7 \nAvoid SELECT * \u2192 only select needed columns \n\uf0b7 \nUse EXISTS instead of IN when subquery is large \n\uf0b7 \nApply filters early (use WHERE before GROUP BY) \nc. Execution Plan \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 14, "text": "Use EXPLAIN to understand how the database runs your query: \nEXPLAIN SELECT * FROM Employees WHERE department_id = 3; \n \n5. Stored Procedures & Functions (Simplified) \nStored Procedures = SQL scripts stored in the database that can be reused. Like a saved \nfunction. \nExample with Loop: \nDELIMITER // \nCREATE PROCEDURE GiveBonus() \nBEGIN \n  DECLARE done INT DEFAULT FALSE; \n  DECLARE emp_id INT; \n  DECLARE emp_cursor CURSOR FOR SELECT id FROM Employees; \n  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE; \n \n  OPEN emp_cursor; \n  read_loop: LOOP \n    FETCH emp_cursor INTO emp_id; \n    IF done THEN \n      LEAVE read_loop; \n    END IF; \n    UPDATE Employees SET salary = salary + 5000 WHERE id = emp_id; \n  END LOOP; \n  CLOSE emp_cursor; \nEND // \nDELIMITER ; \n\u2705 This procedure gives a \u20b95000 bonus to all employees. \n \n6. Importing/Exporting Data \nMoving data between CSV files and SQL is common in real projects. \nMySQL: \nLOAD DATA INFILE '/path/file.csv' \nINTO TABLE Employees \nFIELDS TERMINATED BY ',' \nLINES TERMINATED BY '\\n' \nIGNORE 1 ROWS; \nPostgreSQL: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 15, "text": "COPY Employees(name, salary) \nFROM '/path/file.csv' \nDELIMITER ',' \nCSV HEADER; \n \n7. Role-Based Access Control (Security Basics) \nSQL lets you give different permissions to different users. \nExample: \nGRANT SELECT, INSERT ON Employees TO 'analyst'; \nREVOKE DELETE ON Employees FROM 'analyst'; \n\u2705 'analyst' can view and add data, but can't delete anything. \n \n8. Star vs Snowflake Schema  \nUsed in Data Warehouses & Reporting Tools. \nStar Schema: \n\uf0b7 \nOne central fact table (e.g., Sales) \n\uf0b7 \nLinked to dimension tables (Customer, Product) \n\uf0b7 \nEasy to query, faster for reporting \nSnowflake Schema: \n\uf0b7 \nDimensions are normalized \n\uf0b7 \nLess redundancy but more joins \n \n9. OLTP vs OLAP (Database Types Simplified) \nFeature \nOLTP \nOLAP \n              Purpose \nDaily transactions \nData analysis \n              Design \nHighly normalized \ntables \nDenormalized \nschema \n             Examples \nBanking, eCommerce Reporting,Data \nWarehouse \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "\ud83c\udfaf INTERVIEW & PLACEMENT \n \n\ud83d\udd39 Basic Level (Entry / Fresher) \n1. What is SQL? \nStructured Query Language used to interact with relational databases. \n2. What is the difference between WHERE and HAVING? \nWHERE filters rows before aggregation, HAVING filters after aggregation. \n3. What is a Primary Key? \nA unique identifier for each row in a table. Cannot contain NULL values. \n4. Difference between INNER JOIN and LEFT JOIN? \nINNER JOIN: Returns matched rows only. \nLEFT JOIN: Returns all rows from the left table, even if no match. \n5. How do you handle NULLs in SQL? \nUse IS NULL, IS NOT NULL, COALESCE(), IFNULL(), NULLIF(). \n6. What is a Foreign Key? \nIt links two tables by referring to the primary key of another table. \n7. What is normalization? \nProcess of organizing data to reduce redundancy and improve integrity. \n8. What is denormalization? \nCombining tables to improve read performance by reducing joins. \n9. What does the DISTINCT keyword do? \nRemoves duplicate rows from the result set. \n10. What is the use of LIMIT or TOP? \nUsed to limit the number of rows returned by a query. \n\ud83d\udd39 Intermediate Level \n11. What are aggregate functions? \nFunctions like SUM(), AVG(), COUNT(), MAX(), MIN(). \n12. What is a subquery? \nA query nested inside another query. \n13. What is the difference between UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey impro", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "een UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey improve the speed of data retrieval. \n16. What is a view? \nA virtual table based on the result-set of a query. \n17. What are window functions? \nFunctions like RANK(), ROW_NUMBER() that work across rows. \n18. Difference between RANK() and DENSE_RANK()? \nRANK() skips ranks on ties, DENSE_RANK() does not. \n19. What is a CTE (Common Table Expression)? \nA temporary result set defined within the execution scope of a query. \n20. Explain ACID properties. \nAtomicity, Consistency, Isolation, Durability - ensures reliable transactions. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": "21. What is a composite key? \nA primary key made of multiple columns. \n22. Difference between DELETE and TRUNCATE? \nDELETE can be conditional and logs row-by-row deletion; TRUNCATE removes all rows \nfaster without logging each deletion. \n23. What is a surrogate key? \nA unique identifier for an entity that is not derived from application data. \n24. What is referential integrity? \nEnsures foreign key values match primary key values in the referenced table. \n25. How does EXISTS differ from IN? \nEXISTS stops on first match; IN evaluates all results. \n26. How do you use GROUP BY with multiple columns? \nYou can group by multiple columns by separating them with commas. \n27. Can we use ORDER BY with GROUP BY? \nYes. GROUP BY groups the data; ORDER BY sorts the grouped results. \n28. What is a scalar subquery? \nA subquery that returns exactly one value. \n29. What are correlated subqueries? \nSubqueries that refer to columns from the outer query. \n30. What is the use of ISNULL() or IFNULL()? \nTo replace NULL values with custom values. \n\ud83d\udd39 Advanced Level \n31. What are triggers in SQL? \nProcedures that automatically execute on certain events. \n32. What are stored procedures? \nReusable blocks of SQL statements stored in the database. \n33. What is the use of EXPLAIN or EXPLAIN PLAN? \nTo understand how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *,", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": " how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *, and use EXPLAIN to analyze. \n36. Difference between clustered and non-clustered index? \nClustered index determines row order in the table; non-clustered does not. \n37. Difference between OLTP and OLAP systems? \nOLTP: Online Transaction Processing (day-to-day operations). \nOLAP: Online Analytical Processing (data analysis and reporting). \n38. What are materialized views? \nStored query results that can be refreshed periodically. \n39. How do you implement pagination in SQL? \nUsing LIMIT and OFFSET or ROW_NUMBER() for custom logic. \n40. How do you handle duplicate rows? \nUsing ROW_NUMBER() or DISTINCT or CTEs with filtering. \n41. What are the different types of joins? \nINNER, LEFT, RIGHT, FULL OUTER, CROSS JOIN, SELF JOIN. \n42. What is a CROSS JOIN? \nReturns Cartesian product of two tables. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 18, "text": "43. Can you sort by an alias in SQL? \nYes, you can use the alias name in the ORDER BY clause. \n44. What is the difference between SQL and NoSQL? \nSQL is relational and uses tables. NoSQL is non-relational and uses documents, key-\nvalue pairs, etc. \n45. What are the common data types in SQL? \nINT, VARCHAR, DATE, BOOLEAN, DECIMAL, TEXT. \n46. Can a table have multiple foreign keys? \nYes, a table can reference multiple other tables using foreign keys. \n47. What happens if you violate a foreign key constraint? \nThe query fails with an integrity constraint violation. \n48. How can you change a column datatype in SQL? \nUsing ALTER TABLE table_name MODIFY column_name new_datatype; \n49. What are NULL-safe operators? \nOperators like <=> in MySQL allow safe comparison with NULL. \n50. How would you detect and remove duplicate records? \nUsing CTE and ROW_NUMBER() to filter duplicates. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 19, "text": "Real Company SQL Questions \nGoogle \n\uf0b7 \nSecond Highest Salary \nSELECT MAX(salary) AS SecondHighest \nFROM Employees \nWHERE salary < (SELECT MAX(salary) FROM Employees); \n\uf0b7 \nRemove Duplicate Emails Using ROW_NUMBER() \nWITH RankedEmails AS ( \n  SELECT *, ROW_NUMBER() OVER (PARTITION BY email ORDER BY id) \nAS rn \n  FROM Users \n) \nDELETE FROM RankedEmails WHERE rn > 1; \n\uf0b7 \nEmployees Earning More Than Average Salary \nSELECT name, salary \nFROM Employees \nWHERE salary > (SELECT AVG(salary) FROM Employees); \nAmazon \n\uf0b7 \nCustomers Who Ordered in Every Month \nSELECT customer_id \nFROM Orders \nGROUP BY customer_id \nHAVING COUNT(DISTINCT MONTH(order_date)) = 12; \n\uf0b7 \nTop 3 Earners in Each Department \nSELECT * \nFROM ( \n  SELECT *, DENSE_RANK() OVER (PARTITION BY department_id \nORDER BY salary DESC) AS rank \n  FROM Employees \n) ranked \nWHERE rank <= 3; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 20, "text": "\uf0b7 \nFind Returning Users Using LAG \nSELECT user_id, order_date, \n       LAG(order_date) OVER (PARTITION BY user_id ORDER BY \norder_date) AS previous_order \nFROM Orders; \nTCS \n\uf0b7 \nEmployees Joined in Last 6 Months \nSELECT * FROM Employees \nWHERE join_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH); \n\uf0b7 \nManager-Reportee Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n\uf0b7 \nDepartment with Highest Average Salary \nSELECT department_id \nFROM Employees \nGROUP BY department_id \nORDER BY AVG(salary) DESC \nLIMIT 1; \nFlipkart \n\uf0b7 \nTop 5 Selling Products by Revenue \nSELECT product_id, SUM(price * quantity) AS revenue \nFROM Orders \nGROUP BY product_id \nORDER BY revenue DESC \nLIMIT 5; \n\uf0b7 \nUsers with More Than 3 Failed Transactions \nSELECT user_id \nFROM Transactions \nWHERE status = 'FAILED' \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 21, "text": "GROUP BY user_id \nHAVING COUNT(*) > 3; \n\uf0b7 \nOrders Not Yet Shipped \nSELECT * \nFROM Orders \nWHERE status = 'PLACED' AND shipped_date IS NULL; \nSQL Problem-Solving Round \n \n\uf0b7 \nNth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET N-1; \n\uf0b7 \nDuplicate Emails \nSELECT email, COUNT(*) \nFROM Users \nGROUP BY email \nHAVING COUNT(*) > 1; \n\uf0b7 \nTop Earner per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, RANK() OVER (PARTITION BY department_id ORDER BY \nsalary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\uf0b7 \nCustomers Who Never Ordered \nSELECT c.customer_id, c.name \nFROM Customers c \nLEFT JOIN Orders o ON c.customer_id = o.customer_id \nWHERE o.order_id IS NULL; \n\uf0b7 \nEmployees Hired in the Last Month \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 22, "text": "SELECT * FROM Employees \nWHERE hire_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 \nMONTH) AND CURDATE(); \n\uf0b7 \nUser Order Summary \nSELECT user_id, COUNT(*) AS order_count, SUM(total_amount) AS \ntotal_spent \nFROM Orders \nGROUP BY user_id; \n\uf0b7 \n7-Day Rolling Login Count \nSELECT user_id, login_date, \n       COUNT(*) OVER ( \n         PARTITION BY user_id ORDER BY login_date \n         ROWS BETWEEN 6 PRECEDING AND CURRENT ROW \n       ) AS seven_day_logins \nFROM Logins; \n\uf0b7 \nFunnel Drop-off Analysis \nSELECT stage, COUNT(DISTINCT user_id) AS user_count \nFROM Funnel \nGROUP BY stage \nORDER BY stage; \n\uf0b7 \nAverage Time Between Orders \nSELECT user_id, AVG(DATEDIFF(order_date, LAG(order_date) OVER \n(PARTITION BY user_id ORDER BY order_date))) AS \navg_days_between_orders \nFROM Orders; \n\uf0b7 \nSelf Join for Employee Manager Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 1, "text": "BHAWANA KUMAR  \n 7972684479    \n   bhawanakumar5@gmail.com      \n  Linkedin \nGithub                  Portfolio \n \nExperience \nCybage Software \nSoftware Engineer  \nNov\u201923 \u2013 Present \n\u2022 Built scalable enterprise apps using Angular, React, Node.js, MongoDB, SQL, Python & Ruby on Rails, improving \nperformance by 30% via lazy loading and UI optimization. \n\u2022 Integrated 15+ REST APIs for real-time, secure data exchange across microservices. \n\u2022 Developed reusable UI libraries and CI/CD pipelines with Gitlab, accelerating deployments. \n\u2022 Designed responsive, accessible UIs using SCSS and best cross-browser practices. \n\u2022 Delivered authentication modules, RBAC and admin dashboards in Agile teams. \n Skills \n\u2022 Languages & Frameworks - JavaScript, TypeScript, Python, Django, Ruby on Rails  \n\u2022 Frontend - React.js, Angular, HTML5, CSS3, Responsive Web Design \n\u2022 Backend & APIs \u2013 Node.js, Django, Ruby on Rails, RESTful APIs \n\u2022 Databases \u2013 MongoDB, SQL \n\u2022 Tools & Practices \u2013 Git, Gitlab, CI/CD, Agile/Scrum \n\u2022 CS Fundamentals \u2013 Data Structures, Algorithms, OOP, Problem Solving \n\u2022 Soft Skills -  Communication, Collaboration, Time Management, Adaptability \nProjects \nAutoTradeHub \u2013 Automobile E-commerce Platform \nTech Stack: Angular, Node.js, MongoDB, SCSS, REST APIs \nBuilt role-based auth, vehicle CRUD, image uploads, filters, Razorpay payments, and analytics dashboard. \nClixVerse \u2013 Social Media Platform \nTech Stack: Ruby on Rails, SQL, Turbo, ERB \nImplemented image-based articles, likes, bookmarks", "file_name": "BhawanaKumar_SoftwareEngineer_Resume.pdf"}, {"page": 1, "text": ", image uploads, filters, Razorpay payments, and analytics dashboard. \nClixVerse \u2013 Social Media Platform \nTech Stack: Ruby on Rails, SQL, Turbo, ERB \nImplemented image-based articles, likes, bookmarks, comments, global/scoped search, and admin moderation. \nFake Website Detection Tool \nTech Stack: React, Django, 3rd Party APIs \nBuilt a full-stack web app to detect phishing websites by analyzing URLs and content using APIs. \nEducation \nDr. Babasaheb Ambedkar Technological University                                                                        \n     Maharashtra \nB.Tech. Computer Engineering \nMay 2019 \u2013 May 2023 \nMajor Elective: Computer Science \nCGPA: 8.83 \nCertifications & Awards \nMeta Front-End Developer Certification:  Coursera, 2025 \nHacktoberfest Contributor: Successfully contributed to open source repositories. \nCybage Chess Championship Winner (2024): Secured 1st place in female category \nPublication: Design and Implementation of EzyRidez- A ride sharing platform, GIS Science Journal 2023 \n", "file_name": "BhawanaKumar_SoftwareEngineer_Resume.pdf"}, {"page": 1, "text": "React Mastery Path  \n \nPhase 1: React Fundamentals \n1. JSX (JavaScript XML) \n\uf0b7 \nWhat: A syntax extension for JavaScript that looks like HTML and is used to describe \nUI structure in React. \n\uf0b7 \nWhy Important: Enables declarative UI creation and readable component structure. \n\uf0b7 \nUnder the Hood: JSX is transpiled to React.createElement() by Babel, which builds \na virtual DOM tree. \n\uf0b7 \nUsed in Real Apps: Defining component UI layout. \n\uf0b7 \nExample: \n\uf0b7 \nconst Welcome = () => <h1>Hello, SafeWeb AI User!</h1>; \n\uf0b7 \nHands-On Task: Create a Header, Footer, and Landing JSX layout. \n\uf0b7 \nInterview Question: What happens to JSX during the build process? \n\uf0b7 \nSafeWeb AI Use: Structure landing pages, hero sections, or onboarding screens. \n2. Components (Functional & Class) \n\uf0b7 \nWhat: Independent, reusable pieces of UI. \n\uf0b7 \nWhy Important: Encapsulates logic and markup for reuse and readability. \n\uf0b7 \nUnder the Hood: Each component maintains its own lifecycle and props/context \nhandling. \n\uf0b7 \nUsed in Real Apps: Every UI block (Navbar, Card, Form) is a component. \n\uf0b7 \nExample: \n\uf0b7 \nfunction Card(props) { \n\uf0b7 \n  return <div className=\"card\">{props.content}</div>; \n\uf0b7 \n} \n\uf0b7 \nHands-On Task: Build a FeatureCard component for highlighting SafeWeb AI \nfeatures. \n\uf0b7 \nInterview Question: Difference between functional and class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables c", "file_name": "React Notes.pdf"}, {"page": 1, "text": "nd class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables communication between components. \n\uf0b7 \nUnder the Hood: Props are passed as parameters to functions. \n\uf0b7 \nUsed in Real Apps: Passing user info, config, styles. \n\uf0b7 \nExample: \n\uf0b7 \nconst Greeting = ({ name }) => <h2>Hello, {name}</h2>; \n\uf0b7 \nHands-On Task: Pass site scan results from parent to child. \n", "file_name": "React Notes.pdf"}, {"page": 2, "text": "\uf0b7 \nInterview Question: Can a child modify props? \n\uf0b7 \nSafeWeb AI Use: Show user-specific security reports. \n4. State \n\uf0b7 \nWhat: A built-in object used to hold dynamic data. \n\uf0b7 \nWhy Important: Controls component behavior over time. \n\uf0b7 \nUnder the Hood: React uses useState to store and re-render components on update. \n\uf0b7 \nUsed in Real Apps: Handling form inputs, toggles, modals. \n\uf0b7 \nExample: \n\uf0b7 \nconst [email, setEmail] = useState(''); \n\uf0b7 \nHands-On Task: Build a login form managing email/password state. \n\uf0b7 \nInterview Question: How does state cause a re-render? \n\uf0b7 \nSafeWeb AI Use: Manage user input and scan configuration. \n5. Event Handling \n\uf0b7 \nWhat: Listening and responding to user events. \n\uf0b7 \nWhy Important: Powers interactivity. \n\uf0b7 \nUnder the Hood: Synthetic event system based on native events. \n\uf0b7 \nUsed in Real Apps: Form submission, buttons, toggles. \n\uf0b7 \nExample: \n\uf0b7 \n<button onClick={handleScan}>Start Scan</button> \n\uf0b7 \nHands-On Task: Add a \u201cStart Scan\u201d button with click handler. \n\uf0b7 \nInterview Question: What is a synthetic event? \n\uf0b7 \nSafeWeb AI Use: Trigger a website scan. \n6. Conditional Rendering \n\uf0b7 \nWhat: Rendering different UI based on conditions. \n\uf0b7 \nWhy Important: Enhances UX by showing relevant data. \n\uf0b7 \nUnder the Hood: Simple JavaScript logic (ternaries, &&, if). \n\uf0b7 \nUsed in Real Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to impl", "file_name": "React Notes.pdf"}, {"page": 2, "text": "al Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to implement conditional rendering? \n\uf0b7 \nSafeWeb AI Use: Show different UI during scan progress. \n7. Lists and Keys \n\uf0b7 \nWhat: Rendering multiple elements using map() with unique key props. \n\uf0b7 \nWhy Important: Efficient rendering and reconciliation. \n\uf0b7 \nUnder the Hood: Keys help React identify changed, added, or removed items. \n\uf0b7 \nUsed in Real Apps: Listing scan results, history logs. \n\uf0b7 \nExample: \n", "file_name": "React Notes.pdf"}, {"page": 3, "text": "\uf0b7 \n{urls.map((url) => <li key={url}>{url}</li>)} \n\uf0b7 \nHands-On Task: Display a list of scanned URLs. \n\uf0b7 \nInterview Question: Why are keys important in lists? \n\uf0b7 \nSafeWeb AI Use: Show scanned website list. \n8. useEffect \n\uf0b7 \nWhat: Side effects like data fetching, subscriptions. \n\uf0b7 \nWhy Important: Handles operations outside render. \n\uf0b7 \nUnder the Hood: Scheduled after paint, cleanup via return function. \n\uf0b7 \nUsed in Real Apps: Fetching scan results, triggering alerts. \n\uf0b7 \nExample: \n\uf0b7 \nuseEffect(() => { fetchData(); }, []); \n\uf0b7 \nHands-On Task: Fetch dummy scan data on load. \n\uf0b7 \nInterview Question: How does the dependency array work? \n\uf0b7 \nSafeWeb AI Use: Load recent scan history on dashboard. \n9. Hooks (Intro) \n\uf0b7 \nWhat: Special functions to use React features in functional components. \n\uf0b7 \nWhy Important: Replaces classes with reusable logic. \n\uf0b7 \nUnder the Hood: Hooks use internal closures and React's fiber scheduler. \n\uf0b7 \nUsed in Real Apps: All stateful or side-effect components. \n\uf0b7 \nExample: useState, useEffect \n\uf0b7 \nHands-On Task: Use useState and useEffect together. \n\uf0b7 \nInterview Question: Why can\u2019t hooks be called conditionally? \n\uf0b7 \nSafeWeb AI Use: State and side effect logic. \n10. Forms \n\uf0b7 \nWhat: Collecting and managing user input. \n\uf0b7 \nWhy Important: Central for user interaction. \n\uf0b7 \nUnder the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 ", "file_name": "React Notes.pdf"}, {"page": 3, "text": "r the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 \nHands-On Task: Build scan request form. \n\uf0b7 \nInterview Question: Difference between controlled and uncontrolled components? \n\uf0b7 \nSafeWeb AI Use: Get website input from users. \n11. Context API \n\uf0b7 \nWhat: Global state manager for passing data without prop drilling. \n\uf0b7 \nWhy Important: Simplifies state sharing. \n\uf0b7 \nUnder the Hood: Uses React context provider/consumer. \n\uf0b7 \nUsed in Real Apps: Theme, auth, locale. \n", "file_name": "React Notes.pdf"}, {"page": 4, "text": "\uf0b7 \nExample: \n\uf0b7 \nconst UserContext = React.createContext(); \n\uf0b7 \nHands-On Task: Create AuthContext. \n\uf0b7 \nInterview Question: How does context re-render consumers? \n\uf0b7 \nSafeWeb AI Use: Share user data across pages. \n12. React Router \n\uf0b7 \nWhat: Routing library to handle navigation. \n\uf0b7 \nWhy Important: Enables multi-page apps. \n\uf0b7 \nUnder the Hood: Uses HTML5 history API. \n\uf0b7 \nUsed in Real Apps: Page navigation. \n\uf0b7 \nExample: \n\uf0b7 \n<Route path=\"/scan\" element={<Scan />} /> \n\uf0b7 \nHands-On Task: Setup Login, Dashboard, Scan routes. \n\uf0b7 \nInterview Question: Difference between browser and hash routers? \n\uf0b7 \nSafeWeb AI Use: Navigate between sections. \n13. Custom Hooks \n\uf0b7 \nWhat: User-defined reusable hook functions. \n\uf0b7 \nWhy Important: Abstraction and reuse of logic. \n\uf0b7 \nUnder the Hood: Functions that call other hooks. \n\uf0b7 \nUsed in Real Apps: Reusable logic blocks. \n\uf0b7 \nExample: useAuth, useScanStatus \n\uf0b7 \nHands-On Task: Create useAuthGuard. \n\uf0b7 \nInterview Question: Naming rule for hooks? \n\uf0b7 \nSafeWeb AI Use: Custom logic management. \n14. useMemo & useCallback \n\uf0b7 \nWhat: Memoization hooks to optimize performance. \n\uf0b7 \nWhy Important: Prevents unnecessary recalculations or re-renders. \n\uf0b7 \nUnder the Hood: Caches previous return values. \n\uf0b7 \nUsed in Real Apps: Expensive operations, function refs. \n\uf0b7 \nExample: \n\uf0b7 \nconst memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. ", "file_name": "React Notes.pdf"}, {"page": 4, "text": "st memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. \n15. Refs and useRef \n\uf0b7 \nWhat: Direct DOM access or persist values across renders. \n\uf0b7 \nWhy Important: Needed for focus, timers, scroll. \n\uf0b7 \nUnder the Hood: Maintains mutable .current reference. \n", "file_name": "React Notes.pdf"}, {"page": 5, "text": "\uf0b7 \nUsed in Real Apps: Form fields, animations. \n\uf0b7 \nExample: inputRef.current.focus() \n\uf0b7 \nHands-On Task: Focus input on mount. \n\uf0b7 \nInterview Question: When to use refs? \n\uf0b7 \nSafeWeb AI Use: Scroll to report. \n16. Error Boundaries \n\uf0b7 \nWhat: Catch and handle render errors. \n\uf0b7 \nWhy Important: Prevent crashes. \n\uf0b7 \nUnder the Hood: Uses lifecycle methods (componentDidCatch). \n\uf0b7 \nUsed in Real Apps: Wrapping entire app/components. \n\uf0b7 \nExample: Class-based error catcher. \n\uf0b7 \nHands-On Task: Create ErrorBoundary wrapper. \n\uf0b7 \nInterview Question: Can hooks catch errors? \n\uf0b7 \nSafeWeb AI Use: Catch scan/report failures. \n17. Code Splitting \n\uf0b7 \nWhat: Load JS bundles on demand. \n\uf0b7 \nWhy Important: Reduces initial load. \n\uf0b7 \nUnder the Hood: Uses React.lazy and dynamic import. \n\uf0b7 \nUsed in Real Apps: Lazy-loading routes/pages. \n\uf0b7 \nExample: \n\uf0b7 \nconst Scan = React.lazy(() => import('./Scan')); \n\uf0b7 \nHands-On Task: Split heavy components. \n\uf0b7 \nInterview Question: Difference between lazy and suspense? \n\uf0b7 \nSafeWeb AI Use: Speed up first load. \n18. Higher Order Components \n\uf0b7 \nWhat: Functions returning components. \n\uf0b7 \nWhy Important: Reusable logic decorators. \n\uf0b7 \nUnder the Hood: Functional pattern. \n\uf0b7 \nUsed in Real Apps: Permissions, tracking. \n\uf0b7 \nExample: withLogging(Component) \n\uf0b7 \nHands-On Task: Create HOC for authentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Impo", "file_name": "React Notes.pdf"}, {"page": 5, "text": "uthentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Important: Flexible pattern. \n\uf0b7 \nUnder the Hood: Functions as children. \n\uf0b7 \nUsed in Real Apps: Sliders, animations. \n", "file_name": "React Notes.pdf"}, {"page": 6, "text": "\uf0b7 \nExample: <DataProvider render={(data) => <Chart data={data} />} \n\uf0b7 \nHands-On Task: Create MouseTracker. \n\uf0b7 \nInterview Question: Downsides of render props? \n\uf0b7 \nSafeWeb AI Use: Share UI logic. \n20. State Management \n\uf0b7 \nWhat: Tools to manage complex app state. \n\uf0b7 \nWhy Important: Scalability. \n\uf0b7 \nUnder the Hood: Central store and dispatch pattern. \n\uf0b7 \nUsed in Real Apps: Redux, Zustand. \n\uf0b7 \nExample: useReducer, Redux store \n\uf0b7 \nHands-On Task: Manage scan logs in global state. \n\uf0b7 \nInterview Question: Redux vs context? \n\uf0b7 \nSafeWeb AI Use: Global scan/auth state. \n21. Axios / Fetch \n\uf0b7 \nWhat: HTTP libraries to talk to APIs. \n\uf0b7 \nWhy Important: Core for data interaction. \n\uf0b7 \nUnder the Hood: Promise-based APIs. \n\uf0b7 \nUsed in Real Apps: Backend communication. \n\uf0b7 \nExample: axios.get('/api/report') \n\uf0b7 \nHands-On Task: Fetch scan results. \n\uf0b7 \nInterview Question: Axios vs fetch? \n\uf0b7 \nSafeWeb AI Use: Talk to scan API. \n22. Folder Structure \n\uf0b7 \nWhat: Organizing codebase. \n\uf0b7 \nWhy Important: Maintainability. \n\uf0b7 \nUnder the Hood: Logical separation. \n\uf0b7 \nUsed in Real Apps: Feature/domain-based. \n\uf0b7 \nExample: src/components, src/services \n\uf0b7 \nHands-On Task: Restructure SafeWeb AI project. \n\uf0b7 \nInterview Question: Best practices for large apps? \n\uf0b7 \nSafeWeb AI Use: Scale codebase. \n23. PropTypes / TypeScript \n\uf0b7 \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.p", "file_name": "React Notes.pdf"}, {"page": 6, "text": " \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.propTypes = { name: PropTypes.string } \n", "file_name": "React Notes.pdf"}, {"page": 7, "text": "\uf0b7 \nHands-On Task: Add PropTypes to core components. \n\uf0b7 \nInterview Question: TS vs PropTypes? \n\uf0b7 \nSafeWeb AI Use: Ensure correct data handling. \n24. Testing (Jest + RTL) \n\uf0b7 \nWhat: Automated validation of logic and UI. \n\uf0b7 \nWhy Important: Prevent regressions. \n\uf0b7 \nUnder the Hood: Simulates components. \n\uf0b7 \nUsed in Real Apps: CI pipelines. \n\uf0b7 \nExample: expect(getByText('Welcome')).toBeInTheDocument() \n\uf0b7 \nHands-On Task: Test login and scan page. \n\uf0b7 \nInterview Question: Unit vs integration test? \n\uf0b7 \nSafeWeb AI Use: Bug-free reliability. \n \n \nReact Interview Questions & Precise Answers \n \n1. What happens to JSX during the build process? \no JSX is transpiled by Babel into React.createElement() calls that build the \nvirtual DOM. \n2. Difference between functional and class components? \no Functional: Simple functions using hooks. Class: ES6 classes using lifecycle \nmethods. \n3. Can a child modify props? \no No. Props are read-only; only the parent can change them. \n4. How does state cause a re-render? \no Calling setState triggers React\u2019s scheduler to re-render that component with \nupdated state. \n5. What is a synthetic event? \no A cross-browser wrapper around native events, provided by React for \nconsistency. \n6. Ways to implement conditional rendering? \no \nif/else, ternary ? :, logical AND &&, IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useE", "file_name": "React Notes.pdf"}, {"page": 7, "text": ", IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useEffect? \no It determines when the effect runs. Empty array means run once. Include variables \nto trigger rerun when they change. \n9. Why can\u2019t hooks be called conditionally? \n", "file_name": "React Notes.pdf"}, {"page": 8, "text": "o Because React relies on the order of hooks. Conditional calls break this order, \ncausing bugs. \n10. Difference between controlled and uncontrolled components? \no Controlled: state-driven. Uncontrolled: DOM-driven (using refs). \n11. How does context re-render consumers? \no When context value changes, all consumers using that context re-render. \n12. Difference between browser and hash routers? \no BrowserRouter uses HTML5 history API. HashRouter uses URL hash (#) for \nrouting. \n13. Naming rule for custom hooks? \no Must start with use to let React track them internally. \n14. When does useMemo recalculate? \no When any dependency in its dependency array changes. \n15. When to use refs? \no When you need direct DOM access or to persist values without triggering re-\nrenders. \n16. Can hooks catch errors? \no No. Only class-based error boundaries can catch render-time errors. \n17. Difference between lazy and suspense? \no \nlazy dynamically imports components. Suspense wraps lazy-loaded components \nto handle loading fallback. \n18. Compare HOCs with hooks? \no HOCs wrap components for reuse. Hooks reuse logic inside functional \ncomponents. \n19. Downsides of render props? \no Can lead to deeply nested structures (callback hell). \n20. Redux vs Context? \no Redux is for complex/global state with middleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps fo", "file_name": "React Notes.pdf"}, {"page": 8, "text": "dleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps folder structure? \no Feature-based or domain-based structure with clear separation of concerns. \n23. TypeScript vs PropTypes? \no TypeScript checks types at compile-time. PropTypes check at runtime and are \nlimited. \n24. Unit vs integration test? \no Unit: test single component/function. Integration: test interactions between \ncomponents. \n \n \n", "file_name": "React Notes.pdf"}, {"page": 1, "text": "Global Paid Developer & Mentorship Programs  \n1. Paid Developer Programs  \n  \nProgram  \nLocation  \nDuration  \nPay (INR)  \nApply Timeline  \nLinkedIn REACH  \nHybrid (USA)  \n1-5 years  \nRs.1.16-1.41 Cr/year    \n          June  \nMicrosoft LEAP  \nOn-site (USA/Canada)  16 weeks  \nRs.82-96 L/year  \n         August   \nAdobe Digital Academy  \nOn-site (USA)  \n6-9 months  \nStipend + Paid Apprenticeship  \n       September  \nGoogle Summer of Code (  GSoC)Remote  \n12+ weeks  \nRs.1.25-2.5 L  \n          March   \nMLH Fellowship  \nRemote  \n12 weeks  \nRs.4.1 L  \n     March- April  \nLinux Foundation Mentorsh ip (LFX)Remote  \n3-24 weeks  \nRs.2.5-5 L  \n     Feb-July (varies)  \n  \n2. Application Links   \n1. LinkedIn REACH: https://careers.linkedin.com/reach  \n2. Microsoft LEAP:  https://leap.microsoft.com  \n3. Adobe Digital Academy: https://www.adobe.com/corporate-\nresponsibility/creativity/digitalacademy  \n4. Google Summer of Code (GSoC): https://summerofcode.withgoogle.com  \n5. MLH Fellowship: https://fellowship.mlh.io/  \n6. Linux Foundation Mentorship (LFX): https://lfx.linuxfoundation.org/mentorship/  \n3. Paid Remote Mentorship Opportunities  \n1. Google Summer of Code (Mentor)  \nDetails: Experienced developers can apply as paid mentors for open-source projects.  \nApply: https://summerofcode.withgoogle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-sou", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "gle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-source project maintainers or contributors can apply to host/mentor projects. Apply: \nhttps://lfx.linuxfoundation.org/mentorship/  \n  \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Ecommerce  Mobility  \nCompanies  \nCloud  \nServices/  \nSaaS  \nCRM/Workflow \nManagement  \nTravel  \nPayments/  \nFintech  \nInvestment Banks/  \nHedge Funds  \nFlipkart  \nOla  \nVmWare  \nZoho  \nAirbnb  \nPaypal  \nDE Shaw  \nMyntra  \nUber  \nRedHat  \nSalesforce  \nOYO  \nVisa  \nGoldman Sachs  \nTesco  \nMeru  \nOCI  \nEngageBay  \nMakeMyTrip  \nPhonepe  \nWorld Quant  \nWalmart  \nZoomcar  \nSAP Labs  \nServiceNow  \nExpedia  \nPaytm  \nArcessium  \nTarget  \nRapido  \nIBM  \n \nBooking.com  BharatPe  \nIntuit  \nShopsy  \n \nBrowserStack   \nAgoda  \nCred  \nJP Morgan  \nBloomerang  \n \nNutanix  \n \nGroupon  \nSlice  \nMorgan Stanley  \nCult.fit  \n \nHp  \n \n \nRazorpay  \nWells Fargo  \nAJIO  \n \nNetApp  \n \n \nZeta  \nDruva  \nPharmaeasy   \nCohesity  \n \n \nRupeek  \n \nMeesho  \n \nTekion Corp  \n \n \nClearTax  \n \nLowe\u2019s  \n  \nRubrik  \n  \n  \nJupiter  \n  \nCompanies  \n \nMost High Paying Remote Jobs and few On-site jobs (Use FILTERS) \n1. https://tinyparticlejobs.com/ \n2. https://www.remoterocketship.com \n3. https://nodesk.co/remote-jobs/ \n4. https://wellfound.com/jobs \n5. https://weworkremotely.com/categories/remote-programming-jobs \n6. https://stackoverflow.com/jobs \n7. https://jobs.github.com \n8. https://www.linkedin.com/jobs/ \n9. https://www.toptal.com/ \n10. https://remoteok.io/remote-dev-jobs \n \nFew very high paying remote \u2013  \nSpreeTail \nBlink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Blink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": " \n \nRICH PEOPLE USES / BILLIONAIRES LINKS \n Investment & Startup Platforms \n AngelList Ventures  \u2014 https://angel.co/venture \n MicroVentures \u2014 https://microventures.com/ \n ToptalSeedInvest \u2014 https://www.seedinvest.com/ \n Product Hunt Makers -- https://www.producthunt.com/makers \n Y Cobinator Startup School \u2013 https://www.startupschool.org/ \n      Premium Networking & Professional Platforms \n Lunchclub \u2014 https://lunchclub.com/ \n Shapr \u2014 https://www.shapr.co/ \n Toptal \u2014 https://www.toptal.com/ \n Tiger 21 (private network for investors) \u2014https://tiger21.com/ \n FoundersCard \u2014 https://founderscard.com/ \n      Exclusive Social & Community Platforms \n Clubhouse (invite-only audio network) \u2014 https://www.joinclubhouse.com/ \n Techstars Founders Slack (invite-only; search online to join) \n Various Venture Capital & Startup Discord communities (search Discord servers) \n     Conferences & Summits (for networking) \n TED \u2014 https://www.ted.com/ \n Web Summit -- https://websummit.com/ \n SXSW -- https://www.sxsw.com/ \n TechCrunch Disrupt \u2014 https://techcrunch.com/events/disrupt-sf-2024/ \n Forbes 30 Under 30 Summit \u2014https://www.forbes.com/30-under-30-summit/ \n     Private Family Office & Wealth Networks \n Family Office Club \u2014 https://familyoffices.com/ \n Opal Group \u2014 https://opalgroup.net/ \n \nEmails/Numbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLead", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": "mbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLeads \nVoilaNorbert, AngelList Talent, YCombinator Jobs, WellFound, Triplebyte, HackerRank Talent, Wiza \nLinkedIn Email Finder by Skrapp or Snov.io, Hunter for Chrome, Clearbit Reveal, Lusha Chrome \nExtension \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "BHAWANA KUMAR  \n 7972684479    \n   bhawanakumar5@gmail.com      \n  Linkedin \nGithub                  Portfolio \n \nExperience \nCybage Software \nSoftware Engineer  \nNov\u201923 \u2013 Present \n\u2022 Built scalable enterprise apps using Angular, React, Node.js, MongoDB, SQL, Python & Ruby on Rails, improving \nperformance by 30% via lazy loading and UI optimization. \n\u2022 Integrated 15+ REST APIs for real-time, secure data exchange across microservices. \n\u2022 Developed reusable UI libraries and CI/CD pipelines with Gitlab, accelerating deployments. \n\u2022 Designed responsive, accessible UIs using SCSS and best cross-browser practices. \n\u2022 Delivered authentication modules, RBAC and admin dashboards in Agile teams. \n Skills \n\u2022 Languages & Frameworks - JavaScript, TypeScript, Python, Django, Ruby on Rails  \n\u2022 Frontend - React.js, Angular, HTML5, CSS3, Responsive Web Design \n\u2022 Backend & APIs \u2013 Node.js, Django, Ruby on Rails, RESTful APIs \n\u2022 Databases \u2013 MongoDB, SQL \n\u2022 Tools & Practices \u2013 Git, Gitlab, CI/CD, Agile/Scrum \n\u2022 CS Fundamentals \u2013 Data Structures, Algorithms, OOP, Problem Solving \n\u2022 Soft Skills -  Communication, Collaboration, Time Management, Adaptability \nProjects \nAutoTradeHub \u2013 Automobile E-commerce Platform \nTech Stack: Angular, Node.js, MongoDB, SCSS, REST APIs \nBuilt role-based auth, vehicle CRUD, image uploads, filters, Razorpay payments, and analytics dashboard. \nClixVerse \u2013 Social Media Platform \nTech Stack: Ruby on Rails, SQL, Turbo, ERB \nImplemented image-based articles, likes, bookmarks", "file_name": "BhawanaKumar_SoftwareEngineer_Resume.pdf"}, {"page": 1, "text": ", image uploads, filters, Razorpay payments, and analytics dashboard. \nClixVerse \u2013 Social Media Platform \nTech Stack: Ruby on Rails, SQL, Turbo, ERB \nImplemented image-based articles, likes, bookmarks, comments, global/scoped search, and admin moderation. \nFake Website Detection Tool \nTech Stack: React, Django, 3rd Party APIs \nBuilt a full-stack web app to detect phishing websites by analyzing URLs and content using APIs. \nEducation \nDr. Babasaheb Ambedkar Technological University                                                                        \n     Maharashtra \nB.Tech. Computer Engineering \nMay 2019 \u2013 May 2023 \nMajor Elective: Computer Science \nCGPA: 8.83 \nCertifications & Awards \nMeta Front-End Developer Certification:  Coursera, 2025 \nHacktoberfest Contributor: Successfully contributed to open source repositories. \nCybage Chess Championship Winner (2024): Secured 1st place in female category \nPublication: Design and Implementation of EzyRidez- A ride sharing platform, GIS Science Journal 2023 \n", "file_name": "BhawanaKumar_SoftwareEngineer_Resume.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "Global Paid Developer & Mentorship Programs  \n1. Paid Developer Programs  \n  \nProgram  \nLocation  \nDuration  \nPay (INR)  \nApply Timeline  \nLinkedIn REACH  \nHybrid (USA)  \n1-5 years  \nRs.1.16-1.41 Cr/year    \n          June  \nMicrosoft LEAP  \nOn-site (USA/Canada)  16 weeks  \nRs.82-96 L/year  \n         August   \nAdobe Digital Academy  \nOn-site (USA)  \n6-9 months  \nStipend + Paid Apprenticeship  \n       September  \nGoogle Summer of Code (  GSoC)Remote  \n12+ weeks  \nRs.1.25-2.5 L  \n          March   \nMLH Fellowship  \nRemote  \n12 weeks  \nRs.4.1 L  \n     March- April  \nLinux Foundation Mentorsh ip (LFX)Remote  \n3-24 weeks  \nRs.2.5-5 L  \n     Feb-July (varies)  \n  \n2. Application Links   \n1. LinkedIn REACH: https://careers.linkedin.com/reach  \n2. Microsoft LEAP:  https://leap.microsoft.com  \n3. Adobe Digital Academy: https://www.adobe.com/corporate-\nresponsibility/creativity/digitalacademy  \n4. Google Summer of Code (GSoC): https://summerofcode.withgoogle.com  \n5. MLH Fellowship: https://fellowship.mlh.io/  \n6. Linux Foundation Mentorship (LFX): https://lfx.linuxfoundation.org/mentorship/  \n3. Paid Remote Mentorship Opportunities  \n1. Google Summer of Code (Mentor)  \nDetails: Experienced developers can apply as paid mentors for open-source projects.  \nApply: https://summerofcode.withgoogle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-sou", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "gle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-source project maintainers or contributors can apply to host/mentor projects. Apply: \nhttps://lfx.linuxfoundation.org/mentorship/  \n  \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Ecommerce  Mobility  \nCompanies  \nCloud  \nServices/  \nSaaS  \nCRM/Workflow \nManagement  \nTravel  \nPayments/  \nFintech  \nInvestment Banks/  \nHedge Funds  \nFlipkart  \nOla  \nVmWare  \nZoho  \nAirbnb  \nPaypal  \nDE Shaw  \nMyntra  \nUber  \nRedHat  \nSalesforce  \nOYO  \nVisa  \nGoldman Sachs  \nTesco  \nMeru  \nOCI  \nEngageBay  \nMakeMyTrip  \nPhonepe  \nWorld Quant  \nWalmart  \nZoomcar  \nSAP Labs  \nServiceNow  \nExpedia  \nPaytm  \nArcessium  \nTarget  \nRapido  \nIBM  \n \nBooking.com  BharatPe  \nIntuit  \nShopsy  \n \nBrowserStack   \nAgoda  \nCred  \nJP Morgan  \nBloomerang  \n \nNutanix  \n \nGroupon  \nSlice  \nMorgan Stanley  \nCult.fit  \n \nHp  \n \n \nRazorpay  \nWells Fargo  \nAJIO  \n \nNetApp  \n \n \nZeta  \nDruva  \nPharmaeasy   \nCohesity  \n \n \nRupeek  \n \nMeesho  \n \nTekion Corp  \n \n \nClearTax  \n \nLowe\u2019s  \n  \nRubrik  \n  \n  \nJupiter  \n  \nCompanies  \n \nMost High Paying Remote Jobs and few On-site jobs (Use FILTERS) \n1. https://tinyparticlejobs.com/ \n2. https://www.remoterocketship.com \n3. https://nodesk.co/remote-jobs/ \n4. https://wellfound.com/jobs \n5. https://weworkremotely.com/categories/remote-programming-jobs \n6. https://stackoverflow.com/jobs \n7. https://jobs.github.com \n8. https://www.linkedin.com/jobs/ \n9. https://www.toptal.com/ \n10. https://remoteok.io/remote-dev-jobs \n \nFew very high paying remote \u2013  \nSpreeTail \nBlink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Blink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": " \n \nRICH PEOPLE USES / BILLIONAIRES LINKS \n Investment & Startup Platforms \n AngelList Ventures  \u2014 https://angel.co/venture \n MicroVentures \u2014 https://microventures.com/ \n ToptalSeedInvest \u2014 https://www.seedinvest.com/ \n Product Hunt Makers -- https://www.producthunt.com/makers \n Y Cobinator Startup School \u2013 https://www.startupschool.org/ \n      Premium Networking & Professional Platforms \n Lunchclub \u2014 https://lunchclub.com/ \n Shapr \u2014 https://www.shapr.co/ \n Toptal \u2014 https://www.toptal.com/ \n Tiger 21 (private network for investors) \u2014https://tiger21.com/ \n FoundersCard \u2014 https://founderscard.com/ \n      Exclusive Social & Community Platforms \n Clubhouse (invite-only audio network) \u2014 https://www.joinclubhouse.com/ \n Techstars Founders Slack (invite-only; search online to join) \n Various Venture Capital & Startup Discord communities (search Discord servers) \n     Conferences & Summits (for networking) \n TED \u2014 https://www.ted.com/ \n Web Summit -- https://websummit.com/ \n SXSW -- https://www.sxsw.com/ \n TechCrunch Disrupt \u2014 https://techcrunch.com/events/disrupt-sf-2024/ \n Forbes 30 Under 30 Summit \u2014https://www.forbes.com/30-under-30-summit/ \n     Private Family Office & Wealth Networks \n Family Office Club \u2014 https://familyoffices.com/ \n Opal Group \u2014 https://opalgroup.net/ \n \nEmails/Numbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLead", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": "mbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLeads \nVoilaNorbert, AngelList Talent, YCombinator Jobs, WellFound, Triplebyte, HackerRank Talent, Wiza \nLinkedIn Email Finder by Skrapp or Snov.io, Hunter for Chrome, Clearbit Reveal, Lusha Chrome \nExtension \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "React Mastery Path  \n \nPhase 1: React Fundamentals \n1. JSX (JavaScript XML) \n\uf0b7 \nWhat: A syntax extension for JavaScript that looks like HTML and is used to describe \nUI structure in React. \n\uf0b7 \nWhy Important: Enables declarative UI creation and readable component structure. \n\uf0b7 \nUnder the Hood: JSX is transpiled to React.createElement() by Babel, which builds \na virtual DOM tree. \n\uf0b7 \nUsed in Real Apps: Defining component UI layout. \n\uf0b7 \nExample: \n\uf0b7 \nconst Welcome = () => <h1>Hello, SafeWeb AI User!</h1>; \n\uf0b7 \nHands-On Task: Create a Header, Footer, and Landing JSX layout. \n\uf0b7 \nInterview Question: What happens to JSX during the build process? \n\uf0b7 \nSafeWeb AI Use: Structure landing pages, hero sections, or onboarding screens. \n2. Components (Functional & Class) \n\uf0b7 \nWhat: Independent, reusable pieces of UI. \n\uf0b7 \nWhy Important: Encapsulates logic and markup for reuse and readability. \n\uf0b7 \nUnder the Hood: Each component maintains its own lifecycle and props/context \nhandling. \n\uf0b7 \nUsed in Real Apps: Every UI block (Navbar, Card, Form) is a component. \n\uf0b7 \nExample: \n\uf0b7 \nfunction Card(props) { \n\uf0b7 \n  return <div className=\"card\">{props.content}</div>; \n\uf0b7 \n} \n\uf0b7 \nHands-On Task: Build a FeatureCard component for highlighting SafeWeb AI \nfeatures. \n\uf0b7 \nInterview Question: Difference between functional and class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables c", "file_name": "React Notes.pdf"}, {"page": 1, "text": "nd class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables communication between components. \n\uf0b7 \nUnder the Hood: Props are passed as parameters to functions. \n\uf0b7 \nUsed in Real Apps: Passing user info, config, styles. \n\uf0b7 \nExample: \n\uf0b7 \nconst Greeting = ({ name }) => <h2>Hello, {name}</h2>; \n\uf0b7 \nHands-On Task: Pass site scan results from parent to child. \n", "file_name": "React Notes.pdf"}, {"page": 2, "text": "\uf0b7 \nInterview Question: Can a child modify props? \n\uf0b7 \nSafeWeb AI Use: Show user-specific security reports. \n4. State \n\uf0b7 \nWhat: A built-in object used to hold dynamic data. \n\uf0b7 \nWhy Important: Controls component behavior over time. \n\uf0b7 \nUnder the Hood: React uses useState to store and re-render components on update. \n\uf0b7 \nUsed in Real Apps: Handling form inputs, toggles, modals. \n\uf0b7 \nExample: \n\uf0b7 \nconst [email, setEmail] = useState(''); \n\uf0b7 \nHands-On Task: Build a login form managing email/password state. \n\uf0b7 \nInterview Question: How does state cause a re-render? \n\uf0b7 \nSafeWeb AI Use: Manage user input and scan configuration. \n5. Event Handling \n\uf0b7 \nWhat: Listening and responding to user events. \n\uf0b7 \nWhy Important: Powers interactivity. \n\uf0b7 \nUnder the Hood: Synthetic event system based on native events. \n\uf0b7 \nUsed in Real Apps: Form submission, buttons, toggles. \n\uf0b7 \nExample: \n\uf0b7 \n<button onClick={handleScan}>Start Scan</button> \n\uf0b7 \nHands-On Task: Add a \u201cStart Scan\u201d button with click handler. \n\uf0b7 \nInterview Question: What is a synthetic event? \n\uf0b7 \nSafeWeb AI Use: Trigger a website scan. \n6. Conditional Rendering \n\uf0b7 \nWhat: Rendering different UI based on conditions. \n\uf0b7 \nWhy Important: Enhances UX by showing relevant data. \n\uf0b7 \nUnder the Hood: Simple JavaScript logic (ternaries, &&, if). \n\uf0b7 \nUsed in Real Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to impl", "file_name": "React Notes.pdf"}, {"page": 2, "text": "al Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to implement conditional rendering? \n\uf0b7 \nSafeWeb AI Use: Show different UI during scan progress. \n7. Lists and Keys \n\uf0b7 \nWhat: Rendering multiple elements using map() with unique key props. \n\uf0b7 \nWhy Important: Efficient rendering and reconciliation. \n\uf0b7 \nUnder the Hood: Keys help React identify changed, added, or removed items. \n\uf0b7 \nUsed in Real Apps: Listing scan results, history logs. \n\uf0b7 \nExample: \n", "file_name": "React Notes.pdf"}, {"page": 3, "text": "\uf0b7 \n{urls.map((url) => <li key={url}>{url}</li>)} \n\uf0b7 \nHands-On Task: Display a list of scanned URLs. \n\uf0b7 \nInterview Question: Why are keys important in lists? \n\uf0b7 \nSafeWeb AI Use: Show scanned website list. \n8. useEffect \n\uf0b7 \nWhat: Side effects like data fetching, subscriptions. \n\uf0b7 \nWhy Important: Handles operations outside render. \n\uf0b7 \nUnder the Hood: Scheduled after paint, cleanup via return function. \n\uf0b7 \nUsed in Real Apps: Fetching scan results, triggering alerts. \n\uf0b7 \nExample: \n\uf0b7 \nuseEffect(() => { fetchData(); }, []); \n\uf0b7 \nHands-On Task: Fetch dummy scan data on load. \n\uf0b7 \nInterview Question: How does the dependency array work? \n\uf0b7 \nSafeWeb AI Use: Load recent scan history on dashboard. \n9. Hooks (Intro) \n\uf0b7 \nWhat: Special functions to use React features in functional components. \n\uf0b7 \nWhy Important: Replaces classes with reusable logic. \n\uf0b7 \nUnder the Hood: Hooks use internal closures and React's fiber scheduler. \n\uf0b7 \nUsed in Real Apps: All stateful or side-effect components. \n\uf0b7 \nExample: useState, useEffect \n\uf0b7 \nHands-On Task: Use useState and useEffect together. \n\uf0b7 \nInterview Question: Why can\u2019t hooks be called conditionally? \n\uf0b7 \nSafeWeb AI Use: State and side effect logic. \n10. Forms \n\uf0b7 \nWhat: Collecting and managing user input. \n\uf0b7 \nWhy Important: Central for user interaction. \n\uf0b7 \nUnder the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 ", "file_name": "React Notes.pdf"}, {"page": 3, "text": "r the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 \nHands-On Task: Build scan request form. \n\uf0b7 \nInterview Question: Difference between controlled and uncontrolled components? \n\uf0b7 \nSafeWeb AI Use: Get website input from users. \n11. Context API \n\uf0b7 \nWhat: Global state manager for passing data without prop drilling. \n\uf0b7 \nWhy Important: Simplifies state sharing. \n\uf0b7 \nUnder the Hood: Uses React context provider/consumer. \n\uf0b7 \nUsed in Real Apps: Theme, auth, locale. \n", "file_name": "React Notes.pdf"}, {"page": 4, "text": "\uf0b7 \nExample: \n\uf0b7 \nconst UserContext = React.createContext(); \n\uf0b7 \nHands-On Task: Create AuthContext. \n\uf0b7 \nInterview Question: How does context re-render consumers? \n\uf0b7 \nSafeWeb AI Use: Share user data across pages. \n12. React Router \n\uf0b7 \nWhat: Routing library to handle navigation. \n\uf0b7 \nWhy Important: Enables multi-page apps. \n\uf0b7 \nUnder the Hood: Uses HTML5 history API. \n\uf0b7 \nUsed in Real Apps: Page navigation. \n\uf0b7 \nExample: \n\uf0b7 \n<Route path=\"/scan\" element={<Scan />} /> \n\uf0b7 \nHands-On Task: Setup Login, Dashboard, Scan routes. \n\uf0b7 \nInterview Question: Difference between browser and hash routers? \n\uf0b7 \nSafeWeb AI Use: Navigate between sections. \n13. Custom Hooks \n\uf0b7 \nWhat: User-defined reusable hook functions. \n\uf0b7 \nWhy Important: Abstraction and reuse of logic. \n\uf0b7 \nUnder the Hood: Functions that call other hooks. \n\uf0b7 \nUsed in Real Apps: Reusable logic blocks. \n\uf0b7 \nExample: useAuth, useScanStatus \n\uf0b7 \nHands-On Task: Create useAuthGuard. \n\uf0b7 \nInterview Question: Naming rule for hooks? \n\uf0b7 \nSafeWeb AI Use: Custom logic management. \n14. useMemo & useCallback \n\uf0b7 \nWhat: Memoization hooks to optimize performance. \n\uf0b7 \nWhy Important: Prevents unnecessary recalculations or re-renders. \n\uf0b7 \nUnder the Hood: Caches previous return values. \n\uf0b7 \nUsed in Real Apps: Expensive operations, function refs. \n\uf0b7 \nExample: \n\uf0b7 \nconst memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. ", "file_name": "React Notes.pdf"}, {"page": 4, "text": "st memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. \n15. Refs and useRef \n\uf0b7 \nWhat: Direct DOM access or persist values across renders. \n\uf0b7 \nWhy Important: Needed for focus, timers, scroll. \n\uf0b7 \nUnder the Hood: Maintains mutable .current reference. \n", "file_name": "React Notes.pdf"}, {"page": 5, "text": "\uf0b7 \nUsed in Real Apps: Form fields, animations. \n\uf0b7 \nExample: inputRef.current.focus() \n\uf0b7 \nHands-On Task: Focus input on mount. \n\uf0b7 \nInterview Question: When to use refs? \n\uf0b7 \nSafeWeb AI Use: Scroll to report. \n16. Error Boundaries \n\uf0b7 \nWhat: Catch and handle render errors. \n\uf0b7 \nWhy Important: Prevent crashes. \n\uf0b7 \nUnder the Hood: Uses lifecycle methods (componentDidCatch). \n\uf0b7 \nUsed in Real Apps: Wrapping entire app/components. \n\uf0b7 \nExample: Class-based error catcher. \n\uf0b7 \nHands-On Task: Create ErrorBoundary wrapper. \n\uf0b7 \nInterview Question: Can hooks catch errors? \n\uf0b7 \nSafeWeb AI Use: Catch scan/report failures. \n17. Code Splitting \n\uf0b7 \nWhat: Load JS bundles on demand. \n\uf0b7 \nWhy Important: Reduces initial load. \n\uf0b7 \nUnder the Hood: Uses React.lazy and dynamic import. \n\uf0b7 \nUsed in Real Apps: Lazy-loading routes/pages. \n\uf0b7 \nExample: \n\uf0b7 \nconst Scan = React.lazy(() => import('./Scan')); \n\uf0b7 \nHands-On Task: Split heavy components. \n\uf0b7 \nInterview Question: Difference between lazy and suspense? \n\uf0b7 \nSafeWeb AI Use: Speed up first load. \n18. Higher Order Components \n\uf0b7 \nWhat: Functions returning components. \n\uf0b7 \nWhy Important: Reusable logic decorators. \n\uf0b7 \nUnder the Hood: Functional pattern. \n\uf0b7 \nUsed in Real Apps: Permissions, tracking. \n\uf0b7 \nExample: withLogging(Component) \n\uf0b7 \nHands-On Task: Create HOC for authentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Impo", "file_name": "React Notes.pdf"}, {"page": 5, "text": "uthentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Important: Flexible pattern. \n\uf0b7 \nUnder the Hood: Functions as children. \n\uf0b7 \nUsed in Real Apps: Sliders, animations. \n", "file_name": "React Notes.pdf"}, {"page": 6, "text": "\uf0b7 \nExample: <DataProvider render={(data) => <Chart data={data} />} \n\uf0b7 \nHands-On Task: Create MouseTracker. \n\uf0b7 \nInterview Question: Downsides of render props? \n\uf0b7 \nSafeWeb AI Use: Share UI logic. \n20. State Management \n\uf0b7 \nWhat: Tools to manage complex app state. \n\uf0b7 \nWhy Important: Scalability. \n\uf0b7 \nUnder the Hood: Central store and dispatch pattern. \n\uf0b7 \nUsed in Real Apps: Redux, Zustand. \n\uf0b7 \nExample: useReducer, Redux store \n\uf0b7 \nHands-On Task: Manage scan logs in global state. \n\uf0b7 \nInterview Question: Redux vs context? \n\uf0b7 \nSafeWeb AI Use: Global scan/auth state. \n21. Axios / Fetch \n\uf0b7 \nWhat: HTTP libraries to talk to APIs. \n\uf0b7 \nWhy Important: Core for data interaction. \n\uf0b7 \nUnder the Hood: Promise-based APIs. \n\uf0b7 \nUsed in Real Apps: Backend communication. \n\uf0b7 \nExample: axios.get('/api/report') \n\uf0b7 \nHands-On Task: Fetch scan results. \n\uf0b7 \nInterview Question: Axios vs fetch? \n\uf0b7 \nSafeWeb AI Use: Talk to scan API. \n22. Folder Structure \n\uf0b7 \nWhat: Organizing codebase. \n\uf0b7 \nWhy Important: Maintainability. \n\uf0b7 \nUnder the Hood: Logical separation. \n\uf0b7 \nUsed in Real Apps: Feature/domain-based. \n\uf0b7 \nExample: src/components, src/services \n\uf0b7 \nHands-On Task: Restructure SafeWeb AI project. \n\uf0b7 \nInterview Question: Best practices for large apps? \n\uf0b7 \nSafeWeb AI Use: Scale codebase. \n23. PropTypes / TypeScript \n\uf0b7 \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.p", "file_name": "React Notes.pdf"}, {"page": 6, "text": " \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.propTypes = { name: PropTypes.string } \n", "file_name": "React Notes.pdf"}, {"page": 7, "text": "\uf0b7 \nHands-On Task: Add PropTypes to core components. \n\uf0b7 \nInterview Question: TS vs PropTypes? \n\uf0b7 \nSafeWeb AI Use: Ensure correct data handling. \n24. Testing (Jest + RTL) \n\uf0b7 \nWhat: Automated validation of logic and UI. \n\uf0b7 \nWhy Important: Prevent regressions. \n\uf0b7 \nUnder the Hood: Simulates components. \n\uf0b7 \nUsed in Real Apps: CI pipelines. \n\uf0b7 \nExample: expect(getByText('Welcome')).toBeInTheDocument() \n\uf0b7 \nHands-On Task: Test login and scan page. \n\uf0b7 \nInterview Question: Unit vs integration test? \n\uf0b7 \nSafeWeb AI Use: Bug-free reliability. \n \n \nReact Interview Questions & Precise Answers \n \n1. What happens to JSX during the build process? \no JSX is transpiled by Babel into React.createElement() calls that build the \nvirtual DOM. \n2. Difference between functional and class components? \no Functional: Simple functions using hooks. Class: ES6 classes using lifecycle \nmethods. \n3. Can a child modify props? \no No. Props are read-only; only the parent can change them. \n4. How does state cause a re-render? \no Calling setState triggers React\u2019s scheduler to re-render that component with \nupdated state. \n5. What is a synthetic event? \no A cross-browser wrapper around native events, provided by React for \nconsistency. \n6. Ways to implement conditional rendering? \no \nif/else, ternary ? :, logical AND &&, IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useE", "file_name": "React Notes.pdf"}, {"page": 7, "text": ", IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useEffect? \no It determines when the effect runs. Empty array means run once. Include variables \nto trigger rerun when they change. \n9. Why can\u2019t hooks be called conditionally? \n", "file_name": "React Notes.pdf"}, {"page": 8, "text": "o Because React relies on the order of hooks. Conditional calls break this order, \ncausing bugs. \n10. Difference between controlled and uncontrolled components? \no Controlled: state-driven. Uncontrolled: DOM-driven (using refs). \n11. How does context re-render consumers? \no When context value changes, all consumers using that context re-render. \n12. Difference between browser and hash routers? \no BrowserRouter uses HTML5 history API. HashRouter uses URL hash (#) for \nrouting. \n13. Naming rule for custom hooks? \no Must start with use to let React track them internally. \n14. When does useMemo recalculate? \no When any dependency in its dependency array changes. \n15. When to use refs? \no When you need direct DOM access or to persist values without triggering re-\nrenders. \n16. Can hooks catch errors? \no No. Only class-based error boundaries can catch render-time errors. \n17. Difference between lazy and suspense? \no \nlazy dynamically imports components. Suspense wraps lazy-loaded components \nto handle loading fallback. \n18. Compare HOCs with hooks? \no HOCs wrap components for reuse. Hooks reuse logic inside functional \ncomponents. \n19. Downsides of render props? \no Can lead to deeply nested structures (callback hell). \n20. Redux vs Context? \no Redux is for complex/global state with middleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps fo", "file_name": "React Notes.pdf"}, {"page": 8, "text": "dleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps folder structure? \no Feature-based or domain-based structure with clear separation of concerns. \n23. TypeScript vs PropTypes? \no TypeScript checks types at compile-time. PropTypes check at runtime and are \nlimited. \n24. Unit vs integration test? \no Unit: test single component/function. Integration: test interactions between \ncomponents. \n \n \n", "file_name": "React Notes.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": " \n \nGeneral SQL Topics \n1. INTRODUCTION TO SQL \n\uf0b7 \nSQL: Structured Query Language, used to interact with relational databases. \n\uf0b7 \nRelational Database: Stores data in tables (rows & columns). \n\uf0b7 \nCommon RDBMS: MySQL, PostgreSQL, SQLite, Oracle, SQL Server. \n \n2. SQL DATA TYPES \n\uf0b7 \nINT: Integer numbers \n\uf0b7 \nVARCHAR(n): Variable-length string with a maximum of n characters \n\uf0b7 \nCHAR(n): Fixed-length string \n\uf0b7 \nDATE / DATETIME: Date or timestamp \n\uf0b7 \nDECIMAL(p, s): Exact numeric value with precision and scale \n\uf0b7 \nBOOLEAN: True or False \n\uf0b7 \nTEXT: Long-form string data \n \n3. BASIC SQL COMMANDS \n\u27a4 Create Table \nCREATE TABLE Employees ( \n  id INT PRIMARY KEY, \n  name VARCHAR(100), \n  salary INT, \n  department VARCHAR(50) \n); \n\u27a4 Insert \nINSERT INTO Employees (id, name, salary, department) \nVALUES (1, 'Alice', 60000, 'HR'); \n\u27a4 Select \nSELECT * FROM Employees; \nSELECT name, salary FROM Employees; \nSELECT * FROM Employees WHERE salary > 50000; \n\u27a4 Update \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 2, "text": "UPDATE Employees SET salary = 70000 WHERE id = 1; \n\u27a4 Delete \nDELETE FROM Employees WHERE id = 1; \n \n4. FILTERING DATA \n\u27a4 WHERE, AND, OR, NOT \nSELECT * FROM Employees \nWHERE department = 'HR' AND salary > 50000; \n\u27a4 IN, BETWEEN, LIKE \nSELECT * FROM Employees WHERE department IN ('HR', 'Sales'); \nSELECT * FROM Employees WHERE salary BETWEEN 40000 AND 70000; \nSELECT * FROM Employees WHERE name LIKE 'A%'; -- starts with A \n \n5. SORTING & LIMITING \nSELECT * FROM Employees ORDER BY salary DESC; \nSELECT * FROM Employees LIMIT 5; \n \n6. AGGREGATE FUNCTIONS \nSELECT COUNT(*) FROM Employees; \nSELECT AVG(salary) FROM Employees; \nSELECT SUM(salary), MAX(salary), MIN(salary) FROM Employees; \n \n7. GROUPING & FILTERING AGGREGATES \nSELECT department, AVG(salary) AS avg_salary \nFROM Employees \nGROUP BY department \nHAVING AVG(salary) > 50000; \n \n8. JOINS \n\u27a4 Syntax: \nSELECT e.name, d.name \nFROM Employees e \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 3, "text": "JOIN Departments d ON e.department_id = d.id; \n8.1. INNER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nINNER JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 Only matching department IDs shown. \n8.2. LEFT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All employees shown, even if no department. \n8.3. RIGHT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All departments shown, even if no employee. \n8.4. FULL OUTER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id \nUNION \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n \n9. SUBQUERIES \nUsed to embed one query inside another. \nSELECT name FROM Employees \nWHERE salary > ( \n  SELECT AVG(salary) FROM Employees \n); \n \n10. CONSTRAINTS \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 4, "text": "\uf0b7 \nPRIMARY KEY: Uniquely identifies each record \n\uf0b7 \nFOREIGN KEY: Links to primary key of another table \n\uf0b7 \nUNIQUE: Ensures all values in a column are different \n\uf0b7 \nNOT NULL: Disallows NULL values \n\uf0b7 \nCHECK: Ensures a condition is met \n \n11. NORMALIZATION  \n\uf0b7 \nProcess of organizing data to reduce redundancy and improve data integrity. \n\uf0b7 \n1NF: Atomic values \n\uf0b7 \n2NF: No partial dependencies \n\uf0b7 \n3NF: No transitive dependencies \n\uf0b7 \nEnsures data integrity and minimizes duplication. \n\ud83c\udfaf Why Normalize? \n\uf0b7 \nEliminate duplicate data \n\uf0b7 \nEnsure data consistency \n\uf0b7 \nImprove data structure for querying and updates \n \n\ud83d\udcda Normal Forms (NF) \n\u2705 1NF \u2013 First Normal Form \nRule: All values must be atomic (indivisible). \nFix: Remove repeating groups and store one value per cell. \nExample (Bad): \nID Name Phones \n1 Alice 1234, 5678 \nFix (1NF): \nID Name Phone \n1 Alice 1234 \n1 Alice 5678 \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 5, "text": "\u2705 2NF \u2013 Second Normal Form \nRule: Be in 1NF + No Partial Dependency on a composite key. \nFix: Move partially dependent data to a new table. \nExample: \nComposite key: (StudentID, CourseID) \nStudentID CourseID StudentName \nFix (2NF): \n\uf0b7 \nTable 1: StudentCourses(StudentID, CourseID) \n\uf0b7 \nTable 2: Students(StudentID, StudentName) \n \n\u2705 3NF \u2013 Third Normal Form \nRule: Be in 2NF + No transitive dependency. \nFix: Remove data that's indirectly dependent on the primary key. \nExample (Bad): \nEmpID Name DeptID DeptName \nFix (3NF): \n\uf0b7 \nTable 1: Employees(EmpID, Name, DeptID) \n\uf0b7 \nTable 2: Departments(DeptID, DeptName) \n \n\ud83e\udde0 When Not to Normalize? \n\uf0b7 \nFor read-heavy applications (analytics, reporting) \n\uf0b7 \nWhen query performance is more important than data integrity \n \n\u2705 Real-Life Analogy \n\uf0b7 \n1NF: Each house (record) has its own mailbox (cell), not a shared one \n\uf0b7 \n2NF: One key opens only one mailbox (no shared access) \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 6, "text": "\uf0b7 \n3NF: The key opens the right mailbox and not someone else\u2019s cabinet (no indirect \ndependencies) \n \n \n12. INDEXING \nIndexing is a powerful technique to speed up SELECT queries on large tables. \n\uf0b7 \nSpeeds up WHERE, JOIN, GROUP BY, and ORDER BY queries \n\uf0b7 \nBoosts search performance on large datasets. \n\uf0b7 \nAvoid on frequently updated or low-cardinality columns \n\uf0b7 \nUse EXPLAIN to test effectiveness \n\uf0b7 \nAvoid over-indexing (inserts & updates become slower). \n\u2705 Types \n\uf0b7 \nSingle-column Index \n \nCREATE INDEX idx_salary ON Employees(salary); \n\uf0b7 \nComposite Index \n \nCREATE INDEX idx_name_dept ON Employees(name, department);\n \n13. VIEWS \n\uf0b7 \nA view is a virtual table based on a query \n\uf0b7 \nThey do not store data. Use Materialized Views (if supported) for cached result. \n\uf0b7 \nSimplify complex queries. \n\uf0b7 \nEnhance security (restrict column access) \n\uf0b7 \nEnable reusable logic \n\u2705 Example \nCREATE VIEW HR_Employees AS \nSELECT name, salary \nFROM Employees \nWHERE department = 'HR'; \n \n \n14. TRANSACTIONS & ACID \nA Transaction is a logical unit of work consisting of one or more SQL statements. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 7, "text": "Use ROLLBACK; to undo changes before COMMIT;. \n\uf0b7 \nACID: \no \nAtomicity: All or none \no \nConsistency: Valid data state \no \nIsolation: No interference \no \nDurability: Permanent changes \n\u2705 Example \nBEGIN; \nUPDATE Accounts SET balance = balance - 100 WHERE id = 1; \nUPDATE Accounts SET balance = balance + 100 WHERE id = 2; \nCOMMIT; \n \n15. WINDOW FUNCTIONS \nWindow functions perform calculations across rows related to the current row \u2014 without collapsing \nthem like GROUP BY.  \nUsed for row-level calculations without grouping. \nUse cases : Leaderboards, Change Tracking, Tired analysis \nRANK(), DENSE_RANK(), ROW_NUMBER() \n\u2705 Example \nSELECT name, salary, \n  RANK() OVER (ORDER BY salary DESC) AS salary_rank \nFROM Employees; \n\ud83d\udd11 Popular Window Functions \n\uf0b7 \nROW_NUMBER(), RANK(), DENSE_RANK() \n\uf0b7 \nLAG(), LEAD() \n\uf0b7 \nNTILE(n) (for percentiles) \n \n16. COMMON TABLE EXPRESSIONS (CTEs) \nCTEs are temporary result sets used within queries \u2014 easier to read & maintain. \n\u2705 Syntax \nWITH HighEarners AS ( \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 8, "text": "  SELECT * FROM Employees WHERE salary > 50000 \n) \nSELECT name FROM HighEarners; \n\ud83e\udde0 Benefits \n\uf0b7 \nBreak complex queries into readable blocks \n\uf0b7 \nUse recursive CTEs for hierarchical data \n \n17. UNION vs UNION ALL \nSELECT name FROM Managers \nUNION \nSELECT name FROM Employees; -- Removes duplicates \n \nSELECT name FROM Managers \nUNION ALL \nSELECT name FROM Employees; -- Keeps duplicates \n \n18. SET OPERATIONS \nSELECT name FROM A \nINTERSECT \nSELECT name FROM B; \n \nSELECT name FROM A \nEXCEPT \nSELECT name FROM B; \n\uf0b7 \n\u26a0 Not supported in MySQL; supported in PostgreSQL/SQL Server. \n \n19. NULL Handling \nSELECT name, COALESCE(nickname, 'No Nick') FROM Users; \nSELECT NULLIF(salary, 0);  -- Returns NULL if salary = 0 \n\uf0b7 \nUse IS NULL / IS NOT NULL \n\uf0b7 \nCOALESCE(), IFNULL(), NULLIF() \n \n20. CASE Statements \nSELECT name, \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 9, "text": "CASE \n  WHEN salary > 70000 THEN 'High' \n  WHEN salary > 40000 THEN 'Medium' \n  ELSE 'Low' \nEND AS salary_level \nFROM Employees; \n \n21. Stored Procedures & Functions (Advanced) \nStored Procedures are saved SQL blocks that perform actions. \nFunctions return a single value. Use procedures for reusable logic. Use functions in SELECT, WHERE, or \nJOIN clauses \n\u2705 Procedure Example \nCREATE PROCEDURE GetHighEarners() \nBEGIN \n  SELECT * FROM Employees WHERE salary > 70000; \nEND; \n\u2705 Function Example \nCREATE FUNCTION TaxAmount(salary DECIMAL) \nRETURNS DECIMAL \nBEGIN \n  RETURN salary * 0.10; \nEND; \n \n \n22. Temporary Tables \nCREATE TEMPORARY TABLE Temp_Employees AS \nSELECT * FROM Employees WHERE department = 'HR'; \n \n23. Triggers (Advanced - Rare) \nCREATE TRIGGER before_insert_trigger \nBEFORE INSERT ON Employees \nFOR EACH ROW \nSET NEW.salary = IF(NEW.salary < 0, 0, NEW.salary); \n\uf0b7 \nUsed for validation, logging, auto-calculation. \n \n24. Data Definition vs Data Manipulation vs Data Control \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 10, "text": "\uf0b7 \nDDL (Definition): CREATE, ALTER, DROP \n\uf0b7 \nDML (Manipulation): SELECT, INSERT, UPDATE, DELETE \n\uf0b7 \nDCL (Control): GRANT, REVOKE \n\uf0b7 \nTCL (Transaction): COMMIT, ROLLBACK \n \nINTERVIEW QUERY PATTERNS \n\u27a4 Nth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET 1; -- 2nd highest \n\u27a4 Duplicate Rows \nSELECT name, COUNT(*) \nFROM Employees \nGROUP BY name \nHAVING COUNT(*) > 1; \n\u27a4 Same Salary Employees \nSELECT * FROM Employees \nWHERE salary IN ( \n  SELECT salary FROM Employees \n  GROUP BY salary \n  HAVING COUNT(*) > 1 \n); \n\u27a4 Employees with Max Salary Per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, \n         RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\u27a4 Self Join Example \nSELECT A.name AS Employee, B.name AS Manager \nFROM Employees A \nJOIN Employees B ON A.manager_id = B.id; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 11, "text": "\u27a4 EXISTS vs IN vs JOIN \n-- EXISTS \nSELECT name FROM Employees e \nWHERE EXISTS ( \n  SELECT 1 FROM Departments d WHERE d.id = e.department_id \n); \n-- IN \nSELECT name FROM Employees \nWHERE department_id IN (SELECT id FROM Departments); \n-- JOIN \nSELECT e.name, d.name FROM Employees e \nJOIN Departments d ON e.department_id = d.id; \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 12, "text": "Advanced SQL Topics \n \n1. Recursive CTEs (Made Simple) \nA Recursive CTE lets a query call itself, useful when working with hierarchies like employees \n& managers or categories & subcategories. \nEasy Analogy: \nThink of it like a loop in SQL. Start with one person (manager), then find their subordinates, then \nsubordinates of subordinates, and so on. \nSyntax: \nWITH RECURSIVE cte_name AS ( \n  SELECT ...  -- Starting point (anchor) \n  UNION ALL \n  SELECT ... FROM cte_name ... -- Repeat until done \n) \nSELECT * FROM cte_name; \nExample: \nWITH RECURSIVE Subordinates AS ( \n  SELECT id, name, manager_id FROM Employees WHERE id = 1 -- Top manager \n  UNION ALL \n  SELECT e.id, e.name, e.manager_id \n  FROM Employees e \n  JOIN Subordinates s ON e.manager_id = s.id \n) \nSELECT * FROM Subordinates; \n\u2705 This will return all employees working under manager ID 1, even indirectly. \n \n2. Window Functions \nThese functions look at other rows in the result without grouping them. Useful when you \nwant to compare each row with others. \nEveryday Use Case: \n\"Show each employee's salary along with the previous and next employee's salary.\" \nKey Functions: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 13, "text": "\uf0b7 \nLAG(column) \u2013 Looks before current row \n\uf0b7 \nLEAD(column) \u2013 Looks after current row \n\uf0b7 \nNTILE(n) \u2013 Divides into n equal groups (for percentiles/quartiles) \n\uf0b7 \nRANK(), DENSE_RANK(), ROW_NUMBER() \u2013 Ranking logic \nExample: \nSELECT name, salary, \n       LAG(salary) OVER (ORDER BY salary) AS prev_salary, \n       LEAD(salary) OVER (ORDER BY salary) AS next_salary \nFROM Employees; \n \n3. Working with JSON in SQL \nModern databases allow storing and querying JSON data inside SQL columns (especially \nuseful in dynamic or semi-structured data). \nPostgreSQL: \nSELECT data->>'name' AS name FROM orders WHERE data->>'status' = 'shipped'; \nMySQL: \nSELECT JSON_EXTRACT(data, '$.name') AS name FROM orders; \n\ud83d\udd0d Here, data is a column containing JSON like: { \"name\": \"Laptop\", \"status\": \"shipped\" } \n \n4. Performance Optimization Techniques \nOptimizing your SQL queries can make your app faster, especially for large data. \na. Indexing \n\uf0b7 \nLike a book index: helps locate rows faster \n\uf0b7 \nUseful for WHERE, JOIN, and ORDER BY \nCREATE INDEX idx_salary ON Employees(salary); \nb. Query Refactoring \n\uf0b7 \nAvoid SELECT * \u2192 only select needed columns \n\uf0b7 \nUse EXISTS instead of IN when subquery is large \n\uf0b7 \nApply filters early (use WHERE before GROUP BY) \nc. Execution Plan \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 14, "text": "Use EXPLAIN to understand how the database runs your query: \nEXPLAIN SELECT * FROM Employees WHERE department_id = 3; \n \n5. Stored Procedures & Functions (Simplified) \nStored Procedures = SQL scripts stored in the database that can be reused. Like a saved \nfunction. \nExample with Loop: \nDELIMITER // \nCREATE PROCEDURE GiveBonus() \nBEGIN \n  DECLARE done INT DEFAULT FALSE; \n  DECLARE emp_id INT; \n  DECLARE emp_cursor CURSOR FOR SELECT id FROM Employees; \n  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE; \n \n  OPEN emp_cursor; \n  read_loop: LOOP \n    FETCH emp_cursor INTO emp_id; \n    IF done THEN \n      LEAVE read_loop; \n    END IF; \n    UPDATE Employees SET salary = salary + 5000 WHERE id = emp_id; \n  END LOOP; \n  CLOSE emp_cursor; \nEND // \nDELIMITER ; \n\u2705 This procedure gives a \u20b95000 bonus to all employees. \n \n6. Importing/Exporting Data \nMoving data between CSV files and SQL is common in real projects. \nMySQL: \nLOAD DATA INFILE '/path/file.csv' \nINTO TABLE Employees \nFIELDS TERMINATED BY ',' \nLINES TERMINATED BY '\\n' \nIGNORE 1 ROWS; \nPostgreSQL: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 15, "text": "COPY Employees(name, salary) \nFROM '/path/file.csv' \nDELIMITER ',' \nCSV HEADER; \n \n7. Role-Based Access Control (Security Basics) \nSQL lets you give different permissions to different users. \nExample: \nGRANT SELECT, INSERT ON Employees TO 'analyst'; \nREVOKE DELETE ON Employees FROM 'analyst'; \n\u2705 'analyst' can view and add data, but can't delete anything. \n \n8. Star vs Snowflake Schema  \nUsed in Data Warehouses & Reporting Tools. \nStar Schema: \n\uf0b7 \nOne central fact table (e.g., Sales) \n\uf0b7 \nLinked to dimension tables (Customer, Product) \n\uf0b7 \nEasy to query, faster for reporting \nSnowflake Schema: \n\uf0b7 \nDimensions are normalized \n\uf0b7 \nLess redundancy but more joins \n \n9. OLTP vs OLAP (Database Types Simplified) \nFeature \nOLTP \nOLAP \n              Purpose \nDaily transactions \nData analysis \n              Design \nHighly normalized \ntables \nDenormalized \nschema \n             Examples \nBanking, eCommerce Reporting,Data \nWarehouse \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "\ud83c\udfaf INTERVIEW & PLACEMENT \n \n\ud83d\udd39 Basic Level (Entry / Fresher) \n1. What is SQL? \nStructured Query Language used to interact with relational databases. \n2. What is the difference between WHERE and HAVING? \nWHERE filters rows before aggregation, HAVING filters after aggregation. \n3. What is a Primary Key? \nA unique identifier for each row in a table. Cannot contain NULL values. \n4. Difference between INNER JOIN and LEFT JOIN? \nINNER JOIN: Returns matched rows only. \nLEFT JOIN: Returns all rows from the left table, even if no match. \n5. How do you handle NULLs in SQL? \nUse IS NULL, IS NOT NULL, COALESCE(), IFNULL(), NULLIF(). \n6. What is a Foreign Key? \nIt links two tables by referring to the primary key of another table. \n7. What is normalization? \nProcess of organizing data to reduce redundancy and improve integrity. \n8. What is denormalization? \nCombining tables to improve read performance by reducing joins. \n9. What does the DISTINCT keyword do? \nRemoves duplicate rows from the result set. \n10. What is the use of LIMIT or TOP? \nUsed to limit the number of rows returned by a query. \n\ud83d\udd39 Intermediate Level \n11. What are aggregate functions? \nFunctions like SUM(), AVG(), COUNT(), MAX(), MIN(). \n12. What is a subquery? \nA query nested inside another query. \n13. What is the difference between UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey impro", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "een UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey improve the speed of data retrieval. \n16. What is a view? \nA virtual table based on the result-set of a query. \n17. What are window functions? \nFunctions like RANK(), ROW_NUMBER() that work across rows. \n18. Difference between RANK() and DENSE_RANK()? \nRANK() skips ranks on ties, DENSE_RANK() does not. \n19. What is a CTE (Common Table Expression)? \nA temporary result set defined within the execution scope of a query. \n20. Explain ACID properties. \nAtomicity, Consistency, Isolation, Durability - ensures reliable transactions. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": "21. What is a composite key? \nA primary key made of multiple columns. \n22. Difference between DELETE and TRUNCATE? \nDELETE can be conditional and logs row-by-row deletion; TRUNCATE removes all rows \nfaster without logging each deletion. \n23. What is a surrogate key? \nA unique identifier for an entity that is not derived from application data. \n24. What is referential integrity? \nEnsures foreign key values match primary key values in the referenced table. \n25. How does EXISTS differ from IN? \nEXISTS stops on first match; IN evaluates all results. \n26. How do you use GROUP BY with multiple columns? \nYou can group by multiple columns by separating them with commas. \n27. Can we use ORDER BY with GROUP BY? \nYes. GROUP BY groups the data; ORDER BY sorts the grouped results. \n28. What is a scalar subquery? \nA subquery that returns exactly one value. \n29. What are correlated subqueries? \nSubqueries that refer to columns from the outer query. \n30. What is the use of ISNULL() or IFNULL()? \nTo replace NULL values with custom values. \n\ud83d\udd39 Advanced Level \n31. What are triggers in SQL? \nProcedures that automatically execute on certain events. \n32. What are stored procedures? \nReusable blocks of SQL statements stored in the database. \n33. What is the use of EXPLAIN or EXPLAIN PLAN? \nTo understand how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *,", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": " how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *, and use EXPLAIN to analyze. \n36. Difference between clustered and non-clustered index? \nClustered index determines row order in the table; non-clustered does not. \n37. Difference between OLTP and OLAP systems? \nOLTP: Online Transaction Processing (day-to-day operations). \nOLAP: Online Analytical Processing (data analysis and reporting). \n38. What are materialized views? \nStored query results that can be refreshed periodically. \n39. How do you implement pagination in SQL? \nUsing LIMIT and OFFSET or ROW_NUMBER() for custom logic. \n40. How do you handle duplicate rows? \nUsing ROW_NUMBER() or DISTINCT or CTEs with filtering. \n41. What are the different types of joins? \nINNER, LEFT, RIGHT, FULL OUTER, CROSS JOIN, SELF JOIN. \n42. What is a CROSS JOIN? \nReturns Cartesian product of two tables. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 18, "text": "43. Can you sort by an alias in SQL? \nYes, you can use the alias name in the ORDER BY clause. \n44. What is the difference between SQL and NoSQL? \nSQL is relational and uses tables. NoSQL is non-relational and uses documents, key-\nvalue pairs, etc. \n45. What are the common data types in SQL? \nINT, VARCHAR, DATE, BOOLEAN, DECIMAL, TEXT. \n46. Can a table have multiple foreign keys? \nYes, a table can reference multiple other tables using foreign keys. \n47. What happens if you violate a foreign key constraint? \nThe query fails with an integrity constraint violation. \n48. How can you change a column datatype in SQL? \nUsing ALTER TABLE table_name MODIFY column_name new_datatype; \n49. What are NULL-safe operators? \nOperators like <=> in MySQL allow safe comparison with NULL. \n50. How would you detect and remove duplicate records? \nUsing CTE and ROW_NUMBER() to filter duplicates. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 19, "text": "Real Company SQL Questions \nGoogle \n\uf0b7 \nSecond Highest Salary \nSELECT MAX(salary) AS SecondHighest \nFROM Employees \nWHERE salary < (SELECT MAX(salary) FROM Employees); \n\uf0b7 \nRemove Duplicate Emails Using ROW_NUMBER() \nWITH RankedEmails AS ( \n  SELECT *, ROW_NUMBER() OVER (PARTITION BY email ORDER BY id) \nAS rn \n  FROM Users \n) \nDELETE FROM RankedEmails WHERE rn > 1; \n\uf0b7 \nEmployees Earning More Than Average Salary \nSELECT name, salary \nFROM Employees \nWHERE salary > (SELECT AVG(salary) FROM Employees); \nAmazon \n\uf0b7 \nCustomers Who Ordered in Every Month \nSELECT customer_id \nFROM Orders \nGROUP BY customer_id \nHAVING COUNT(DISTINCT MONTH(order_date)) = 12; \n\uf0b7 \nTop 3 Earners in Each Department \nSELECT * \nFROM ( \n  SELECT *, DENSE_RANK() OVER (PARTITION BY department_id \nORDER BY salary DESC) AS rank \n  FROM Employees \n) ranked \nWHERE rank <= 3; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 20, "text": "\uf0b7 \nFind Returning Users Using LAG \nSELECT user_id, order_date, \n       LAG(order_date) OVER (PARTITION BY user_id ORDER BY \norder_date) AS previous_order \nFROM Orders; \nTCS \n\uf0b7 \nEmployees Joined in Last 6 Months \nSELECT * FROM Employees \nWHERE join_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH); \n\uf0b7 \nManager-Reportee Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n\uf0b7 \nDepartment with Highest Average Salary \nSELECT department_id \nFROM Employees \nGROUP BY department_id \nORDER BY AVG(salary) DESC \nLIMIT 1; \nFlipkart \n\uf0b7 \nTop 5 Selling Products by Revenue \nSELECT product_id, SUM(price * quantity) AS revenue \nFROM Orders \nGROUP BY product_id \nORDER BY revenue DESC \nLIMIT 5; \n\uf0b7 \nUsers with More Than 3 Failed Transactions \nSELECT user_id \nFROM Transactions \nWHERE status = 'FAILED' \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 21, "text": "GROUP BY user_id \nHAVING COUNT(*) > 3; \n\uf0b7 \nOrders Not Yet Shipped \nSELECT * \nFROM Orders \nWHERE status = 'PLACED' AND shipped_date IS NULL; \nSQL Problem-Solving Round \n \n\uf0b7 \nNth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET N-1; \n\uf0b7 \nDuplicate Emails \nSELECT email, COUNT(*) \nFROM Users \nGROUP BY email \nHAVING COUNT(*) > 1; \n\uf0b7 \nTop Earner per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, RANK() OVER (PARTITION BY department_id ORDER BY \nsalary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\uf0b7 \nCustomers Who Never Ordered \nSELECT c.customer_id, c.name \nFROM Customers c \nLEFT JOIN Orders o ON c.customer_id = o.customer_id \nWHERE o.order_id IS NULL; \n\uf0b7 \nEmployees Hired in the Last Month \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 22, "text": "SELECT * FROM Employees \nWHERE hire_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 \nMONTH) AND CURDATE(); \n\uf0b7 \nUser Order Summary \nSELECT user_id, COUNT(*) AS order_count, SUM(total_amount) AS \ntotal_spent \nFROM Orders \nGROUP BY user_id; \n\uf0b7 \n7-Day Rolling Login Count \nSELECT user_id, login_date, \n       COUNT(*) OVER ( \n         PARTITION BY user_id ORDER BY login_date \n         ROWS BETWEEN 6 PRECEDING AND CURRENT ROW \n       ) AS seven_day_logins \nFROM Logins; \n\uf0b7 \nFunnel Drop-off Analysis \nSELECT stage, COUNT(DISTINCT user_id) AS user_count \nFROM Funnel \nGROUP BY stage \nORDER BY stage; \n\uf0b7 \nAverage Time Between Orders \nSELECT user_id, AVG(DATEDIFF(order_date, LAG(order_date) OVER \n(PARTITION BY user_id ORDER BY order_date))) AS \navg_days_between_orders \nFROM Orders; \n\uf0b7 \nSelf Join for Employee Manager Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 1, "text": "React Mastery Path  \n \nPhase 1: React Fundamentals \n1. JSX (JavaScript XML) \n\uf0b7 \nWhat: A syntax extension for JavaScript that looks like HTML and is used to describe \nUI structure in React. \n\uf0b7 \nWhy Important: Enables declarative UI creation and readable component structure. \n\uf0b7 \nUnder the Hood: JSX is transpiled to React.createElement() by Babel, which builds \na virtual DOM tree. \n\uf0b7 \nUsed in Real Apps: Defining component UI layout. \n\uf0b7 \nExample: \n\uf0b7 \nconst Welcome = () => <h1>Hello, SafeWeb AI User!</h1>; \n\uf0b7 \nHands-On Task: Create a Header, Footer, and Landing JSX layout. \n\uf0b7 \nInterview Question: What happens to JSX during the build process? \n\uf0b7 \nSafeWeb AI Use: Structure landing pages, hero sections, or onboarding screens. \n2. Components (Functional & Class) \n\uf0b7 \nWhat: Independent, reusable pieces of UI. \n\uf0b7 \nWhy Important: Encapsulates logic and markup for reuse and readability. \n\uf0b7 \nUnder the Hood: Each component maintains its own lifecycle and props/context \nhandling. \n\uf0b7 \nUsed in Real Apps: Every UI block (Navbar, Card, Form) is a component. \n\uf0b7 \nExample: \n\uf0b7 \nfunction Card(props) { \n\uf0b7 \n  return <div className=\"card\">{props.content}</div>; \n\uf0b7 \n} \n\uf0b7 \nHands-On Task: Build a FeatureCard component for highlighting SafeWeb AI \nfeatures. \n\uf0b7 \nInterview Question: Difference between functional and class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables c", "file_name": "React Notes.pdf"}, {"page": 1, "text": "nd class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables communication between components. \n\uf0b7 \nUnder the Hood: Props are passed as parameters to functions. \n\uf0b7 \nUsed in Real Apps: Passing user info, config, styles. \n\uf0b7 \nExample: \n\uf0b7 \nconst Greeting = ({ name }) => <h2>Hello, {name}</h2>; \n\uf0b7 \nHands-On Task: Pass site scan results from parent to child. \n", "file_name": "React Notes.pdf"}, {"page": 2, "text": "\uf0b7 \nInterview Question: Can a child modify props? \n\uf0b7 \nSafeWeb AI Use: Show user-specific security reports. \n4. State \n\uf0b7 \nWhat: A built-in object used to hold dynamic data. \n\uf0b7 \nWhy Important: Controls component behavior over time. \n\uf0b7 \nUnder the Hood: React uses useState to store and re-render components on update. \n\uf0b7 \nUsed in Real Apps: Handling form inputs, toggles, modals. \n\uf0b7 \nExample: \n\uf0b7 \nconst [email, setEmail] = useState(''); \n\uf0b7 \nHands-On Task: Build a login form managing email/password state. \n\uf0b7 \nInterview Question: How does state cause a re-render? \n\uf0b7 \nSafeWeb AI Use: Manage user input and scan configuration. \n5. Event Handling \n\uf0b7 \nWhat: Listening and responding to user events. \n\uf0b7 \nWhy Important: Powers interactivity. \n\uf0b7 \nUnder the Hood: Synthetic event system based on native events. \n\uf0b7 \nUsed in Real Apps: Form submission, buttons, toggles. \n\uf0b7 \nExample: \n\uf0b7 \n<button onClick={handleScan}>Start Scan</button> \n\uf0b7 \nHands-On Task: Add a \u201cStart Scan\u201d button with click handler. \n\uf0b7 \nInterview Question: What is a synthetic event? \n\uf0b7 \nSafeWeb AI Use: Trigger a website scan. \n6. Conditional Rendering \n\uf0b7 \nWhat: Rendering different UI based on conditions. \n\uf0b7 \nWhy Important: Enhances UX by showing relevant data. \n\uf0b7 \nUnder the Hood: Simple JavaScript logic (ternaries, &&, if). \n\uf0b7 \nUsed in Real Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to impl", "file_name": "React Notes.pdf"}, {"page": 2, "text": "al Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to implement conditional rendering? \n\uf0b7 \nSafeWeb AI Use: Show different UI during scan progress. \n7. Lists and Keys \n\uf0b7 \nWhat: Rendering multiple elements using map() with unique key props. \n\uf0b7 \nWhy Important: Efficient rendering and reconciliation. \n\uf0b7 \nUnder the Hood: Keys help React identify changed, added, or removed items. \n\uf0b7 \nUsed in Real Apps: Listing scan results, history logs. \n\uf0b7 \nExample: \n", "file_name": "React Notes.pdf"}, {"page": 3, "text": "\uf0b7 \n{urls.map((url) => <li key={url}>{url}</li>)} \n\uf0b7 \nHands-On Task: Display a list of scanned URLs. \n\uf0b7 \nInterview Question: Why are keys important in lists? \n\uf0b7 \nSafeWeb AI Use: Show scanned website list. \n8. useEffect \n\uf0b7 \nWhat: Side effects like data fetching, subscriptions. \n\uf0b7 \nWhy Important: Handles operations outside render. \n\uf0b7 \nUnder the Hood: Scheduled after paint, cleanup via return function. \n\uf0b7 \nUsed in Real Apps: Fetching scan results, triggering alerts. \n\uf0b7 \nExample: \n\uf0b7 \nuseEffect(() => { fetchData(); }, []); \n\uf0b7 \nHands-On Task: Fetch dummy scan data on load. \n\uf0b7 \nInterview Question: How does the dependency array work? \n\uf0b7 \nSafeWeb AI Use: Load recent scan history on dashboard. \n9. Hooks (Intro) \n\uf0b7 \nWhat: Special functions to use React features in functional components. \n\uf0b7 \nWhy Important: Replaces classes with reusable logic. \n\uf0b7 \nUnder the Hood: Hooks use internal closures and React's fiber scheduler. \n\uf0b7 \nUsed in Real Apps: All stateful or side-effect components. \n\uf0b7 \nExample: useState, useEffect \n\uf0b7 \nHands-On Task: Use useState and useEffect together. \n\uf0b7 \nInterview Question: Why can\u2019t hooks be called conditionally? \n\uf0b7 \nSafeWeb AI Use: State and side effect logic. \n10. Forms \n\uf0b7 \nWhat: Collecting and managing user input. \n\uf0b7 \nWhy Important: Central for user interaction. \n\uf0b7 \nUnder the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 ", "file_name": "React Notes.pdf"}, {"page": 3, "text": "r the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 \nHands-On Task: Build scan request form. \n\uf0b7 \nInterview Question: Difference between controlled and uncontrolled components? \n\uf0b7 \nSafeWeb AI Use: Get website input from users. \n11. Context API \n\uf0b7 \nWhat: Global state manager for passing data without prop drilling. \n\uf0b7 \nWhy Important: Simplifies state sharing. \n\uf0b7 \nUnder the Hood: Uses React context provider/consumer. \n\uf0b7 \nUsed in Real Apps: Theme, auth, locale. \n", "file_name": "React Notes.pdf"}, {"page": 4, "text": "\uf0b7 \nExample: \n\uf0b7 \nconst UserContext = React.createContext(); \n\uf0b7 \nHands-On Task: Create AuthContext. \n\uf0b7 \nInterview Question: How does context re-render consumers? \n\uf0b7 \nSafeWeb AI Use: Share user data across pages. \n12. React Router \n\uf0b7 \nWhat: Routing library to handle navigation. \n\uf0b7 \nWhy Important: Enables multi-page apps. \n\uf0b7 \nUnder the Hood: Uses HTML5 history API. \n\uf0b7 \nUsed in Real Apps: Page navigation. \n\uf0b7 \nExample: \n\uf0b7 \n<Route path=\"/scan\" element={<Scan />} /> \n\uf0b7 \nHands-On Task: Setup Login, Dashboard, Scan routes. \n\uf0b7 \nInterview Question: Difference between browser and hash routers? \n\uf0b7 \nSafeWeb AI Use: Navigate between sections. \n13. Custom Hooks \n\uf0b7 \nWhat: User-defined reusable hook functions. \n\uf0b7 \nWhy Important: Abstraction and reuse of logic. \n\uf0b7 \nUnder the Hood: Functions that call other hooks. \n\uf0b7 \nUsed in Real Apps: Reusable logic blocks. \n\uf0b7 \nExample: useAuth, useScanStatus \n\uf0b7 \nHands-On Task: Create useAuthGuard. \n\uf0b7 \nInterview Question: Naming rule for hooks? \n\uf0b7 \nSafeWeb AI Use: Custom logic management. \n14. useMemo & useCallback \n\uf0b7 \nWhat: Memoization hooks to optimize performance. \n\uf0b7 \nWhy Important: Prevents unnecessary recalculations or re-renders. \n\uf0b7 \nUnder the Hood: Caches previous return values. \n\uf0b7 \nUsed in Real Apps: Expensive operations, function refs. \n\uf0b7 \nExample: \n\uf0b7 \nconst memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. ", "file_name": "React Notes.pdf"}, {"page": 4, "text": "st memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. \n15. Refs and useRef \n\uf0b7 \nWhat: Direct DOM access or persist values across renders. \n\uf0b7 \nWhy Important: Needed for focus, timers, scroll. \n\uf0b7 \nUnder the Hood: Maintains mutable .current reference. \n", "file_name": "React Notes.pdf"}, {"page": 5, "text": "\uf0b7 \nUsed in Real Apps: Form fields, animations. \n\uf0b7 \nExample: inputRef.current.focus() \n\uf0b7 \nHands-On Task: Focus input on mount. \n\uf0b7 \nInterview Question: When to use refs? \n\uf0b7 \nSafeWeb AI Use: Scroll to report. \n16. Error Boundaries \n\uf0b7 \nWhat: Catch and handle render errors. \n\uf0b7 \nWhy Important: Prevent crashes. \n\uf0b7 \nUnder the Hood: Uses lifecycle methods (componentDidCatch). \n\uf0b7 \nUsed in Real Apps: Wrapping entire app/components. \n\uf0b7 \nExample: Class-based error catcher. \n\uf0b7 \nHands-On Task: Create ErrorBoundary wrapper. \n\uf0b7 \nInterview Question: Can hooks catch errors? \n\uf0b7 \nSafeWeb AI Use: Catch scan/report failures. \n17. Code Splitting \n\uf0b7 \nWhat: Load JS bundles on demand. \n\uf0b7 \nWhy Important: Reduces initial load. \n\uf0b7 \nUnder the Hood: Uses React.lazy and dynamic import. \n\uf0b7 \nUsed in Real Apps: Lazy-loading routes/pages. \n\uf0b7 \nExample: \n\uf0b7 \nconst Scan = React.lazy(() => import('./Scan')); \n\uf0b7 \nHands-On Task: Split heavy components. \n\uf0b7 \nInterview Question: Difference between lazy and suspense? \n\uf0b7 \nSafeWeb AI Use: Speed up first load. \n18. Higher Order Components \n\uf0b7 \nWhat: Functions returning components. \n\uf0b7 \nWhy Important: Reusable logic decorators. \n\uf0b7 \nUnder the Hood: Functional pattern. \n\uf0b7 \nUsed in Real Apps: Permissions, tracking. \n\uf0b7 \nExample: withLogging(Component) \n\uf0b7 \nHands-On Task: Create HOC for authentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Impo", "file_name": "React Notes.pdf"}, {"page": 5, "text": "uthentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Important: Flexible pattern. \n\uf0b7 \nUnder the Hood: Functions as children. \n\uf0b7 \nUsed in Real Apps: Sliders, animations. \n", "file_name": "React Notes.pdf"}, {"page": 6, "text": "\uf0b7 \nExample: <DataProvider render={(data) => <Chart data={data} />} \n\uf0b7 \nHands-On Task: Create MouseTracker. \n\uf0b7 \nInterview Question: Downsides of render props? \n\uf0b7 \nSafeWeb AI Use: Share UI logic. \n20. State Management \n\uf0b7 \nWhat: Tools to manage complex app state. \n\uf0b7 \nWhy Important: Scalability. \n\uf0b7 \nUnder the Hood: Central store and dispatch pattern. \n\uf0b7 \nUsed in Real Apps: Redux, Zustand. \n\uf0b7 \nExample: useReducer, Redux store \n\uf0b7 \nHands-On Task: Manage scan logs in global state. \n\uf0b7 \nInterview Question: Redux vs context? \n\uf0b7 \nSafeWeb AI Use: Global scan/auth state. \n21. Axios / Fetch \n\uf0b7 \nWhat: HTTP libraries to talk to APIs. \n\uf0b7 \nWhy Important: Core for data interaction. \n\uf0b7 \nUnder the Hood: Promise-based APIs. \n\uf0b7 \nUsed in Real Apps: Backend communication. \n\uf0b7 \nExample: axios.get('/api/report') \n\uf0b7 \nHands-On Task: Fetch scan results. \n\uf0b7 \nInterview Question: Axios vs fetch? \n\uf0b7 \nSafeWeb AI Use: Talk to scan API. \n22. Folder Structure \n\uf0b7 \nWhat: Organizing codebase. \n\uf0b7 \nWhy Important: Maintainability. \n\uf0b7 \nUnder the Hood: Logical separation. \n\uf0b7 \nUsed in Real Apps: Feature/domain-based. \n\uf0b7 \nExample: src/components, src/services \n\uf0b7 \nHands-On Task: Restructure SafeWeb AI project. \n\uf0b7 \nInterview Question: Best practices for large apps? \n\uf0b7 \nSafeWeb AI Use: Scale codebase. \n23. PropTypes / TypeScript \n\uf0b7 \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.p", "file_name": "React Notes.pdf"}, {"page": 6, "text": " \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.propTypes = { name: PropTypes.string } \n", "file_name": "React Notes.pdf"}, {"page": 7, "text": "\uf0b7 \nHands-On Task: Add PropTypes to core components. \n\uf0b7 \nInterview Question: TS vs PropTypes? \n\uf0b7 \nSafeWeb AI Use: Ensure correct data handling. \n24. Testing (Jest + RTL) \n\uf0b7 \nWhat: Automated validation of logic and UI. \n\uf0b7 \nWhy Important: Prevent regressions. \n\uf0b7 \nUnder the Hood: Simulates components. \n\uf0b7 \nUsed in Real Apps: CI pipelines. \n\uf0b7 \nExample: expect(getByText('Welcome')).toBeInTheDocument() \n\uf0b7 \nHands-On Task: Test login and scan page. \n\uf0b7 \nInterview Question: Unit vs integration test? \n\uf0b7 \nSafeWeb AI Use: Bug-free reliability. \n \n \nReact Interview Questions & Precise Answers \n \n1. What happens to JSX during the build process? \no JSX is transpiled by Babel into React.createElement() calls that build the \nvirtual DOM. \n2. Difference between functional and class components? \no Functional: Simple functions using hooks. Class: ES6 classes using lifecycle \nmethods. \n3. Can a child modify props? \no No. Props are read-only; only the parent can change them. \n4. How does state cause a re-render? \no Calling setState triggers React\u2019s scheduler to re-render that component with \nupdated state. \n5. What is a synthetic event? \no A cross-browser wrapper around native events, provided by React for \nconsistency. \n6. Ways to implement conditional rendering? \no \nif/else, ternary ? :, logical AND &&, IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useE", "file_name": "React Notes.pdf"}, {"page": 7, "text": ", IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useEffect? \no It determines when the effect runs. Empty array means run once. Include variables \nto trigger rerun when they change. \n9. Why can\u2019t hooks be called conditionally? \n", "file_name": "React Notes.pdf"}, {"page": 8, "text": "o Because React relies on the order of hooks. Conditional calls break this order, \ncausing bugs. \n10. Difference between controlled and uncontrolled components? \no Controlled: state-driven. Uncontrolled: DOM-driven (using refs). \n11. How does context re-render consumers? \no When context value changes, all consumers using that context re-render. \n12. Difference between browser and hash routers? \no BrowserRouter uses HTML5 history API. HashRouter uses URL hash (#) for \nrouting. \n13. Naming rule for custom hooks? \no Must start with use to let React track them internally. \n14. When does useMemo recalculate? \no When any dependency in its dependency array changes. \n15. When to use refs? \no When you need direct DOM access or to persist values without triggering re-\nrenders. \n16. Can hooks catch errors? \no No. Only class-based error boundaries can catch render-time errors. \n17. Difference between lazy and suspense? \no \nlazy dynamically imports components. Suspense wraps lazy-loaded components \nto handle loading fallback. \n18. Compare HOCs with hooks? \no HOCs wrap components for reuse. Hooks reuse logic inside functional \ncomponents. \n19. Downsides of render props? \no Can lead to deeply nested structures (callback hell). \n20. Redux vs Context? \no Redux is for complex/global state with middleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps fo", "file_name": "React Notes.pdf"}, {"page": 8, "text": "dleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps folder structure? \no Feature-based or domain-based structure with clear separation of concerns. \n23. TypeScript vs PropTypes? \no TypeScript checks types at compile-time. PropTypes check at runtime and are \nlimited. \n24. Unit vs integration test? \no Unit: test single component/function. Integration: test interactions between \ncomponents. \n \n \n", "file_name": "React Notes.pdf"}, {"page": 1, "text": "React Mastery Path  \n \nPhase 1: React Fundamentals \n1. JSX (JavaScript XML) \n\uf0b7 \nWhat: A syntax extension for JavaScript that looks like HTML and is used to describe \nUI structure in React. \n\uf0b7 \nWhy Important: Enables declarative UI creation and readable component structure. \n\uf0b7 \nUnder the Hood: JSX is transpiled to React.createElement() by Babel, which builds \na virtual DOM tree. \n\uf0b7 \nUsed in Real Apps: Defining component UI layout. \n\uf0b7 \nExample: \n\uf0b7 \nconst Welcome = () => <h1>Hello, SafeWeb AI User!</h1>; \n\uf0b7 \nHands-On Task: Create a Header, Footer, and Landing JSX layout. \n\uf0b7 \nInterview Question: What happens to JSX during the build process? \n\uf0b7 \nSafeWeb AI Use: Structure landing pages, hero sections, or onboarding screens. \n2. Components (Functional & Class) \n\uf0b7 \nWhat: Independent, reusable pieces of UI. \n\uf0b7 \nWhy Important: Encapsulates logic and markup for reuse and readability. \n\uf0b7 \nUnder the Hood: Each component maintains its own lifecycle and props/context \nhandling. \n\uf0b7 \nUsed in Real Apps: Every UI block (Navbar, Card, Form) is a component. \n\uf0b7 \nExample: \n\uf0b7 \nfunction Card(props) { \n\uf0b7 \n  return <div className=\"card\">{props.content}</div>; \n\uf0b7 \n} \n\uf0b7 \nHands-On Task: Build a FeatureCard component for highlighting SafeWeb AI \nfeatures. \n\uf0b7 \nInterview Question: Difference between functional and class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables c", "file_name": "React Notes.pdf"}, {"page": 1, "text": "nd class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables communication between components. \n\uf0b7 \nUnder the Hood: Props are passed as parameters to functions. \n\uf0b7 \nUsed in Real Apps: Passing user info, config, styles. \n\uf0b7 \nExample: \n\uf0b7 \nconst Greeting = ({ name }) => <h2>Hello, {name}</h2>; \n\uf0b7 \nHands-On Task: Pass site scan results from parent to child. \n", "file_name": "React Notes.pdf"}, {"page": 2, "text": "\uf0b7 \nInterview Question: Can a child modify props? \n\uf0b7 \nSafeWeb AI Use: Show user-specific security reports. \n4. State \n\uf0b7 \nWhat: A built-in object used to hold dynamic data. \n\uf0b7 \nWhy Important: Controls component behavior over time. \n\uf0b7 \nUnder the Hood: React uses useState to store and re-render components on update. \n\uf0b7 \nUsed in Real Apps: Handling form inputs, toggles, modals. \n\uf0b7 \nExample: \n\uf0b7 \nconst [email, setEmail] = useState(''); \n\uf0b7 \nHands-On Task: Build a login form managing email/password state. \n\uf0b7 \nInterview Question: How does state cause a re-render? \n\uf0b7 \nSafeWeb AI Use: Manage user input and scan configuration. \n5. Event Handling \n\uf0b7 \nWhat: Listening and responding to user events. \n\uf0b7 \nWhy Important: Powers interactivity. \n\uf0b7 \nUnder the Hood: Synthetic event system based on native events. \n\uf0b7 \nUsed in Real Apps: Form submission, buttons, toggles. \n\uf0b7 \nExample: \n\uf0b7 \n<button onClick={handleScan}>Start Scan</button> \n\uf0b7 \nHands-On Task: Add a \u201cStart Scan\u201d button with click handler. \n\uf0b7 \nInterview Question: What is a synthetic event? \n\uf0b7 \nSafeWeb AI Use: Trigger a website scan. \n6. Conditional Rendering \n\uf0b7 \nWhat: Rendering different UI based on conditions. \n\uf0b7 \nWhy Important: Enhances UX by showing relevant data. \n\uf0b7 \nUnder the Hood: Simple JavaScript logic (ternaries, &&, if). \n\uf0b7 \nUsed in Real Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to impl", "file_name": "React Notes.pdf"}, {"page": 2, "text": "al Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to implement conditional rendering? \n\uf0b7 \nSafeWeb AI Use: Show different UI during scan progress. \n7. Lists and Keys \n\uf0b7 \nWhat: Rendering multiple elements using map() with unique key props. \n\uf0b7 \nWhy Important: Efficient rendering and reconciliation. \n\uf0b7 \nUnder the Hood: Keys help React identify changed, added, or removed items. \n\uf0b7 \nUsed in Real Apps: Listing scan results, history logs. \n\uf0b7 \nExample: \n", "file_name": "React Notes.pdf"}, {"page": 3, "text": "\uf0b7 \n{urls.map((url) => <li key={url}>{url}</li>)} \n\uf0b7 \nHands-On Task: Display a list of scanned URLs. \n\uf0b7 \nInterview Question: Why are keys important in lists? \n\uf0b7 \nSafeWeb AI Use: Show scanned website list. \n8. useEffect \n\uf0b7 \nWhat: Side effects like data fetching, subscriptions. \n\uf0b7 \nWhy Important: Handles operations outside render. \n\uf0b7 \nUnder the Hood: Scheduled after paint, cleanup via return function. \n\uf0b7 \nUsed in Real Apps: Fetching scan results, triggering alerts. \n\uf0b7 \nExample: \n\uf0b7 \nuseEffect(() => { fetchData(); }, []); \n\uf0b7 \nHands-On Task: Fetch dummy scan data on load. \n\uf0b7 \nInterview Question: How does the dependency array work? \n\uf0b7 \nSafeWeb AI Use: Load recent scan history on dashboard. \n9. Hooks (Intro) \n\uf0b7 \nWhat: Special functions to use React features in functional components. \n\uf0b7 \nWhy Important: Replaces classes with reusable logic. \n\uf0b7 \nUnder the Hood: Hooks use internal closures and React's fiber scheduler. \n\uf0b7 \nUsed in Real Apps: All stateful or side-effect components. \n\uf0b7 \nExample: useState, useEffect \n\uf0b7 \nHands-On Task: Use useState and useEffect together. \n\uf0b7 \nInterview Question: Why can\u2019t hooks be called conditionally? \n\uf0b7 \nSafeWeb AI Use: State and side effect logic. \n10. Forms \n\uf0b7 \nWhat: Collecting and managing user input. \n\uf0b7 \nWhy Important: Central for user interaction. \n\uf0b7 \nUnder the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 ", "file_name": "React Notes.pdf"}, {"page": 3, "text": "r the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 \nHands-On Task: Build scan request form. \n\uf0b7 \nInterview Question: Difference between controlled and uncontrolled components? \n\uf0b7 \nSafeWeb AI Use: Get website input from users. \n11. Context API \n\uf0b7 \nWhat: Global state manager for passing data without prop drilling. \n\uf0b7 \nWhy Important: Simplifies state sharing. \n\uf0b7 \nUnder the Hood: Uses React context provider/consumer. \n\uf0b7 \nUsed in Real Apps: Theme, auth, locale. \n", "file_name": "React Notes.pdf"}, {"page": 4, "text": "\uf0b7 \nExample: \n\uf0b7 \nconst UserContext = React.createContext(); \n\uf0b7 \nHands-On Task: Create AuthContext. \n\uf0b7 \nInterview Question: How does context re-render consumers? \n\uf0b7 \nSafeWeb AI Use: Share user data across pages. \n12. React Router \n\uf0b7 \nWhat: Routing library to handle navigation. \n\uf0b7 \nWhy Important: Enables multi-page apps. \n\uf0b7 \nUnder the Hood: Uses HTML5 history API. \n\uf0b7 \nUsed in Real Apps: Page navigation. \n\uf0b7 \nExample: \n\uf0b7 \n<Route path=\"/scan\" element={<Scan />} /> \n\uf0b7 \nHands-On Task: Setup Login, Dashboard, Scan routes. \n\uf0b7 \nInterview Question: Difference between browser and hash routers? \n\uf0b7 \nSafeWeb AI Use: Navigate between sections. \n13. Custom Hooks \n\uf0b7 \nWhat: User-defined reusable hook functions. \n\uf0b7 \nWhy Important: Abstraction and reuse of logic. \n\uf0b7 \nUnder the Hood: Functions that call other hooks. \n\uf0b7 \nUsed in Real Apps: Reusable logic blocks. \n\uf0b7 \nExample: useAuth, useScanStatus \n\uf0b7 \nHands-On Task: Create useAuthGuard. \n\uf0b7 \nInterview Question: Naming rule for hooks? \n\uf0b7 \nSafeWeb AI Use: Custom logic management. \n14. useMemo & useCallback \n\uf0b7 \nWhat: Memoization hooks to optimize performance. \n\uf0b7 \nWhy Important: Prevents unnecessary recalculations or re-renders. \n\uf0b7 \nUnder the Hood: Caches previous return values. \n\uf0b7 \nUsed in Real Apps: Expensive operations, function refs. \n\uf0b7 \nExample: \n\uf0b7 \nconst memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. ", "file_name": "React Notes.pdf"}, {"page": 4, "text": "st memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. \n15. Refs and useRef \n\uf0b7 \nWhat: Direct DOM access or persist values across renders. \n\uf0b7 \nWhy Important: Needed for focus, timers, scroll. \n\uf0b7 \nUnder the Hood: Maintains mutable .current reference. \n", "file_name": "React Notes.pdf"}, {"page": 5, "text": "\uf0b7 \nUsed in Real Apps: Form fields, animations. \n\uf0b7 \nExample: inputRef.current.focus() \n\uf0b7 \nHands-On Task: Focus input on mount. \n\uf0b7 \nInterview Question: When to use refs? \n\uf0b7 \nSafeWeb AI Use: Scroll to report. \n16. Error Boundaries \n\uf0b7 \nWhat: Catch and handle render errors. \n\uf0b7 \nWhy Important: Prevent crashes. \n\uf0b7 \nUnder the Hood: Uses lifecycle methods (componentDidCatch). \n\uf0b7 \nUsed in Real Apps: Wrapping entire app/components. \n\uf0b7 \nExample: Class-based error catcher. \n\uf0b7 \nHands-On Task: Create ErrorBoundary wrapper. \n\uf0b7 \nInterview Question: Can hooks catch errors? \n\uf0b7 \nSafeWeb AI Use: Catch scan/report failures. \n17. Code Splitting \n\uf0b7 \nWhat: Load JS bundles on demand. \n\uf0b7 \nWhy Important: Reduces initial load. \n\uf0b7 \nUnder the Hood: Uses React.lazy and dynamic import. \n\uf0b7 \nUsed in Real Apps: Lazy-loading routes/pages. \n\uf0b7 \nExample: \n\uf0b7 \nconst Scan = React.lazy(() => import('./Scan')); \n\uf0b7 \nHands-On Task: Split heavy components. \n\uf0b7 \nInterview Question: Difference between lazy and suspense? \n\uf0b7 \nSafeWeb AI Use: Speed up first load. \n18. Higher Order Components \n\uf0b7 \nWhat: Functions returning components. \n\uf0b7 \nWhy Important: Reusable logic decorators. \n\uf0b7 \nUnder the Hood: Functional pattern. \n\uf0b7 \nUsed in Real Apps: Permissions, tracking. \n\uf0b7 \nExample: withLogging(Component) \n\uf0b7 \nHands-On Task: Create HOC for authentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Impo", "file_name": "React Notes.pdf"}, {"page": 5, "text": "uthentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Important: Flexible pattern. \n\uf0b7 \nUnder the Hood: Functions as children. \n\uf0b7 \nUsed in Real Apps: Sliders, animations. \n", "file_name": "React Notes.pdf"}, {"page": 6, "text": "\uf0b7 \nExample: <DataProvider render={(data) => <Chart data={data} />} \n\uf0b7 \nHands-On Task: Create MouseTracker. \n\uf0b7 \nInterview Question: Downsides of render props? \n\uf0b7 \nSafeWeb AI Use: Share UI logic. \n20. State Management \n\uf0b7 \nWhat: Tools to manage complex app state. \n\uf0b7 \nWhy Important: Scalability. \n\uf0b7 \nUnder the Hood: Central store and dispatch pattern. \n\uf0b7 \nUsed in Real Apps: Redux, Zustand. \n\uf0b7 \nExample: useReducer, Redux store \n\uf0b7 \nHands-On Task: Manage scan logs in global state. \n\uf0b7 \nInterview Question: Redux vs context? \n\uf0b7 \nSafeWeb AI Use: Global scan/auth state. \n21. Axios / Fetch \n\uf0b7 \nWhat: HTTP libraries to talk to APIs. \n\uf0b7 \nWhy Important: Core for data interaction. \n\uf0b7 \nUnder the Hood: Promise-based APIs. \n\uf0b7 \nUsed in Real Apps: Backend communication. \n\uf0b7 \nExample: axios.get('/api/report') \n\uf0b7 \nHands-On Task: Fetch scan results. \n\uf0b7 \nInterview Question: Axios vs fetch? \n\uf0b7 \nSafeWeb AI Use: Talk to scan API. \n22. Folder Structure \n\uf0b7 \nWhat: Organizing codebase. \n\uf0b7 \nWhy Important: Maintainability. \n\uf0b7 \nUnder the Hood: Logical separation. \n\uf0b7 \nUsed in Real Apps: Feature/domain-based. \n\uf0b7 \nExample: src/components, src/services \n\uf0b7 \nHands-On Task: Restructure SafeWeb AI project. \n\uf0b7 \nInterview Question: Best practices for large apps? \n\uf0b7 \nSafeWeb AI Use: Scale codebase. \n23. PropTypes / TypeScript \n\uf0b7 \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.p", "file_name": "React Notes.pdf"}, {"page": 6, "text": " \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.propTypes = { name: PropTypes.string } \n", "file_name": "React Notes.pdf"}, {"page": 7, "text": "\uf0b7 \nHands-On Task: Add PropTypes to core components. \n\uf0b7 \nInterview Question: TS vs PropTypes? \n\uf0b7 \nSafeWeb AI Use: Ensure correct data handling. \n24. Testing (Jest + RTL) \n\uf0b7 \nWhat: Automated validation of logic and UI. \n\uf0b7 \nWhy Important: Prevent regressions. \n\uf0b7 \nUnder the Hood: Simulates components. \n\uf0b7 \nUsed in Real Apps: CI pipelines. \n\uf0b7 \nExample: expect(getByText('Welcome')).toBeInTheDocument() \n\uf0b7 \nHands-On Task: Test login and scan page. \n\uf0b7 \nInterview Question: Unit vs integration test? \n\uf0b7 \nSafeWeb AI Use: Bug-free reliability. \n \n \nReact Interview Questions & Precise Answers \n \n1. What happens to JSX during the build process? \no JSX is transpiled by Babel into React.createElement() calls that build the \nvirtual DOM. \n2. Difference between functional and class components? \no Functional: Simple functions using hooks. Class: ES6 classes using lifecycle \nmethods. \n3. Can a child modify props? \no No. Props are read-only; only the parent can change them. \n4. How does state cause a re-render? \no Calling setState triggers React\u2019s scheduler to re-render that component with \nupdated state. \n5. What is a synthetic event? \no A cross-browser wrapper around native events, provided by React for \nconsistency. \n6. Ways to implement conditional rendering? \no \nif/else, ternary ? :, logical AND &&, IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useE", "file_name": "React Notes.pdf"}, {"page": 7, "text": ", IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useEffect? \no It determines when the effect runs. Empty array means run once. Include variables \nto trigger rerun when they change. \n9. Why can\u2019t hooks be called conditionally? \n", "file_name": "React Notes.pdf"}, {"page": 8, "text": "o Because React relies on the order of hooks. Conditional calls break this order, \ncausing bugs. \n10. Difference between controlled and uncontrolled components? \no Controlled: state-driven. Uncontrolled: DOM-driven (using refs). \n11. How does context re-render consumers? \no When context value changes, all consumers using that context re-render. \n12. Difference between browser and hash routers? \no BrowserRouter uses HTML5 history API. HashRouter uses URL hash (#) for \nrouting. \n13. Naming rule for custom hooks? \no Must start with use to let React track them internally. \n14. When does useMemo recalculate? \no When any dependency in its dependency array changes. \n15. When to use refs? \no When you need direct DOM access or to persist values without triggering re-\nrenders. \n16. Can hooks catch errors? \no No. Only class-based error boundaries can catch render-time errors. \n17. Difference between lazy and suspense? \no \nlazy dynamically imports components. Suspense wraps lazy-loaded components \nto handle loading fallback. \n18. Compare HOCs with hooks? \no HOCs wrap components for reuse. Hooks reuse logic inside functional \ncomponents. \n19. Downsides of render props? \no Can lead to deeply nested structures (callback hell). \n20. Redux vs Context? \no Redux is for complex/global state with middleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps fo", "file_name": "React Notes.pdf"}, {"page": 8, "text": "dleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps folder structure? \no Feature-based or domain-based structure with clear separation of concerns. \n23. TypeScript vs PropTypes? \no TypeScript checks types at compile-time. PropTypes check at runtime and are \nlimited. \n24. Unit vs integration test? \no Unit: test single component/function. Integration: test interactions between \ncomponents. \n \n \n", "file_name": "React Notes.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": " \n \nGeneral SQL Topics \n1. INTRODUCTION TO SQL \n\uf0b7 \nSQL: Structured Query Language, used to interact with relational databases. \n\uf0b7 \nRelational Database: Stores data in tables (rows & columns). \n\uf0b7 \nCommon RDBMS: MySQL, PostgreSQL, SQLite, Oracle, SQL Server. \n \n2. SQL DATA TYPES \n\uf0b7 \nINT: Integer numbers \n\uf0b7 \nVARCHAR(n): Variable-length string with a maximum of n characters \n\uf0b7 \nCHAR(n): Fixed-length string \n\uf0b7 \nDATE / DATETIME: Date or timestamp \n\uf0b7 \nDECIMAL(p, s): Exact numeric value with precision and scale \n\uf0b7 \nBOOLEAN: True or False \n\uf0b7 \nTEXT: Long-form string data \n \n3. BASIC SQL COMMANDS \n\u27a4 Create Table \nCREATE TABLE Employees ( \n  id INT PRIMARY KEY, \n  name VARCHAR(100), \n  salary INT, \n  department VARCHAR(50) \n); \n\u27a4 Insert \nINSERT INTO Employees (id, name, salary, department) \nVALUES (1, 'Alice', 60000, 'HR'); \n\u27a4 Select \nSELECT * FROM Employees; \nSELECT name, salary FROM Employees; \nSELECT * FROM Employees WHERE salary > 50000; \n\u27a4 Update \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 2, "text": "UPDATE Employees SET salary = 70000 WHERE id = 1; \n\u27a4 Delete \nDELETE FROM Employees WHERE id = 1; \n \n4. FILTERING DATA \n\u27a4 WHERE, AND, OR, NOT \nSELECT * FROM Employees \nWHERE department = 'HR' AND salary > 50000; \n\u27a4 IN, BETWEEN, LIKE \nSELECT * FROM Employees WHERE department IN ('HR', 'Sales'); \nSELECT * FROM Employees WHERE salary BETWEEN 40000 AND 70000; \nSELECT * FROM Employees WHERE name LIKE 'A%'; -- starts with A \n \n5. SORTING & LIMITING \nSELECT * FROM Employees ORDER BY salary DESC; \nSELECT * FROM Employees LIMIT 5; \n \n6. AGGREGATE FUNCTIONS \nSELECT COUNT(*) FROM Employees; \nSELECT AVG(salary) FROM Employees; \nSELECT SUM(salary), MAX(salary), MIN(salary) FROM Employees; \n \n7. GROUPING & FILTERING AGGREGATES \nSELECT department, AVG(salary) AS avg_salary \nFROM Employees \nGROUP BY department \nHAVING AVG(salary) > 50000; \n \n8. JOINS \n\u27a4 Syntax: \nSELECT e.name, d.name \nFROM Employees e \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 3, "text": "JOIN Departments d ON e.department_id = d.id; \n8.1. INNER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nINNER JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 Only matching department IDs shown. \n8.2. LEFT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All employees shown, even if no department. \n8.3. RIGHT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All departments shown, even if no employee. \n8.4. FULL OUTER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id \nUNION \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n \n9. SUBQUERIES \nUsed to embed one query inside another. \nSELECT name FROM Employees \nWHERE salary > ( \n  SELECT AVG(salary) FROM Employees \n); \n \n10. CONSTRAINTS \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 4, "text": "\uf0b7 \nPRIMARY KEY: Uniquely identifies each record \n\uf0b7 \nFOREIGN KEY: Links to primary key of another table \n\uf0b7 \nUNIQUE: Ensures all values in a column are different \n\uf0b7 \nNOT NULL: Disallows NULL values \n\uf0b7 \nCHECK: Ensures a condition is met \n \n11. NORMALIZATION  \n\uf0b7 \nProcess of organizing data to reduce redundancy and improve data integrity. \n\uf0b7 \n1NF: Atomic values \n\uf0b7 \n2NF: No partial dependencies \n\uf0b7 \n3NF: No transitive dependencies \n\uf0b7 \nEnsures data integrity and minimizes duplication. \n\ud83c\udfaf Why Normalize? \n\uf0b7 \nEliminate duplicate data \n\uf0b7 \nEnsure data consistency \n\uf0b7 \nImprove data structure for querying and updates \n \n\ud83d\udcda Normal Forms (NF) \n\u2705 1NF \u2013 First Normal Form \nRule: All values must be atomic (indivisible). \nFix: Remove repeating groups and store one value per cell. \nExample (Bad): \nID Name Phones \n1 Alice 1234, 5678 \nFix (1NF): \nID Name Phone \n1 Alice 1234 \n1 Alice 5678 \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 5, "text": "\u2705 2NF \u2013 Second Normal Form \nRule: Be in 1NF + No Partial Dependency on a composite key. \nFix: Move partially dependent data to a new table. \nExample: \nComposite key: (StudentID, CourseID) \nStudentID CourseID StudentName \nFix (2NF): \n\uf0b7 \nTable 1: StudentCourses(StudentID, CourseID) \n\uf0b7 \nTable 2: Students(StudentID, StudentName) \n \n\u2705 3NF \u2013 Third Normal Form \nRule: Be in 2NF + No transitive dependency. \nFix: Remove data that's indirectly dependent on the primary key. \nExample (Bad): \nEmpID Name DeptID DeptName \nFix (3NF): \n\uf0b7 \nTable 1: Employees(EmpID, Name, DeptID) \n\uf0b7 \nTable 2: Departments(DeptID, DeptName) \n \n\ud83e\udde0 When Not to Normalize? \n\uf0b7 \nFor read-heavy applications (analytics, reporting) \n\uf0b7 \nWhen query performance is more important than data integrity \n \n\u2705 Real-Life Analogy \n\uf0b7 \n1NF: Each house (record) has its own mailbox (cell), not a shared one \n\uf0b7 \n2NF: One key opens only one mailbox (no shared access) \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 6, "text": "\uf0b7 \n3NF: The key opens the right mailbox and not someone else\u2019s cabinet (no indirect \ndependencies) \n \n \n12. INDEXING \nIndexing is a powerful technique to speed up SELECT queries on large tables. \n\uf0b7 \nSpeeds up WHERE, JOIN, GROUP BY, and ORDER BY queries \n\uf0b7 \nBoosts search performance on large datasets. \n\uf0b7 \nAvoid on frequently updated or low-cardinality columns \n\uf0b7 \nUse EXPLAIN to test effectiveness \n\uf0b7 \nAvoid over-indexing (inserts & updates become slower). \n\u2705 Types \n\uf0b7 \nSingle-column Index \n \nCREATE INDEX idx_salary ON Employees(salary); \n\uf0b7 \nComposite Index \n \nCREATE INDEX idx_name_dept ON Employees(name, department);\n \n13. VIEWS \n\uf0b7 \nA view is a virtual table based on a query \n\uf0b7 \nThey do not store data. Use Materialized Views (if supported) for cached result. \n\uf0b7 \nSimplify complex queries. \n\uf0b7 \nEnhance security (restrict column access) \n\uf0b7 \nEnable reusable logic \n\u2705 Example \nCREATE VIEW HR_Employees AS \nSELECT name, salary \nFROM Employees \nWHERE department = 'HR'; \n \n \n14. TRANSACTIONS & ACID \nA Transaction is a logical unit of work consisting of one or more SQL statements. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 7, "text": "Use ROLLBACK; to undo changes before COMMIT;. \n\uf0b7 \nACID: \no \nAtomicity: All or none \no \nConsistency: Valid data state \no \nIsolation: No interference \no \nDurability: Permanent changes \n\u2705 Example \nBEGIN; \nUPDATE Accounts SET balance = balance - 100 WHERE id = 1; \nUPDATE Accounts SET balance = balance + 100 WHERE id = 2; \nCOMMIT; \n \n15. WINDOW FUNCTIONS \nWindow functions perform calculations across rows related to the current row \u2014 without collapsing \nthem like GROUP BY.  \nUsed for row-level calculations without grouping. \nUse cases : Leaderboards, Change Tracking, Tired analysis \nRANK(), DENSE_RANK(), ROW_NUMBER() \n\u2705 Example \nSELECT name, salary, \n  RANK() OVER (ORDER BY salary DESC) AS salary_rank \nFROM Employees; \n\ud83d\udd11 Popular Window Functions \n\uf0b7 \nROW_NUMBER(), RANK(), DENSE_RANK() \n\uf0b7 \nLAG(), LEAD() \n\uf0b7 \nNTILE(n) (for percentiles) \n \n16. COMMON TABLE EXPRESSIONS (CTEs) \nCTEs are temporary result sets used within queries \u2014 easier to read & maintain. \n\u2705 Syntax \nWITH HighEarners AS ( \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 8, "text": "  SELECT * FROM Employees WHERE salary > 50000 \n) \nSELECT name FROM HighEarners; \n\ud83e\udde0 Benefits \n\uf0b7 \nBreak complex queries into readable blocks \n\uf0b7 \nUse recursive CTEs for hierarchical data \n \n17. UNION vs UNION ALL \nSELECT name FROM Managers \nUNION \nSELECT name FROM Employees; -- Removes duplicates \n \nSELECT name FROM Managers \nUNION ALL \nSELECT name FROM Employees; -- Keeps duplicates \n \n18. SET OPERATIONS \nSELECT name FROM A \nINTERSECT \nSELECT name FROM B; \n \nSELECT name FROM A \nEXCEPT \nSELECT name FROM B; \n\uf0b7 \n\u26a0 Not supported in MySQL; supported in PostgreSQL/SQL Server. \n \n19. NULL Handling \nSELECT name, COALESCE(nickname, 'No Nick') FROM Users; \nSELECT NULLIF(salary, 0);  -- Returns NULL if salary = 0 \n\uf0b7 \nUse IS NULL / IS NOT NULL \n\uf0b7 \nCOALESCE(), IFNULL(), NULLIF() \n \n20. CASE Statements \nSELECT name, \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 9, "text": "CASE \n  WHEN salary > 70000 THEN 'High' \n  WHEN salary > 40000 THEN 'Medium' \n  ELSE 'Low' \nEND AS salary_level \nFROM Employees; \n \n21. Stored Procedures & Functions (Advanced) \nStored Procedures are saved SQL blocks that perform actions. \nFunctions return a single value. Use procedures for reusable logic. Use functions in SELECT, WHERE, or \nJOIN clauses \n\u2705 Procedure Example \nCREATE PROCEDURE GetHighEarners() \nBEGIN \n  SELECT * FROM Employees WHERE salary > 70000; \nEND; \n\u2705 Function Example \nCREATE FUNCTION TaxAmount(salary DECIMAL) \nRETURNS DECIMAL \nBEGIN \n  RETURN salary * 0.10; \nEND; \n \n \n22. Temporary Tables \nCREATE TEMPORARY TABLE Temp_Employees AS \nSELECT * FROM Employees WHERE department = 'HR'; \n \n23. Triggers (Advanced - Rare) \nCREATE TRIGGER before_insert_trigger \nBEFORE INSERT ON Employees \nFOR EACH ROW \nSET NEW.salary = IF(NEW.salary < 0, 0, NEW.salary); \n\uf0b7 \nUsed for validation, logging, auto-calculation. \n \n24. Data Definition vs Data Manipulation vs Data Control \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 10, "text": "\uf0b7 \nDDL (Definition): CREATE, ALTER, DROP \n\uf0b7 \nDML (Manipulation): SELECT, INSERT, UPDATE, DELETE \n\uf0b7 \nDCL (Control): GRANT, REVOKE \n\uf0b7 \nTCL (Transaction): COMMIT, ROLLBACK \n \nINTERVIEW QUERY PATTERNS \n\u27a4 Nth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET 1; -- 2nd highest \n\u27a4 Duplicate Rows \nSELECT name, COUNT(*) \nFROM Employees \nGROUP BY name \nHAVING COUNT(*) > 1; \n\u27a4 Same Salary Employees \nSELECT * FROM Employees \nWHERE salary IN ( \n  SELECT salary FROM Employees \n  GROUP BY salary \n  HAVING COUNT(*) > 1 \n); \n\u27a4 Employees with Max Salary Per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, \n         RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\u27a4 Self Join Example \nSELECT A.name AS Employee, B.name AS Manager \nFROM Employees A \nJOIN Employees B ON A.manager_id = B.id; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 11, "text": "\u27a4 EXISTS vs IN vs JOIN \n-- EXISTS \nSELECT name FROM Employees e \nWHERE EXISTS ( \n  SELECT 1 FROM Departments d WHERE d.id = e.department_id \n); \n-- IN \nSELECT name FROM Employees \nWHERE department_id IN (SELECT id FROM Departments); \n-- JOIN \nSELECT e.name, d.name FROM Employees e \nJOIN Departments d ON e.department_id = d.id; \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 12, "text": "Advanced SQL Topics \n \n1. Recursive CTEs (Made Simple) \nA Recursive CTE lets a query call itself, useful when working with hierarchies like employees \n& managers or categories & subcategories. \nEasy Analogy: \nThink of it like a loop in SQL. Start with one person (manager), then find their subordinates, then \nsubordinates of subordinates, and so on. \nSyntax: \nWITH RECURSIVE cte_name AS ( \n  SELECT ...  -- Starting point (anchor) \n  UNION ALL \n  SELECT ... FROM cte_name ... -- Repeat until done \n) \nSELECT * FROM cte_name; \nExample: \nWITH RECURSIVE Subordinates AS ( \n  SELECT id, name, manager_id FROM Employees WHERE id = 1 -- Top manager \n  UNION ALL \n  SELECT e.id, e.name, e.manager_id \n  FROM Employees e \n  JOIN Subordinates s ON e.manager_id = s.id \n) \nSELECT * FROM Subordinates; \n\u2705 This will return all employees working under manager ID 1, even indirectly. \n \n2. Window Functions \nThese functions look at other rows in the result without grouping them. Useful when you \nwant to compare each row with others. \nEveryday Use Case: \n\"Show each employee's salary along with the previous and next employee's salary.\" \nKey Functions: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 13, "text": "\uf0b7 \nLAG(column) \u2013 Looks before current row \n\uf0b7 \nLEAD(column) \u2013 Looks after current row \n\uf0b7 \nNTILE(n) \u2013 Divides into n equal groups (for percentiles/quartiles) \n\uf0b7 \nRANK(), DENSE_RANK(), ROW_NUMBER() \u2013 Ranking logic \nExample: \nSELECT name, salary, \n       LAG(salary) OVER (ORDER BY salary) AS prev_salary, \n       LEAD(salary) OVER (ORDER BY salary) AS next_salary \nFROM Employees; \n \n3. Working with JSON in SQL \nModern databases allow storing and querying JSON data inside SQL columns (especially \nuseful in dynamic or semi-structured data). \nPostgreSQL: \nSELECT data->>'name' AS name FROM orders WHERE data->>'status' = 'shipped'; \nMySQL: \nSELECT JSON_EXTRACT(data, '$.name') AS name FROM orders; \n\ud83d\udd0d Here, data is a column containing JSON like: { \"name\": \"Laptop\", \"status\": \"shipped\" } \n \n4. Performance Optimization Techniques \nOptimizing your SQL queries can make your app faster, especially for large data. \na. Indexing \n\uf0b7 \nLike a book index: helps locate rows faster \n\uf0b7 \nUseful for WHERE, JOIN, and ORDER BY \nCREATE INDEX idx_salary ON Employees(salary); \nb. Query Refactoring \n\uf0b7 \nAvoid SELECT * \u2192 only select needed columns \n\uf0b7 \nUse EXISTS instead of IN when subquery is large \n\uf0b7 \nApply filters early (use WHERE before GROUP BY) \nc. Execution Plan \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 14, "text": "Use EXPLAIN to understand how the database runs your query: \nEXPLAIN SELECT * FROM Employees WHERE department_id = 3; \n \n5. Stored Procedures & Functions (Simplified) \nStored Procedures = SQL scripts stored in the database that can be reused. Like a saved \nfunction. \nExample with Loop: \nDELIMITER // \nCREATE PROCEDURE GiveBonus() \nBEGIN \n  DECLARE done INT DEFAULT FALSE; \n  DECLARE emp_id INT; \n  DECLARE emp_cursor CURSOR FOR SELECT id FROM Employees; \n  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE; \n \n  OPEN emp_cursor; \n  read_loop: LOOP \n    FETCH emp_cursor INTO emp_id; \n    IF done THEN \n      LEAVE read_loop; \n    END IF; \n    UPDATE Employees SET salary = salary + 5000 WHERE id = emp_id; \n  END LOOP; \n  CLOSE emp_cursor; \nEND // \nDELIMITER ; \n\u2705 This procedure gives a \u20b95000 bonus to all employees. \n \n6. Importing/Exporting Data \nMoving data between CSV files and SQL is common in real projects. \nMySQL: \nLOAD DATA INFILE '/path/file.csv' \nINTO TABLE Employees \nFIELDS TERMINATED BY ',' \nLINES TERMINATED BY '\\n' \nIGNORE 1 ROWS; \nPostgreSQL: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 15, "text": "COPY Employees(name, salary) \nFROM '/path/file.csv' \nDELIMITER ',' \nCSV HEADER; \n \n7. Role-Based Access Control (Security Basics) \nSQL lets you give different permissions to different users. \nExample: \nGRANT SELECT, INSERT ON Employees TO 'analyst'; \nREVOKE DELETE ON Employees FROM 'analyst'; \n\u2705 'analyst' can view and add data, but can't delete anything. \n \n8. Star vs Snowflake Schema  \nUsed in Data Warehouses & Reporting Tools. \nStar Schema: \n\uf0b7 \nOne central fact table (e.g., Sales) \n\uf0b7 \nLinked to dimension tables (Customer, Product) \n\uf0b7 \nEasy to query, faster for reporting \nSnowflake Schema: \n\uf0b7 \nDimensions are normalized \n\uf0b7 \nLess redundancy but more joins \n \n9. OLTP vs OLAP (Database Types Simplified) \nFeature \nOLTP \nOLAP \n              Purpose \nDaily transactions \nData analysis \n              Design \nHighly normalized \ntables \nDenormalized \nschema \n             Examples \nBanking, eCommerce Reporting,Data \nWarehouse \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "\ud83c\udfaf INTERVIEW & PLACEMENT \n \n\ud83d\udd39 Basic Level (Entry / Fresher) \n1. What is SQL? \nStructured Query Language used to interact with relational databases. \n2. What is the difference between WHERE and HAVING? \nWHERE filters rows before aggregation, HAVING filters after aggregation. \n3. What is a Primary Key? \nA unique identifier for each row in a table. Cannot contain NULL values. \n4. Difference between INNER JOIN and LEFT JOIN? \nINNER JOIN: Returns matched rows only. \nLEFT JOIN: Returns all rows from the left table, even if no match. \n5. How do you handle NULLs in SQL? \nUse IS NULL, IS NOT NULL, COALESCE(), IFNULL(), NULLIF(). \n6. What is a Foreign Key? \nIt links two tables by referring to the primary key of another table. \n7. What is normalization? \nProcess of organizing data to reduce redundancy and improve integrity. \n8. What is denormalization? \nCombining tables to improve read performance by reducing joins. \n9. What does the DISTINCT keyword do? \nRemoves duplicate rows from the result set. \n10. What is the use of LIMIT or TOP? \nUsed to limit the number of rows returned by a query. \n\ud83d\udd39 Intermediate Level \n11. What are aggregate functions? \nFunctions like SUM(), AVG(), COUNT(), MAX(), MIN(). \n12. What is a subquery? \nA query nested inside another query. \n13. What is the difference between UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey impro", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "een UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey improve the speed of data retrieval. \n16. What is a view? \nA virtual table based on the result-set of a query. \n17. What are window functions? \nFunctions like RANK(), ROW_NUMBER() that work across rows. \n18. Difference between RANK() and DENSE_RANK()? \nRANK() skips ranks on ties, DENSE_RANK() does not. \n19. What is a CTE (Common Table Expression)? \nA temporary result set defined within the execution scope of a query. \n20. Explain ACID properties. \nAtomicity, Consistency, Isolation, Durability - ensures reliable transactions. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": "21. What is a composite key? \nA primary key made of multiple columns. \n22. Difference between DELETE and TRUNCATE? \nDELETE can be conditional and logs row-by-row deletion; TRUNCATE removes all rows \nfaster without logging each deletion. \n23. What is a surrogate key? \nA unique identifier for an entity that is not derived from application data. \n24. What is referential integrity? \nEnsures foreign key values match primary key values in the referenced table. \n25. How does EXISTS differ from IN? \nEXISTS stops on first match; IN evaluates all results. \n26. How do you use GROUP BY with multiple columns? \nYou can group by multiple columns by separating them with commas. \n27. Can we use ORDER BY with GROUP BY? \nYes. GROUP BY groups the data; ORDER BY sorts the grouped results. \n28. What is a scalar subquery? \nA subquery that returns exactly one value. \n29. What are correlated subqueries? \nSubqueries that refer to columns from the outer query. \n30. What is the use of ISNULL() or IFNULL()? \nTo replace NULL values with custom values. \n\ud83d\udd39 Advanced Level \n31. What are triggers in SQL? \nProcedures that automatically execute on certain events. \n32. What are stored procedures? \nReusable blocks of SQL statements stored in the database. \n33. What is the use of EXPLAIN or EXPLAIN PLAN? \nTo understand how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *,", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": " how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *, and use EXPLAIN to analyze. \n36. Difference between clustered and non-clustered index? \nClustered index determines row order in the table; non-clustered does not. \n37. Difference between OLTP and OLAP systems? \nOLTP: Online Transaction Processing (day-to-day operations). \nOLAP: Online Analytical Processing (data analysis and reporting). \n38. What are materialized views? \nStored query results that can be refreshed periodically. \n39. How do you implement pagination in SQL? \nUsing LIMIT and OFFSET or ROW_NUMBER() for custom logic. \n40. How do you handle duplicate rows? \nUsing ROW_NUMBER() or DISTINCT or CTEs with filtering. \n41. What are the different types of joins? \nINNER, LEFT, RIGHT, FULL OUTER, CROSS JOIN, SELF JOIN. \n42. What is a CROSS JOIN? \nReturns Cartesian product of two tables. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 18, "text": "43. Can you sort by an alias in SQL? \nYes, you can use the alias name in the ORDER BY clause. \n44. What is the difference between SQL and NoSQL? \nSQL is relational and uses tables. NoSQL is non-relational and uses documents, key-\nvalue pairs, etc. \n45. What are the common data types in SQL? \nINT, VARCHAR, DATE, BOOLEAN, DECIMAL, TEXT. \n46. Can a table have multiple foreign keys? \nYes, a table can reference multiple other tables using foreign keys. \n47. What happens if you violate a foreign key constraint? \nThe query fails with an integrity constraint violation. \n48. How can you change a column datatype in SQL? \nUsing ALTER TABLE table_name MODIFY column_name new_datatype; \n49. What are NULL-safe operators? \nOperators like <=> in MySQL allow safe comparison with NULL. \n50. How would you detect and remove duplicate records? \nUsing CTE and ROW_NUMBER() to filter duplicates. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 19, "text": "Real Company SQL Questions \nGoogle \n\uf0b7 \nSecond Highest Salary \nSELECT MAX(salary) AS SecondHighest \nFROM Employees \nWHERE salary < (SELECT MAX(salary) FROM Employees); \n\uf0b7 \nRemove Duplicate Emails Using ROW_NUMBER() \nWITH RankedEmails AS ( \n  SELECT *, ROW_NUMBER() OVER (PARTITION BY email ORDER BY id) \nAS rn \n  FROM Users \n) \nDELETE FROM RankedEmails WHERE rn > 1; \n\uf0b7 \nEmployees Earning More Than Average Salary \nSELECT name, salary \nFROM Employees \nWHERE salary > (SELECT AVG(salary) FROM Employees); \nAmazon \n\uf0b7 \nCustomers Who Ordered in Every Month \nSELECT customer_id \nFROM Orders \nGROUP BY customer_id \nHAVING COUNT(DISTINCT MONTH(order_date)) = 12; \n\uf0b7 \nTop 3 Earners in Each Department \nSELECT * \nFROM ( \n  SELECT *, DENSE_RANK() OVER (PARTITION BY department_id \nORDER BY salary DESC) AS rank \n  FROM Employees \n) ranked \nWHERE rank <= 3; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 20, "text": "\uf0b7 \nFind Returning Users Using LAG \nSELECT user_id, order_date, \n       LAG(order_date) OVER (PARTITION BY user_id ORDER BY \norder_date) AS previous_order \nFROM Orders; \nTCS \n\uf0b7 \nEmployees Joined in Last 6 Months \nSELECT * FROM Employees \nWHERE join_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH); \n\uf0b7 \nManager-Reportee Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n\uf0b7 \nDepartment with Highest Average Salary \nSELECT department_id \nFROM Employees \nGROUP BY department_id \nORDER BY AVG(salary) DESC \nLIMIT 1; \nFlipkart \n\uf0b7 \nTop 5 Selling Products by Revenue \nSELECT product_id, SUM(price * quantity) AS revenue \nFROM Orders \nGROUP BY product_id \nORDER BY revenue DESC \nLIMIT 5; \n\uf0b7 \nUsers with More Than 3 Failed Transactions \nSELECT user_id \nFROM Transactions \nWHERE status = 'FAILED' \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 21, "text": "GROUP BY user_id \nHAVING COUNT(*) > 3; \n\uf0b7 \nOrders Not Yet Shipped \nSELECT * \nFROM Orders \nWHERE status = 'PLACED' AND shipped_date IS NULL; \nSQL Problem-Solving Round \n \n\uf0b7 \nNth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET N-1; \n\uf0b7 \nDuplicate Emails \nSELECT email, COUNT(*) \nFROM Users \nGROUP BY email \nHAVING COUNT(*) > 1; \n\uf0b7 \nTop Earner per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, RANK() OVER (PARTITION BY department_id ORDER BY \nsalary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\uf0b7 \nCustomers Who Never Ordered \nSELECT c.customer_id, c.name \nFROM Customers c \nLEFT JOIN Orders o ON c.customer_id = o.customer_id \nWHERE o.order_id IS NULL; \n\uf0b7 \nEmployees Hired in the Last Month \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 22, "text": "SELECT * FROM Employees \nWHERE hire_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 \nMONTH) AND CURDATE(); \n\uf0b7 \nUser Order Summary \nSELECT user_id, COUNT(*) AS order_count, SUM(total_amount) AS \ntotal_spent \nFROM Orders \nGROUP BY user_id; \n\uf0b7 \n7-Day Rolling Login Count \nSELECT user_id, login_date, \n       COUNT(*) OVER ( \n         PARTITION BY user_id ORDER BY login_date \n         ROWS BETWEEN 6 PRECEDING AND CURRENT ROW \n       ) AS seven_day_logins \nFROM Logins; \n\uf0b7 \nFunnel Drop-off Analysis \nSELECT stage, COUNT(DISTINCT user_id) AS user_count \nFROM Funnel \nGROUP BY stage \nORDER BY stage; \n\uf0b7 \nAverage Time Between Orders \nSELECT user_id, AVG(DATEDIFF(order_date, LAG(order_date) OVER \n(PARTITION BY user_id ORDER BY order_date))) AS \navg_days_between_orders \nFROM Orders; \n\uf0b7 \nSelf Join for Employee Manager Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 1, "text": "Global Paid Developer & Mentorship Programs  \n1. Paid Developer Programs  \n  \nProgram  \nLocation  \nDuration  \nPay (INR)  \nApply Timeline  \nLinkedIn REACH  \nHybrid (USA)  \n1-5 years  \nRs.1.16-1.41 Cr/year    \n          June  \nMicrosoft LEAP  \nOn-site (USA/Canada)  16 weeks  \nRs.82-96 L/year  \n         August   \nAdobe Digital Academy  \nOn-site (USA)  \n6-9 months  \nStipend + Paid Apprenticeship  \n       September  \nGoogle Summer of Code (  GSoC)Remote  \n12+ weeks  \nRs.1.25-2.5 L  \n          March   \nMLH Fellowship  \nRemote  \n12 weeks  \nRs.4.1 L  \n     March- April  \nLinux Foundation Mentorsh ip (LFX)Remote  \n3-24 weeks  \nRs.2.5-5 L  \n     Feb-July (varies)  \n  \n2. Application Links   \n1. LinkedIn REACH: https://careers.linkedin.com/reach  \n2. Microsoft LEAP:  https://leap.microsoft.com  \n3. Adobe Digital Academy: https://www.adobe.com/corporate-\nresponsibility/creativity/digitalacademy  \n4. Google Summer of Code (GSoC): https://summerofcode.withgoogle.com  \n5. MLH Fellowship: https://fellowship.mlh.io/  \n6. Linux Foundation Mentorship (LFX): https://lfx.linuxfoundation.org/mentorship/  \n3. Paid Remote Mentorship Opportunities  \n1. Google Summer of Code (Mentor)  \nDetails: Experienced developers can apply as paid mentors for open-source projects.  \nApply: https://summerofcode.withgoogle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-sou", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "gle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-source project maintainers or contributors can apply to host/mentor projects. Apply: \nhttps://lfx.linuxfoundation.org/mentorship/  \n  \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Ecommerce  Mobility  \nCompanies  \nCloud  \nServices/  \nSaaS  \nCRM/Workflow \nManagement  \nTravel  \nPayments/  \nFintech  \nInvestment Banks/  \nHedge Funds  \nFlipkart  \nOla  \nVmWare  \nZoho  \nAirbnb  \nPaypal  \nDE Shaw  \nMyntra  \nUber  \nRedHat  \nSalesforce  \nOYO  \nVisa  \nGoldman Sachs  \nTesco  \nMeru  \nOCI  \nEngageBay  \nMakeMyTrip  \nPhonepe  \nWorld Quant  \nWalmart  \nZoomcar  \nSAP Labs  \nServiceNow  \nExpedia  \nPaytm  \nArcessium  \nTarget  \nRapido  \nIBM  \n \nBooking.com  BharatPe  \nIntuit  \nShopsy  \n \nBrowserStack   \nAgoda  \nCred  \nJP Morgan  \nBloomerang  \n \nNutanix  \n \nGroupon  \nSlice  \nMorgan Stanley  \nCult.fit  \n \nHp  \n \n \nRazorpay  \nWells Fargo  \nAJIO  \n \nNetApp  \n \n \nZeta  \nDruva  \nPharmaeasy   \nCohesity  \n \n \nRupeek  \n \nMeesho  \n \nTekion Corp  \n \n \nClearTax  \n \nLowe\u2019s  \n  \nRubrik  \n  \n  \nJupiter  \n  \nCompanies  \n \nMost High Paying Remote Jobs and few On-site jobs (Use FILTERS) \n1. https://tinyparticlejobs.com/ \n2. https://www.remoterocketship.com \n3. https://nodesk.co/remote-jobs/ \n4. https://wellfound.com/jobs \n5. https://weworkremotely.com/categories/remote-programming-jobs \n6. https://stackoverflow.com/jobs \n7. https://jobs.github.com \n8. https://www.linkedin.com/jobs/ \n9. https://www.toptal.com/ \n10. https://remoteok.io/remote-dev-jobs \n \nFew very high paying remote \u2013  \nSpreeTail \nBlink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Blink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": " \n \nRICH PEOPLE USES / BILLIONAIRES LINKS \n Investment & Startup Platforms \n AngelList Ventures  \u2014 https://angel.co/venture \n MicroVentures \u2014 https://microventures.com/ \n ToptalSeedInvest \u2014 https://www.seedinvest.com/ \n Product Hunt Makers -- https://www.producthunt.com/makers \n Y Cobinator Startup School \u2013 https://www.startupschool.org/ \n      Premium Networking & Professional Platforms \n Lunchclub \u2014 https://lunchclub.com/ \n Shapr \u2014 https://www.shapr.co/ \n Toptal \u2014 https://www.toptal.com/ \n Tiger 21 (private network for investors) \u2014https://tiger21.com/ \n FoundersCard \u2014 https://founderscard.com/ \n      Exclusive Social & Community Platforms \n Clubhouse (invite-only audio network) \u2014 https://www.joinclubhouse.com/ \n Techstars Founders Slack (invite-only; search online to join) \n Various Venture Capital & Startup Discord communities (search Discord servers) \n     Conferences & Summits (for networking) \n TED \u2014 https://www.ted.com/ \n Web Summit -- https://websummit.com/ \n SXSW -- https://www.sxsw.com/ \n TechCrunch Disrupt \u2014 https://techcrunch.com/events/disrupt-sf-2024/ \n Forbes 30 Under 30 Summit \u2014https://www.forbes.com/30-under-30-summit/ \n     Private Family Office & Wealth Networks \n Family Office Club \u2014 https://familyoffices.com/ \n Opal Group \u2014 https://opalgroup.net/ \n \nEmails/Numbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLead", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": "mbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLeads \nVoilaNorbert, AngelList Talent, YCombinator Jobs, WellFound, Triplebyte, HackerRank Talent, Wiza \nLinkedIn Email Finder by Skrapp or Snov.io, Hunter for Chrome, Clearbit Reveal, Lusha Chrome \nExtension \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "BHAWANA KUMAR  \n 7972684479    \n   bhawanakumar5@gmail.com      \n  Linkedin \nGithub                  Portfolio \n \nExperience \nCybage Software \nSoftware Engineer  \nNov\u201923 \u2013 Present \n\u2022 Built scalable enterprise apps using Angular, React, Node.js, MongoDB, SQL, Python & Ruby on Rails, improving \nperformance by 30% via lazy loading and UI optimization. \n\u2022 Integrated 15+ REST APIs for real-time, secure data exchange across microservices. \n\u2022 Developed reusable UI libraries and CI/CD pipelines with Gitlab, accelerating deployments. \n\u2022 Designed responsive, accessible UIs using SCSS and best cross-browser practices. \n\u2022 Delivered authentication modules, RBAC and admin dashboards in Agile teams. \n Skills \n\u2022 Languages & Frameworks - JavaScript, TypeScript, Python, Django, Ruby on Rails  \n\u2022 Frontend - React.js, Angular, HTML5, CSS3, Responsive Web Design \n\u2022 Backend & APIs \u2013 Node.js, Django, Ruby on Rails, RESTful APIs \n\u2022 Databases \u2013 MongoDB, SQL \n\u2022 Tools & Practices \u2013 Git, Gitlab, CI/CD, Agile/Scrum \n\u2022 CS Fundamentals \u2013 Data Structures, Algorithms, OOP, Problem Solving \n\u2022 Soft Skills -  Communication, Collaboration, Time Management, Adaptability \nProjects \nAutoTradeHub \u2013 Automobile E-commerce Platform \nTech Stack: Angular, Node.js, MongoDB, SCSS, REST APIs \nBuilt role-based auth, vehicle CRUD, image uploads, filters, Razorpay payments, and analytics dashboard. \nClixVerse \u2013 Social Media Platform \nTech Stack: Ruby on Rails, SQL, Turbo, ERB \nImplemented image-based articles, likes, bookmarks", "file_name": "BhawanaKumar_SoftwareEngineer_Resume.pdf"}, {"page": 1, "text": ", image uploads, filters, Razorpay payments, and analytics dashboard. \nClixVerse \u2013 Social Media Platform \nTech Stack: Ruby on Rails, SQL, Turbo, ERB \nImplemented image-based articles, likes, bookmarks, comments, global/scoped search, and admin moderation. \nFake Website Detection Tool \nTech Stack: React, Django, 3rd Party APIs \nBuilt a full-stack web app to detect phishing websites by analyzing URLs and content using APIs. \nEducation \nDr. Babasaheb Ambedkar Technological University                                                                        \n     Maharashtra \nB.Tech. Computer Engineering \nMay 2019 \u2013 May 2023 \nMajor Elective: Computer Science \nCGPA: 8.83 \nCertifications & Awards \nMeta Front-End Developer Certification:  Coursera, 2025 \nHacktoberfest Contributor: Successfully contributed to open source repositories. \nCybage Chess Championship Winner (2024): Secured 1st place in female category \nPublication: Design and Implementation of EzyRidez- A ride sharing platform, GIS Science Journal 2023 \n", "file_name": "BhawanaKumar_SoftwareEngineer_Resume.pdf"}, {"page": 1, "text": "Global Paid Developer & Mentorship Programs  \n1. Paid Developer Programs  \n  \nProgram  \nLocation  \nDuration  \nPay (INR)  \nApply Timeline  \nLinkedIn REACH  \nHybrid (USA)  \n1-5 years  \nRs.1.16-1.41 Cr/year    \n          June  \nMicrosoft LEAP  \nOn-site (USA/Canada)  16 weeks  \nRs.82-96 L/year  \n         August   \nAdobe Digital Academy  \nOn-site (USA)  \n6-9 months  \nStipend + Paid Apprenticeship  \n       September  \nGoogle Summer of Code (  GSoC)Remote  \n12+ weeks  \nRs.1.25-2.5 L  \n          March   \nMLH Fellowship  \nRemote  \n12 weeks  \nRs.4.1 L  \n     March- April  \nLinux Foundation Mentorsh ip (LFX)Remote  \n3-24 weeks  \nRs.2.5-5 L  \n     Feb-July (varies)  \n  \n2. Application Links   \n1. LinkedIn REACH: https://careers.linkedin.com/reach  \n2. Microsoft LEAP:  https://leap.microsoft.com  \n3. Adobe Digital Academy: https://www.adobe.com/corporate-\nresponsibility/creativity/digitalacademy  \n4. Google Summer of Code (GSoC): https://summerofcode.withgoogle.com  \n5. MLH Fellowship: https://fellowship.mlh.io/  \n6. Linux Foundation Mentorship (LFX): https://lfx.linuxfoundation.org/mentorship/  \n3. Paid Remote Mentorship Opportunities  \n1. Google Summer of Code (Mentor)  \nDetails: Experienced developers can apply as paid mentors for open-source projects.  \nApply: https://summerofcode.withgoogle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-sou", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "gle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-source project maintainers or contributors can apply to host/mentor projects. Apply: \nhttps://lfx.linuxfoundation.org/mentorship/  \n  \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Ecommerce  Mobility  \nCompanies  \nCloud  \nServices/  \nSaaS  \nCRM/Workflow \nManagement  \nTravel  \nPayments/  \nFintech  \nInvestment Banks/  \nHedge Funds  \nFlipkart  \nOla  \nVmWare  \nZoho  \nAirbnb  \nPaypal  \nDE Shaw  \nMyntra  \nUber  \nRedHat  \nSalesforce  \nOYO  \nVisa  \nGoldman Sachs  \nTesco  \nMeru  \nOCI  \nEngageBay  \nMakeMyTrip  \nPhonepe  \nWorld Quant  \nWalmart  \nZoomcar  \nSAP Labs  \nServiceNow  \nExpedia  \nPaytm  \nArcessium  \nTarget  \nRapido  \nIBM  \n \nBooking.com  BharatPe  \nIntuit  \nShopsy  \n \nBrowserStack   \nAgoda  \nCred  \nJP Morgan  \nBloomerang  \n \nNutanix  \n \nGroupon  \nSlice  \nMorgan Stanley  \nCult.fit  \n \nHp  \n \n \nRazorpay  \nWells Fargo  \nAJIO  \n \nNetApp  \n \n \nZeta  \nDruva  \nPharmaeasy   \nCohesity  \n \n \nRupeek  \n \nMeesho  \n \nTekion Corp  \n \n \nClearTax  \n \nLowe\u2019s  \n  \nRubrik  \n  \n  \nJupiter  \n  \nCompanies  \n \nMost High Paying Remote Jobs and few On-site jobs (Use FILTERS) \n1. https://tinyparticlejobs.com/ \n2. https://www.remoterocketship.com \n3. https://nodesk.co/remote-jobs/ \n4. https://wellfound.com/jobs \n5. https://weworkremotely.com/categories/remote-programming-jobs \n6. https://stackoverflow.com/jobs \n7. https://jobs.github.com \n8. https://www.linkedin.com/jobs/ \n9. https://www.toptal.com/ \n10. https://remoteok.io/remote-dev-jobs \n \nFew very high paying remote \u2013  \nSpreeTail \nBlink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Blink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": " \n \nRICH PEOPLE USES / BILLIONAIRES LINKS \n Investment & Startup Platforms \n AngelList Ventures  \u2014 https://angel.co/venture \n MicroVentures \u2014 https://microventures.com/ \n ToptalSeedInvest \u2014 https://www.seedinvest.com/ \n Product Hunt Makers -- https://www.producthunt.com/makers \n Y Cobinator Startup School \u2013 https://www.startupschool.org/ \n      Premium Networking & Professional Platforms \n Lunchclub \u2014 https://lunchclub.com/ \n Shapr \u2014 https://www.shapr.co/ \n Toptal \u2014 https://www.toptal.com/ \n Tiger 21 (private network for investors) \u2014https://tiger21.com/ \n FoundersCard \u2014 https://founderscard.com/ \n      Exclusive Social & Community Platforms \n Clubhouse (invite-only audio network) \u2014 https://www.joinclubhouse.com/ \n Techstars Founders Slack (invite-only; search online to join) \n Various Venture Capital & Startup Discord communities (search Discord servers) \n     Conferences & Summits (for networking) \n TED \u2014 https://www.ted.com/ \n Web Summit -- https://websummit.com/ \n SXSW -- https://www.sxsw.com/ \n TechCrunch Disrupt \u2014 https://techcrunch.com/events/disrupt-sf-2024/ \n Forbes 30 Under 30 Summit \u2014https://www.forbes.com/30-under-30-summit/ \n     Private Family Office & Wealth Networks \n Family Office Club \u2014 https://familyoffices.com/ \n Opal Group \u2014 https://opalgroup.net/ \n \nEmails/Numbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLead", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": "mbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLeads \nVoilaNorbert, AngelList Talent, YCombinator Jobs, WellFound, Triplebyte, HackerRank Talent, Wiza \nLinkedIn Email Finder by Skrapp or Snov.io, Hunter for Chrome, Clearbit Reveal, Lusha Chrome \nExtension \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "Global Paid Developer & Mentorship Programs  \n1. Paid Developer Programs  \n  \nProgram  \nLocation  \nDuration  \nPay (INR)  \nApply Timeline  \nLinkedIn REACH  \nHybrid (USA)  \n1-5 years  \nRs.1.16-1.41 Cr/year    \n          June  \nMicrosoft LEAP  \nOn-site (USA/Canada)  16 weeks  \nRs.82-96 L/year  \n         August   \nAdobe Digital Academy  \nOn-site (USA)  \n6-9 months  \nStipend + Paid Apprenticeship  \n       September  \nGoogle Summer of Code (  GSoC)Remote  \n12+ weeks  \nRs.1.25-2.5 L  \n          March   \nMLH Fellowship  \nRemote  \n12 weeks  \nRs.4.1 L  \n     March- April  \nLinux Foundation Mentorsh ip (LFX)Remote  \n3-24 weeks  \nRs.2.5-5 L  \n     Feb-July (varies)  \n  \n2. Application Links   \n1. LinkedIn REACH: https://careers.linkedin.com/reach  \n2. Microsoft LEAP:  https://leap.microsoft.com  \n3. Adobe Digital Academy: https://www.adobe.com/corporate-\nresponsibility/creativity/digitalacademy  \n4. Google Summer of Code (GSoC): https://summerofcode.withgoogle.com  \n5. MLH Fellowship: https://fellowship.mlh.io/  \n6. Linux Foundation Mentorship (LFX): https://lfx.linuxfoundation.org/mentorship/  \n3. Paid Remote Mentorship Opportunities  \n1. Google Summer of Code (Mentor)  \nDetails: Experienced developers can apply as paid mentors for open-source projects.  \nApply: https://summerofcode.withgoogle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-sou", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "gle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-source project maintainers or contributors can apply to host/mentor projects. Apply: \nhttps://lfx.linuxfoundation.org/mentorship/  \n  \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Ecommerce  Mobility  \nCompanies  \nCloud  \nServices/  \nSaaS  \nCRM/Workflow \nManagement  \nTravel  \nPayments/  \nFintech  \nInvestment Banks/  \nHedge Funds  \nFlipkart  \nOla  \nVmWare  \nZoho  \nAirbnb  \nPaypal  \nDE Shaw  \nMyntra  \nUber  \nRedHat  \nSalesforce  \nOYO  \nVisa  \nGoldman Sachs  \nTesco  \nMeru  \nOCI  \nEngageBay  \nMakeMyTrip  \nPhonepe  \nWorld Quant  \nWalmart  \nZoomcar  \nSAP Labs  \nServiceNow  \nExpedia  \nPaytm  \nArcessium  \nTarget  \nRapido  \nIBM  \n \nBooking.com  BharatPe  \nIntuit  \nShopsy  \n \nBrowserStack   \nAgoda  \nCred  \nJP Morgan  \nBloomerang  \n \nNutanix  \n \nGroupon  \nSlice  \nMorgan Stanley  \nCult.fit  \n \nHp  \n \n \nRazorpay  \nWells Fargo  \nAJIO  \n \nNetApp  \n \n \nZeta  \nDruva  \nPharmaeasy   \nCohesity  \n \n \nRupeek  \n \nMeesho  \n \nTekion Corp  \n \n \nClearTax  \n \nLowe\u2019s  \n  \nRubrik  \n  \n  \nJupiter  \n  \nCompanies  \n \nMost High Paying Remote Jobs and few On-site jobs (Use FILTERS) \n1. https://tinyparticlejobs.com/ \n2. https://www.remoterocketship.com \n3. https://nodesk.co/remote-jobs/ \n4. https://wellfound.com/jobs \n5. https://weworkremotely.com/categories/remote-programming-jobs \n6. https://stackoverflow.com/jobs \n7. https://jobs.github.com \n8. https://www.linkedin.com/jobs/ \n9. https://www.toptal.com/ \n10. https://remoteok.io/remote-dev-jobs \n \nFew very high paying remote \u2013  \nSpreeTail \nBlink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Blink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": " \n \nRICH PEOPLE USES / BILLIONAIRES LINKS \n Investment & Startup Platforms \n AngelList Ventures  \u2014 https://angel.co/venture \n MicroVentures \u2014 https://microventures.com/ \n ToptalSeedInvest \u2014 https://www.seedinvest.com/ \n Product Hunt Makers -- https://www.producthunt.com/makers \n Y Cobinator Startup School \u2013 https://www.startupschool.org/ \n      Premium Networking & Professional Platforms \n Lunchclub \u2014 https://lunchclub.com/ \n Shapr \u2014 https://www.shapr.co/ \n Toptal \u2014 https://www.toptal.com/ \n Tiger 21 (private network for investors) \u2014https://tiger21.com/ \n FoundersCard \u2014 https://founderscard.com/ \n      Exclusive Social & Community Platforms \n Clubhouse (invite-only audio network) \u2014 https://www.joinclubhouse.com/ \n Techstars Founders Slack (invite-only; search online to join) \n Various Venture Capital & Startup Discord communities (search Discord servers) \n     Conferences & Summits (for networking) \n TED \u2014 https://www.ted.com/ \n Web Summit -- https://websummit.com/ \n SXSW -- https://www.sxsw.com/ \n TechCrunch Disrupt \u2014 https://techcrunch.com/events/disrupt-sf-2024/ \n Forbes 30 Under 30 Summit \u2014https://www.forbes.com/30-under-30-summit/ \n     Private Family Office & Wealth Networks \n Family Office Club \u2014 https://familyoffices.com/ \n Opal Group \u2014 https://opalgroup.net/ \n \nEmails/Numbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLead", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": "mbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLeads \nVoilaNorbert, AngelList Talent, YCombinator Jobs, WellFound, Triplebyte, HackerRank Talent, Wiza \nLinkedIn Email Finder by Skrapp or Snov.io, Hunter for Chrome, Clearbit Reveal, Lusha Chrome \nExtension \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "DSA Interview Notes \u2013 Standard Layouts & Mappings \n \n1. Phone Keypad Mapping \nphone_map = { \n    \"2\": \"abc\", \"3\": \"def\", \n    \"4\": \"ghi\", \"5\": \"jkl\", \n    \"6\": \"mno\", \"7\": \"pqrs\", \n    \"8\": \"tuv\", \"9\": \"wxyz\" \n} \n\u2705 Use in: \n\uf0b7 \nLetter Combinations of Phone Number, Predictive Text / T9, Find All Possible Words from \nDigits  \n\uf0b7 \nBacktracking, DFS, Strings \n \n2. Grid/Matrix Directions \n4-Direction Movement (Up, Down, Left, Right) \ndirs_4 = [(-1, 0), (1, 0), (0, -1), (0, 1)] \n8-Direction Movement (Diagonals included) \ndirs_8 = [(-1, -1), (-1, 0), (-1, 1), \n          (0, -1),           (0, 1), \n          (1, -1),  (1, 0),  (1, 1)] \n\u2705 Use in: \n\uf0b7 \nNumber of Islands, Word Search, Maze Solving, Flood Fill \n\uf0b7 \nDFS/BFS, Matrix Problems \n \n3. Knight\u2019s Moves (Chessboard) \nknight_moves = [ \n    (2, 1), (1, 2), (-1, 2), (-2, 1), \n    (-2, -1), (-1, -2), (1, -2), (2, -1) \n] \n\u2705 Use in:  Knight\u2019s Tour, Minimum Knight Moves , Puzzle/Chess Grid\n \n", "file_name": "DSAnPython.pdf"}, {"page": 2, "text": "4. Binary Tree Traversals \nclass TreeNode: \n    def __init__(self, val=0, left=None, right=None): \n        self.val = val \n        self.left = left \n        self.right = right \n\uf0b7 \nPreorder: Root \u2192 Left \u2192 Right \n\uf0b7 \nInorder: Left \u2192 Root \u2192 Right \n\uf0b7 \nPostorder: Left \u2192 Right \u2192 Root \n\uf0b7 \nLevel Order: BFS using queue \n\u2705 Use in: Tree reconstruction, Path Sum, BST validation, Trees, Recursion, DFS\n \n5. Min Heap / Max Heap in Python \nimport heapq \n \n# Min Heap \nheapq.heappush(heap, val) \nheapq.heappop(heap) \n \n# Max Heap \nheapq.heappush(heap, -val) \nheapq.heappop(heap) * -1 \n\u2705 Use in: Top K elements, Median in stream, Kth smallest/largest, Greedy, Priority Queues\n \n6. ASCII Mapping (Characters \u2192 Numbers) \nord('a')  # 97 \nchr(97)   # 'a' \n \nord('z')  # 122 \n\u2705 Use in: Frequency Arrays (size 26), Anagrams, Palindrome Check , Frequency counting\n \n7. Keyboard Row Mapping \nrow1 = set(\"qwertyuiop\") \nrow2 = set(\"asdfghjkl\") \nrow3 = set(\"zxcvbnm\") \n\u2705 Use in: Words Using Only One Row of Keyboard, String filtering\n \n", "file_name": "DSAnPython.pdf"}, {"page": 3, "text": "8. Roman Numerals Mapping \nroman_map = { \n    'I': 1, 'V': 5, 'X': 10, \n    'L': 50, 'C': 100, 'D': 500, 'M': 1000 \n} \n\u2705 Use in: Roman to Integer, Integer to Roman, String / Math Conversion\n \n9. Weekday Layout (for calendar problems) \nweekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', \n'Friday', 'Saturday'] \n\u2705 Use in: Day calculation, Zeller\u2019s Congruence\n \n10. Digit to Word Mapping \ndigit_to_word = { \n  0: 'zero', 1: 'one', ..., 9: 'nine' \n} \n\u2705 Use in: Verbal arithmetic puzzles , Spoken digit output problems \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 4, "text": "The Top 14 LeetCode Patterns You Need to Know \n1. Sliding Window \n\u2705 Used when working with subarrays, substrings, or fixed-size / variable windows. \n     Helps in reducing time from O(n\u00b2) \u2192 O(n) \nExamples: Maximum Sum Subarray of Size K , Longest Substring Without Repeating Characters, \nMinimum Window Substring\n \n2. Two Pointers \n\u2705 Used for problems involving sorted arrays, linked lists, etc. \n     Moves two pointers from front/back/middle \nExamples: Two Sum II (sorted array), 3Sum, Container With Most Water\n \n3. Fast and Slow Pointers \n\u2705 Detect cycles, mid-points \nExamples: Linked List Cycle, Find the Duplicate Number , Middle of Linked List\n \n4. Hashing (HashMap / Set) \n\u2705 Count frequencies, track seen elements, prefix sums \nExamples: Subarray Sum Equals K , Group Anagrams , Longest Consecutive Sequence\n \n5. Prefix Sum \n\u2705 For cumulative/interval sums, range queries \nExamples: Subarray Sum Equals K , Range Sum Query , Count Subarrays with Sum\n \n6. Backtracking \n\u2705 Try all combinations, revert decisions \nExamples: Subsets , Permutations , Letter Combinations of a Phone Number, N-Queens \n", "file_name": "DSAnPython.pdf"}, {"page": 5, "text": " \n7. Recursion / DFS \n\u2705 Tree/graph traversal, subset problems \nExamples: Binary Tree Traversals , Generate Parentheses , Subsets\n \n8. Breadth-First Search (BFS) \n\u2705 Used in graphs, trees, shortest paths \nExamples: Binary Tree Level Order Traversal, Word Ladder, Number of Islands\n \n9. Depth-First Search (DFS) \n\u2705 Graph traversal, backtracking, component counting \nExamples: Number of Islands , Clone Graph , Word Search\n \n10. Greedy \n\u2705 Make best local choice at each step \nExamples: Jump Game , Merge Intervals , Gas Station , Partition Labels\n \n11. Dynamic Programming (DP) \n\u2705 Break down problem into subproblems, store results \nExamples: House Robber , Longest Increasing Subsequence , 0/1 Knapsack, Coin Change\n \n12. Bit Manipulation \n\u2705 Work with bits for optimization or tricky logic \nExamples: Single Number , Counting Bits , Subsets (with bitmasking) \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 6, "text": "13. Union Find (Disjoint Set) \n\u2705 Track connected components \nExamples: Graph Valid Tree , Number of Connected Components, Redundant Connection\n \n14. Heap / Priority Queue \n\u2705 Get max/min quickly, sliding window max, k-largest \nExamples: Kth Largest Element, Merge K Sorted Lists, Top K Frequent Elements \n \n \n \nExtra Patterns (Advanced \u2013 optional): \nIf you have time later, explore these bonus topics: \n1. Monotonic Stack / Deque \n2. Segment Trees / Binary Indexed Trees \n3. Dijkstra\u2019s / A* for weighted graphs \n4. Tries (prefix trees) \n5. Rabin-Karp (String Hashing) \nThese are not Amazon must-knows, but helpful for: \n\uf0b7 \nGoogle \n\uf0b7 \nDeep graph / string / optimization problems \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 7, "text": "1. Built-in Functions (Essentials) \n \nFunction \nPurpose \nExample \nmax() \nGet the maximum of values max(3, 7) \u2192 7 \nmin() \nGet the minimum \nmin(3, 7) \u2192 3 \nsum() \nSum of list values \nsum([1, 2, 3]) \u2192 6 \nlen() \nLength of list, string, etc. \nlen(arr) \nrange() \nGenerate a sequence \nrange(5) \u2192 0, 1, 2, 3, 4 \nenumerate() Loop with index \nfor i, val in enumerate(arr) \nreversed() \nReverse iterator \nfor val in reversed(arr) \nsorted() \nReturns sorted version of list sorted(arr) \nlist() \nConvert to list \nlist(\"abc\") \u2192 ['a','b','c'] \n \n2. Strings \u2013 Helpful Methods \n \nFunction \nPurpose \nExample \nstr.split() \nSplit string into list \n\"a b c\".split() \u2192 ['a','b','c'] \nstr.strip() \nRemove whitespace \n\" abc \".strip() \u2192 \"abc\" \nstr.isdigit() \nCheck if string is a digit \"123\".isdigit() \u2192 True \nstr.lower() / upper() Convert case \n\"HeLLo\".lower() \u2192 \"hello\" \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 8, "text": "3. Lists \u2013 Core Methods \nMethod \nPurpose \nExample \nlist.append(x) Add element at the end \narr.append(10) \nlist.pop() \nRemove last element \narr.pop() \nlist.remove(x) Remove element by value arr.remove(2) \nlist.index(x) \nGet index of value \narr.index(5) \nlist.insert(i, x) Insert at index \narr.insert(1, 99) \nlist.count(x) Count occurrences \narr.count(2) \n \n4. Dictionary (Hashmap) \u2013 Extremely Useful \nMethod / Function \nPurpose \nExample \ndict.get(key, default) Get value or return default d.get('a', 0) \ndict.keys() / values() Iterate keys/values \nfor key in d.keys() \ndict.items() \nIterate key, value pairs \nfor k, v in d.items() \nkey in dict \nCheck if key exists \n'a' in d \ndefaultdict(int) \nAuto-handle missing keys from collections import defaultdict \n \n5. Collections Module \nTool \nPurpose \nExample \ndefaultdict(type) Dictionary with default values dd = defaultdict(int) \nCounter() \nCount occurrences of elements Counter(\"aabc\") \u2192 {'a':2, 'b':1,...} \ndeque() \nDouble-ended queue \ndq = deque([1,2,3]) \nheapq \nPriority Queue / Min Heap \nheapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 9, "text": "6. Math / Time / Random \n \nModule \nFunction \nPurpose \nmath \nmath.sqrt(), math.ceil() Square root, rounding \ntime \ntime.time() \nGet current time (for speed) \nrandom random.randint() \nRandom numbers (for mock tests) \n \n7. Useful Tricks \nTrick \nDescription \nExample \narr[::-1] \nReverse a list or string \ns[::-1] \na, b = b, a Swap variables \n \n' '.join(list) Convert list to string with spaces ' '.join(['a','b']) \u2192 \"a b\" \nall() / any() Check all / any condition is True all([1, True]) \n \nBonus: Lambda & Key Functions (for Sorting) \narr.sort(key=lambda x: x[1])  # Sort by second element of sublists \nUseful for: \n\uf0b7 \nSorting arrays of tuples \n\uf0b7 \nSorting by custom logic \n \nGreat question, Bhawana! You're already covering a solid base. But yes \u2014 here\u2019s a final \nroundup of additional useful Python concepts and functions that are often overlooked but \ncritical in real DSA problems (especially in contests and interviews like Amazon). \n \n", "file_name": "DSAnPython.pdf"}, {"page": 10, "text": "8. Advanced Built-ins & Tricks (Most Students Miss These!) \nFeature/Function \nUse Case \nExample \nzip() \nLoop over multiple iterables \nsimultaneously \nfor a, b in zip(arr1, \narr2) \nmap() \nApply function to each item \nmap(int, input().split()) \nfilter() \nFilter elements by condition \nfilter(lambda x: x > 0, \narr) \nset() \nRemoves duplicates, used for \nfast lookup \nset(arr) \nset.add() / set.remove() \nModify set \n \nislice() from itertools \nSlicing iterators \nislice(range(100), 10, 20) \nbisect.bisect_left() / \nbisect_right() \nBinary search in sorted list \nbisect.bisect_left(arr, x) \nany() \nTrue if any element is truthy \nany([False, True, False]) \n\u2192 True \nall() \nTrue if all elements are truthy \nall([1, 2, 3]) \u2192 True \nre module \nRegex for pattern matching \n(sometimes needed in parsing) re.findall(r'\\d+', s) \n \n9. Built-in Data Types You Must Master \nType \nWhen to Use \nQuick Syntax Example \nlist Ordered, indexable \na = [1, 2, 3] \ntuple Immutable, hashable keys a = (1, 2) \nset \nUnique values, fast lookup a = {1, 2, 3} \ndict Key-value mapping \nd = {'a': 1} \ndeque Queue/Stack with fast ops deque([1,2,3]) from collections \nheap Min/Max heap for priority heapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 11, "text": "10. Collections Deep Dive (Very Interview-Friendly) \nTool \nUse Case \nExample \ndefaultdict(list/int) Auto-initialize missing keys dd = defaultdict(list) \nCounter() \nCount occurrences of each \nelement \nCounter([1,2,2,3]) \u2192 {2:2, 1:1, \n3:1} \nOrderedDict() \nKeeps insertion order \n(Rarely used now, since dicts are ordered from \nPython 3.7+) \ndeque() \nQueue or two-sided \noperations \ndq.popleft(), dq.appendleft() \n \n11. heapq (Min/Max Heap) \nimport heapq \nmin_heap = [] \nheapq.heappush(min_heap, 5) \nheapq.heappush(min_heap, 3) \nheapq.heappop(min_heap)  # returns 3 (smallest) \nUse in: \n\u2705 Top-K problems, \n\u2705 Priority queues, \n\u2705 Greedy algorithms \n \n12. Functools (for memoization and recursion) \nfrom functools import lru_cache \n \n@lru_cache(None) \ndef fib(n): \n    if n <= 1: \n        return n \n    return fib(n-1) + fib(n-2) \nUse in: \n\u2705 Dynamic Programming, \n\u2705 Top-down memoization, \n\u2705 Recursion-heavy problems \n", "file_name": "DSAnPython.pdf"}, {"page": 12, "text": " \n13. Bit Manipulation Functions \nBit Trick \nPurpose \nx << 1, x >> 1 \nBit shifts (multiply/divide by 2) \nx & 1 \nCheck if x is odd \nx ^ y \nBitwise XOR \nbin(x).count('1') Count set bits in x \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 13, "text": "Python Notes for Beginners to Intermediate \n 1. Introduction to Python \n\uf0b7 \nHigh-level, interpreted, and dynamically typed programming language. \n\uf0b7 \nCreated by Guido van Rossum, released in 1991. \n\uf0b7 \nGreat for web dev, data science, automation, AI, scripting, etc. \n \n2. Basic Syntax \n# This is a comment \nprint(\"Hello, World!\")  # Output: Hello, World! \n\uf0b7 \nIndentation is mandatory in Python to define blocks. \n\uf0b7 \nNo {} or ; like in C/C++/Java. \n \n3. Data Types \n\uf0b7 \nint, float, str, bool \n\uf0b7 \nlist, tuple, set, dict \n\uf0b7 \nNoneType \na = 5               # int \nb = 5.0             # float \nc = \"Python\"        # str \nd = True            # bool \n \n4. Type Conversion \nint(\"5\")        # 5 \nfloat(\"3.14\")   # 3.14 \nstr(100)        # \"100\" \nbool(0)         # False \n \n5. Variables \n\uf0b7 \nNo need to declare the type. \n\uf0b7 \nFollows snake_case naming. \nname = \"Bhawana\" \nage = 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 14, "text": " \n6. Control Flow \nif / elif / else \nif age > 18: \n    print(\"Adult\") \nelif age == 18: \n    print(\"Just turned adult\") \nelse: \n    print(\"Minor\") \nwhile loop \ni = 0 \nwhile i < 5: \n    print(i) \n    i += 1 \nfor loop \nfor i in range(5): \n    print(i) \n \n 7. Functions \ndef greet(name): \n    return f\"Hello, {name}\" \n \nprint(greet(\"Bhawana\")) \n \n8. Strings \ntext = \"Python\" \nprint(text.upper())       # 'PYTHON' \nprint(text[0])            # 'P' \nprint(len(text))          # 6 \nprint(\"th\" in text)       # True \n \n9. Lists \nfruits = [\"apple\", \"banana\", \"mango\"] \nfruits.append(\"orange\") \nprint(fruits[1])          # \"banana\" \n \n", "file_name": "DSAnPython.pdf"}, {"page": 15, "text": "10. Tuples \nt = (1, 2, 3) \n# Immutable \nprint(t[0])               # 1 \n \n11. Dictionaries \nstudent = {\"name\": \"Alice\", \"age\": 20} \nprint(student[\"name\"])    # Alice \nstudent[\"age\"] = 21 \n \n12. Sets \nnums = {1, 2, 3, 2} \nprint(nums)               # {1, 2, 3} - duplicates removed \n \n13. Exception Handling \ntry: \n    x = 1 / 0 \nexcept ZeroDivisionError: \n    print(\"Can't divide by zero!\") \nfinally: \n    print(\"Done\") \n \n14. Modules and Libraries \nimport math \nprint(math.sqrt(16))      # 4.0 \nInstall external modules: \npip install requests \n \n15. List Comprehension \nsquares = [x**2 for x in range(5)]   # [0, 1, 4, 9, 16] \n \n16. Lambda Functions \nsquare = lambda x: x ** 2 \nprint(square(5))          # 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 16, "text": " \n 17. Object-Oriented Programming (OOP) \nclass Person: \n    def __init__(self, name): \n        self.name = name \n \n    def say_hi(self): \n        print(f\"Hi, I'm {self.name}\") \n \np = Person(\"Bhawana\") \np.say_hi() \n \n18. File Handling \nwith open(\"file.txt\", \"r\") as file: \n    content = file.read() \n    print(content) \n \n19. Useful Built-in Functions \n\uf0b7 \nlen(), type(), range(), sorted(), input(), sum(), max(), min() \n \n20. Best Practices \n\uf0b7 \nUse meaningful variable names. \n\uf0b7 \nKeep code DRY (Don't Repeat Yourself). \n\uf0b7 \nUse virtual environments. \n\uf0b7 \nFollow PEP8 (Python Style Guide). \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 17, "text": " \n", "file_name": "DSAnPython.pdf"}, {"page": 1, "text": "React Mastery Path  \n \nPhase 1: React Fundamentals \n1. JSX (JavaScript XML) \n\uf0b7 \nWhat: A syntax extension for JavaScript that looks like HTML and is used to describe \nUI structure in React. \n\uf0b7 \nWhy Important: Enables declarative UI creation and readable component structure. \n\uf0b7 \nUnder the Hood: JSX is transpiled to React.createElement() by Babel, which builds \na virtual DOM tree. \n\uf0b7 \nUsed in Real Apps: Defining component UI layout. \n\uf0b7 \nExample: \n\uf0b7 \nconst Welcome = () => <h1>Hello, SafeWeb AI User!</h1>; \n\uf0b7 \nHands-On Task: Create a Header, Footer, and Landing JSX layout. \n\uf0b7 \nInterview Question: What happens to JSX during the build process? \n\uf0b7 \nSafeWeb AI Use: Structure landing pages, hero sections, or onboarding screens. \n2. Components (Functional & Class) \n\uf0b7 \nWhat: Independent, reusable pieces of UI. \n\uf0b7 \nWhy Important: Encapsulates logic and markup for reuse and readability. \n\uf0b7 \nUnder the Hood: Each component maintains its own lifecycle and props/context \nhandling. \n\uf0b7 \nUsed in Real Apps: Every UI block (Navbar, Card, Form) is a component. \n\uf0b7 \nExample: \n\uf0b7 \nfunction Card(props) { \n\uf0b7 \n  return <div className=\"card\">{props.content}</div>; \n\uf0b7 \n} \n\uf0b7 \nHands-On Task: Build a FeatureCard component for highlighting SafeWeb AI \nfeatures. \n\uf0b7 \nInterview Question: Difference between functional and class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables c", "file_name": "React Notes.pdf"}, {"page": 1, "text": "nd class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables communication between components. \n\uf0b7 \nUnder the Hood: Props are passed as parameters to functions. \n\uf0b7 \nUsed in Real Apps: Passing user info, config, styles. \n\uf0b7 \nExample: \n\uf0b7 \nconst Greeting = ({ name }) => <h2>Hello, {name}</h2>; \n\uf0b7 \nHands-On Task: Pass site scan results from parent to child. \n", "file_name": "React Notes.pdf"}, {"page": 2, "text": "\uf0b7 \nInterview Question: Can a child modify props? \n\uf0b7 \nSafeWeb AI Use: Show user-specific security reports. \n4. State \n\uf0b7 \nWhat: A built-in object used to hold dynamic data. \n\uf0b7 \nWhy Important: Controls component behavior over time. \n\uf0b7 \nUnder the Hood: React uses useState to store and re-render components on update. \n\uf0b7 \nUsed in Real Apps: Handling form inputs, toggles, modals. \n\uf0b7 \nExample: \n\uf0b7 \nconst [email, setEmail] = useState(''); \n\uf0b7 \nHands-On Task: Build a login form managing email/password state. \n\uf0b7 \nInterview Question: How does state cause a re-render? \n\uf0b7 \nSafeWeb AI Use: Manage user input and scan configuration. \n5. Event Handling \n\uf0b7 \nWhat: Listening and responding to user events. \n\uf0b7 \nWhy Important: Powers interactivity. \n\uf0b7 \nUnder the Hood: Synthetic event system based on native events. \n\uf0b7 \nUsed in Real Apps: Form submission, buttons, toggles. \n\uf0b7 \nExample: \n\uf0b7 \n<button onClick={handleScan}>Start Scan</button> \n\uf0b7 \nHands-On Task: Add a \u201cStart Scan\u201d button with click handler. \n\uf0b7 \nInterview Question: What is a synthetic event? \n\uf0b7 \nSafeWeb AI Use: Trigger a website scan. \n6. Conditional Rendering \n\uf0b7 \nWhat: Rendering different UI based on conditions. \n\uf0b7 \nWhy Important: Enhances UX by showing relevant data. \n\uf0b7 \nUnder the Hood: Simple JavaScript logic (ternaries, &&, if). \n\uf0b7 \nUsed in Real Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to impl", "file_name": "React Notes.pdf"}, {"page": 2, "text": "al Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to implement conditional rendering? \n\uf0b7 \nSafeWeb AI Use: Show different UI during scan progress. \n7. Lists and Keys \n\uf0b7 \nWhat: Rendering multiple elements using map() with unique key props. \n\uf0b7 \nWhy Important: Efficient rendering and reconciliation. \n\uf0b7 \nUnder the Hood: Keys help React identify changed, added, or removed items. \n\uf0b7 \nUsed in Real Apps: Listing scan results, history logs. \n\uf0b7 \nExample: \n", "file_name": "React Notes.pdf"}, {"page": 3, "text": "\uf0b7 \n{urls.map((url) => <li key={url}>{url}</li>)} \n\uf0b7 \nHands-On Task: Display a list of scanned URLs. \n\uf0b7 \nInterview Question: Why are keys important in lists? \n\uf0b7 \nSafeWeb AI Use: Show scanned website list. \n8. useEffect \n\uf0b7 \nWhat: Side effects like data fetching, subscriptions. \n\uf0b7 \nWhy Important: Handles operations outside render. \n\uf0b7 \nUnder the Hood: Scheduled after paint, cleanup via return function. \n\uf0b7 \nUsed in Real Apps: Fetching scan results, triggering alerts. \n\uf0b7 \nExample: \n\uf0b7 \nuseEffect(() => { fetchData(); }, []); \n\uf0b7 \nHands-On Task: Fetch dummy scan data on load. \n\uf0b7 \nInterview Question: How does the dependency array work? \n\uf0b7 \nSafeWeb AI Use: Load recent scan history on dashboard. \n9. Hooks (Intro) \n\uf0b7 \nWhat: Special functions to use React features in functional components. \n\uf0b7 \nWhy Important: Replaces classes with reusable logic. \n\uf0b7 \nUnder the Hood: Hooks use internal closures and React's fiber scheduler. \n\uf0b7 \nUsed in Real Apps: All stateful or side-effect components. \n\uf0b7 \nExample: useState, useEffect \n\uf0b7 \nHands-On Task: Use useState and useEffect together. \n\uf0b7 \nInterview Question: Why can\u2019t hooks be called conditionally? \n\uf0b7 \nSafeWeb AI Use: State and side effect logic. \n10. Forms \n\uf0b7 \nWhat: Collecting and managing user input. \n\uf0b7 \nWhy Important: Central for user interaction. \n\uf0b7 \nUnder the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 ", "file_name": "React Notes.pdf"}, {"page": 3, "text": "r the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 \nHands-On Task: Build scan request form. \n\uf0b7 \nInterview Question: Difference between controlled and uncontrolled components? \n\uf0b7 \nSafeWeb AI Use: Get website input from users. \n11. Context API \n\uf0b7 \nWhat: Global state manager for passing data without prop drilling. \n\uf0b7 \nWhy Important: Simplifies state sharing. \n\uf0b7 \nUnder the Hood: Uses React context provider/consumer. \n\uf0b7 \nUsed in Real Apps: Theme, auth, locale. \n", "file_name": "React Notes.pdf"}, {"page": 4, "text": "\uf0b7 \nExample: \n\uf0b7 \nconst UserContext = React.createContext(); \n\uf0b7 \nHands-On Task: Create AuthContext. \n\uf0b7 \nInterview Question: How does context re-render consumers? \n\uf0b7 \nSafeWeb AI Use: Share user data across pages. \n12. React Router \n\uf0b7 \nWhat: Routing library to handle navigation. \n\uf0b7 \nWhy Important: Enables multi-page apps. \n\uf0b7 \nUnder the Hood: Uses HTML5 history API. \n\uf0b7 \nUsed in Real Apps: Page navigation. \n\uf0b7 \nExample: \n\uf0b7 \n<Route path=\"/scan\" element={<Scan />} /> \n\uf0b7 \nHands-On Task: Setup Login, Dashboard, Scan routes. \n\uf0b7 \nInterview Question: Difference between browser and hash routers? \n\uf0b7 \nSafeWeb AI Use: Navigate between sections. \n13. Custom Hooks \n\uf0b7 \nWhat: User-defined reusable hook functions. \n\uf0b7 \nWhy Important: Abstraction and reuse of logic. \n\uf0b7 \nUnder the Hood: Functions that call other hooks. \n\uf0b7 \nUsed in Real Apps: Reusable logic blocks. \n\uf0b7 \nExample: useAuth, useScanStatus \n\uf0b7 \nHands-On Task: Create useAuthGuard. \n\uf0b7 \nInterview Question: Naming rule for hooks? \n\uf0b7 \nSafeWeb AI Use: Custom logic management. \n14. useMemo & useCallback \n\uf0b7 \nWhat: Memoization hooks to optimize performance. \n\uf0b7 \nWhy Important: Prevents unnecessary recalculations or re-renders. \n\uf0b7 \nUnder the Hood: Caches previous return values. \n\uf0b7 \nUsed in Real Apps: Expensive operations, function refs. \n\uf0b7 \nExample: \n\uf0b7 \nconst memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. ", "file_name": "React Notes.pdf"}, {"page": 4, "text": "st memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. \n15. Refs and useRef \n\uf0b7 \nWhat: Direct DOM access or persist values across renders. \n\uf0b7 \nWhy Important: Needed for focus, timers, scroll. \n\uf0b7 \nUnder the Hood: Maintains mutable .current reference. \n", "file_name": "React Notes.pdf"}, {"page": 5, "text": "\uf0b7 \nUsed in Real Apps: Form fields, animations. \n\uf0b7 \nExample: inputRef.current.focus() \n\uf0b7 \nHands-On Task: Focus input on mount. \n\uf0b7 \nInterview Question: When to use refs? \n\uf0b7 \nSafeWeb AI Use: Scroll to report. \n16. Error Boundaries \n\uf0b7 \nWhat: Catch and handle render errors. \n\uf0b7 \nWhy Important: Prevent crashes. \n\uf0b7 \nUnder the Hood: Uses lifecycle methods (componentDidCatch). \n\uf0b7 \nUsed in Real Apps: Wrapping entire app/components. \n\uf0b7 \nExample: Class-based error catcher. \n\uf0b7 \nHands-On Task: Create ErrorBoundary wrapper. \n\uf0b7 \nInterview Question: Can hooks catch errors? \n\uf0b7 \nSafeWeb AI Use: Catch scan/report failures. \n17. Code Splitting \n\uf0b7 \nWhat: Load JS bundles on demand. \n\uf0b7 \nWhy Important: Reduces initial load. \n\uf0b7 \nUnder the Hood: Uses React.lazy and dynamic import. \n\uf0b7 \nUsed in Real Apps: Lazy-loading routes/pages. \n\uf0b7 \nExample: \n\uf0b7 \nconst Scan = React.lazy(() => import('./Scan')); \n\uf0b7 \nHands-On Task: Split heavy components. \n\uf0b7 \nInterview Question: Difference between lazy and suspense? \n\uf0b7 \nSafeWeb AI Use: Speed up first load. \n18. Higher Order Components \n\uf0b7 \nWhat: Functions returning components. \n\uf0b7 \nWhy Important: Reusable logic decorators. \n\uf0b7 \nUnder the Hood: Functional pattern. \n\uf0b7 \nUsed in Real Apps: Permissions, tracking. \n\uf0b7 \nExample: withLogging(Component) \n\uf0b7 \nHands-On Task: Create HOC for authentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Impo", "file_name": "React Notes.pdf"}, {"page": 5, "text": "uthentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Important: Flexible pattern. \n\uf0b7 \nUnder the Hood: Functions as children. \n\uf0b7 \nUsed in Real Apps: Sliders, animations. \n", "file_name": "React Notes.pdf"}, {"page": 6, "text": "\uf0b7 \nExample: <DataProvider render={(data) => <Chart data={data} />} \n\uf0b7 \nHands-On Task: Create MouseTracker. \n\uf0b7 \nInterview Question: Downsides of render props? \n\uf0b7 \nSafeWeb AI Use: Share UI logic. \n20. State Management \n\uf0b7 \nWhat: Tools to manage complex app state. \n\uf0b7 \nWhy Important: Scalability. \n\uf0b7 \nUnder the Hood: Central store and dispatch pattern. \n\uf0b7 \nUsed in Real Apps: Redux, Zustand. \n\uf0b7 \nExample: useReducer, Redux store \n\uf0b7 \nHands-On Task: Manage scan logs in global state. \n\uf0b7 \nInterview Question: Redux vs context? \n\uf0b7 \nSafeWeb AI Use: Global scan/auth state. \n21. Axios / Fetch \n\uf0b7 \nWhat: HTTP libraries to talk to APIs. \n\uf0b7 \nWhy Important: Core for data interaction. \n\uf0b7 \nUnder the Hood: Promise-based APIs. \n\uf0b7 \nUsed in Real Apps: Backend communication. \n\uf0b7 \nExample: axios.get('/api/report') \n\uf0b7 \nHands-On Task: Fetch scan results. \n\uf0b7 \nInterview Question: Axios vs fetch? \n\uf0b7 \nSafeWeb AI Use: Talk to scan API. \n22. Folder Structure \n\uf0b7 \nWhat: Organizing codebase. \n\uf0b7 \nWhy Important: Maintainability. \n\uf0b7 \nUnder the Hood: Logical separation. \n\uf0b7 \nUsed in Real Apps: Feature/domain-based. \n\uf0b7 \nExample: src/components, src/services \n\uf0b7 \nHands-On Task: Restructure SafeWeb AI project. \n\uf0b7 \nInterview Question: Best practices for large apps? \n\uf0b7 \nSafeWeb AI Use: Scale codebase. \n23. PropTypes / TypeScript \n\uf0b7 \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.p", "file_name": "React Notes.pdf"}, {"page": 6, "text": " \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.propTypes = { name: PropTypes.string } \n", "file_name": "React Notes.pdf"}, {"page": 7, "text": "\uf0b7 \nHands-On Task: Add PropTypes to core components. \n\uf0b7 \nInterview Question: TS vs PropTypes? \n\uf0b7 \nSafeWeb AI Use: Ensure correct data handling. \n24. Testing (Jest + RTL) \n\uf0b7 \nWhat: Automated validation of logic and UI. \n\uf0b7 \nWhy Important: Prevent regressions. \n\uf0b7 \nUnder the Hood: Simulates components. \n\uf0b7 \nUsed in Real Apps: CI pipelines. \n\uf0b7 \nExample: expect(getByText('Welcome')).toBeInTheDocument() \n\uf0b7 \nHands-On Task: Test login and scan page. \n\uf0b7 \nInterview Question: Unit vs integration test? \n\uf0b7 \nSafeWeb AI Use: Bug-free reliability. \n \n \nReact Interview Questions & Precise Answers \n \n1. What happens to JSX during the build process? \no JSX is transpiled by Babel into React.createElement() calls that build the \nvirtual DOM. \n2. Difference between functional and class components? \no Functional: Simple functions using hooks. Class: ES6 classes using lifecycle \nmethods. \n3. Can a child modify props? \no No. Props are read-only; only the parent can change them. \n4. How does state cause a re-render? \no Calling setState triggers React\u2019s scheduler to re-render that component with \nupdated state. \n5. What is a synthetic event? \no A cross-browser wrapper around native events, provided by React for \nconsistency. \n6. Ways to implement conditional rendering? \no \nif/else, ternary ? :, logical AND &&, IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useE", "file_name": "React Notes.pdf"}, {"page": 7, "text": ", IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useEffect? \no It determines when the effect runs. Empty array means run once. Include variables \nto trigger rerun when they change. \n9. Why can\u2019t hooks be called conditionally? \n", "file_name": "React Notes.pdf"}, {"page": 8, "text": "o Because React relies on the order of hooks. Conditional calls break this order, \ncausing bugs. \n10. Difference between controlled and uncontrolled components? \no Controlled: state-driven. Uncontrolled: DOM-driven (using refs). \n11. How does context re-render consumers? \no When context value changes, all consumers using that context re-render. \n12. Difference between browser and hash routers? \no BrowserRouter uses HTML5 history API. HashRouter uses URL hash (#) for \nrouting. \n13. Naming rule for custom hooks? \no Must start with use to let React track them internally. \n14. When does useMemo recalculate? \no When any dependency in its dependency array changes. \n15. When to use refs? \no When you need direct DOM access or to persist values without triggering re-\nrenders. \n16. Can hooks catch errors? \no No. Only class-based error boundaries can catch render-time errors. \n17. Difference between lazy and suspense? \no \nlazy dynamically imports components. Suspense wraps lazy-loaded components \nto handle loading fallback. \n18. Compare HOCs with hooks? \no HOCs wrap components for reuse. Hooks reuse logic inside functional \ncomponents. \n19. Downsides of render props? \no Can lead to deeply nested structures (callback hell). \n20. Redux vs Context? \no Redux is for complex/global state with middleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps fo", "file_name": "React Notes.pdf"}, {"page": 8, "text": "dleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps folder structure? \no Feature-based or domain-based structure with clear separation of concerns. \n23. TypeScript vs PropTypes? \no TypeScript checks types at compile-time. PropTypes check at runtime and are \nlimited. \n24. Unit vs integration test? \no Unit: test single component/function. Integration: test interactions between \ncomponents. \n \n \n", "file_name": "React Notes.pdf"}, {"page": 1, "text": "Global Paid Developer & Mentorship Programs  \n1. Paid Developer Programs  \n  \nProgram  \nLocation  \nDuration  \nPay (INR)  \nApply Timeline  \nLinkedIn REACH  \nHybrid (USA)  \n1-5 years  \nRs.1.16-1.41 Cr/year    \n          June  \nMicrosoft LEAP  \nOn-site (USA/Canada)  16 weeks  \nRs.82-96 L/year  \n         August   \nAdobe Digital Academy  \nOn-site (USA)  \n6-9 months  \nStipend + Paid Apprenticeship  \n       September  \nGoogle Summer of Code (  GSoC)Remote  \n12+ weeks  \nRs.1.25-2.5 L  \n          March   \nMLH Fellowship  \nRemote  \n12 weeks  \nRs.4.1 L  \n     March- April  \nLinux Foundation Mentorsh ip (LFX)Remote  \n3-24 weeks  \nRs.2.5-5 L  \n     Feb-July (varies)  \n  \n2. Application Links   \n1. LinkedIn REACH: https://careers.linkedin.com/reach  \n2. Microsoft LEAP:  https://leap.microsoft.com  \n3. Adobe Digital Academy: https://www.adobe.com/corporate-\nresponsibility/creativity/digitalacademy  \n4. Google Summer of Code (GSoC): https://summerofcode.withgoogle.com  \n5. MLH Fellowship: https://fellowship.mlh.io/  \n6. Linux Foundation Mentorship (LFX): https://lfx.linuxfoundation.org/mentorship/  \n3. Paid Remote Mentorship Opportunities  \n1. Google Summer of Code (Mentor)  \nDetails: Experienced developers can apply as paid mentors for open-source projects.  \nApply: https://summerofcode.withgoogle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-sou", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "gle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-source project maintainers or contributors can apply to host/mentor projects. Apply: \nhttps://lfx.linuxfoundation.org/mentorship/  \n  \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Ecommerce  Mobility  \nCompanies  \nCloud  \nServices/  \nSaaS  \nCRM/Workflow \nManagement  \nTravel  \nPayments/  \nFintech  \nInvestment Banks/  \nHedge Funds  \nFlipkart  \nOla  \nVmWare  \nZoho  \nAirbnb  \nPaypal  \nDE Shaw  \nMyntra  \nUber  \nRedHat  \nSalesforce  \nOYO  \nVisa  \nGoldman Sachs  \nTesco  \nMeru  \nOCI  \nEngageBay  \nMakeMyTrip  \nPhonepe  \nWorld Quant  \nWalmart  \nZoomcar  \nSAP Labs  \nServiceNow  \nExpedia  \nPaytm  \nArcessium  \nTarget  \nRapido  \nIBM  \n \nBooking.com  BharatPe  \nIntuit  \nShopsy  \n \nBrowserStack   \nAgoda  \nCred  \nJP Morgan  \nBloomerang  \n \nNutanix  \n \nGroupon  \nSlice  \nMorgan Stanley  \nCult.fit  \n \nHp  \n \n \nRazorpay  \nWells Fargo  \nAJIO  \n \nNetApp  \n \n \nZeta  \nDruva  \nPharmaeasy   \nCohesity  \n \n \nRupeek  \n \nMeesho  \n \nTekion Corp  \n \n \nClearTax  \n \nLowe\u2019s  \n  \nRubrik  \n  \n  \nJupiter  \n  \nCompanies  \n \nMost High Paying Remote Jobs and few On-site jobs (Use FILTERS) \n1. https://tinyparticlejobs.com/ \n2. https://www.remoterocketship.com \n3. https://nodesk.co/remote-jobs/ \n4. https://wellfound.com/jobs \n5. https://weworkremotely.com/categories/remote-programming-jobs \n6. https://stackoverflow.com/jobs \n7. https://jobs.github.com \n8. https://www.linkedin.com/jobs/ \n9. https://www.toptal.com/ \n10. https://remoteok.io/remote-dev-jobs \n \nFew very high paying remote \u2013  \nSpreeTail \nBlink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Blink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": " \n \nRICH PEOPLE USES / BILLIONAIRES LINKS \n Investment & Startup Platforms \n AngelList Ventures  \u2014 https://angel.co/venture \n MicroVentures \u2014 https://microventures.com/ \n ToptalSeedInvest \u2014 https://www.seedinvest.com/ \n Product Hunt Makers -- https://www.producthunt.com/makers \n Y Cobinator Startup School \u2013 https://www.startupschool.org/ \n      Premium Networking & Professional Platforms \n Lunchclub \u2014 https://lunchclub.com/ \n Shapr \u2014 https://www.shapr.co/ \n Toptal \u2014 https://www.toptal.com/ \n Tiger 21 (private network for investors) \u2014https://tiger21.com/ \n FoundersCard \u2014 https://founderscard.com/ \n      Exclusive Social & Community Platforms \n Clubhouse (invite-only audio network) \u2014 https://www.joinclubhouse.com/ \n Techstars Founders Slack (invite-only; search online to join) \n Various Venture Capital & Startup Discord communities (search Discord servers) \n     Conferences & Summits (for networking) \n TED \u2014 https://www.ted.com/ \n Web Summit -- https://websummit.com/ \n SXSW -- https://www.sxsw.com/ \n TechCrunch Disrupt \u2014 https://techcrunch.com/events/disrupt-sf-2024/ \n Forbes 30 Under 30 Summit \u2014https://www.forbes.com/30-under-30-summit/ \n     Private Family Office & Wealth Networks \n Family Office Club \u2014 https://familyoffices.com/ \n Opal Group \u2014 https://opalgroup.net/ \n \nEmails/Numbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLead", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": "mbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLeads \nVoilaNorbert, AngelList Talent, YCombinator Jobs, WellFound, Triplebyte, HackerRank Talent, Wiza \nLinkedIn Email Finder by Skrapp or Snov.io, Hunter for Chrome, Clearbit Reveal, Lusha Chrome \nExtension \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "DSA Interview Notes \u2013 Standard Layouts & Mappings \n \n1. Phone Keypad Mapping \nphone_map = { \n    \"2\": \"abc\", \"3\": \"def\", \n    \"4\": \"ghi\", \"5\": \"jkl\", \n    \"6\": \"mno\", \"7\": \"pqrs\", \n    \"8\": \"tuv\", \"9\": \"wxyz\" \n} \n\u2705 Use in: \n\uf0b7 \nLetter Combinations of Phone Number, Predictive Text / T9, Find All Possible Words from \nDigits  \n\uf0b7 \nBacktracking, DFS, Strings \n \n2. Grid/Matrix Directions \n4-Direction Movement (Up, Down, Left, Right) \ndirs_4 = [(-1, 0), (1, 0), (0, -1), (0, 1)] \n8-Direction Movement (Diagonals included) \ndirs_8 = [(-1, -1), (-1, 0), (-1, 1), \n          (0, -1),           (0, 1), \n          (1, -1),  (1, 0),  (1, 1)] \n\u2705 Use in: \n\uf0b7 \nNumber of Islands, Word Search, Maze Solving, Flood Fill \n\uf0b7 \nDFS/BFS, Matrix Problems \n \n3. Knight\u2019s Moves (Chessboard) \nknight_moves = [ \n    (2, 1), (1, 2), (-1, 2), (-2, 1), \n    (-2, -1), (-1, -2), (1, -2), (2, -1) \n] \n\u2705 Use in:  Knight\u2019s Tour, Minimum Knight Moves , Puzzle/Chess Grid\n \n", "file_name": "DSAnPython.pdf"}, {"page": 2, "text": "4. Binary Tree Traversals \nclass TreeNode: \n    def __init__(self, val=0, left=None, right=None): \n        self.val = val \n        self.left = left \n        self.right = right \n\uf0b7 \nPreorder: Root \u2192 Left \u2192 Right \n\uf0b7 \nInorder: Left \u2192 Root \u2192 Right \n\uf0b7 \nPostorder: Left \u2192 Right \u2192 Root \n\uf0b7 \nLevel Order: BFS using queue \n\u2705 Use in: Tree reconstruction, Path Sum, BST validation, Trees, Recursion, DFS\n \n5. Min Heap / Max Heap in Python \nimport heapq \n \n# Min Heap \nheapq.heappush(heap, val) \nheapq.heappop(heap) \n \n# Max Heap \nheapq.heappush(heap, -val) \nheapq.heappop(heap) * -1 \n\u2705 Use in: Top K elements, Median in stream, Kth smallest/largest, Greedy, Priority Queues\n \n6. ASCII Mapping (Characters \u2192 Numbers) \nord('a')  # 97 \nchr(97)   # 'a' \n \nord('z')  # 122 \n\u2705 Use in: Frequency Arrays (size 26), Anagrams, Palindrome Check , Frequency counting\n \n7. Keyboard Row Mapping \nrow1 = set(\"qwertyuiop\") \nrow2 = set(\"asdfghjkl\") \nrow3 = set(\"zxcvbnm\") \n\u2705 Use in: Words Using Only One Row of Keyboard, String filtering\n \n", "file_name": "DSAnPython.pdf"}, {"page": 3, "text": "8. Roman Numerals Mapping \nroman_map = { \n    'I': 1, 'V': 5, 'X': 10, \n    'L': 50, 'C': 100, 'D': 500, 'M': 1000 \n} \n\u2705 Use in: Roman to Integer, Integer to Roman, String / Math Conversion\n \n9. Weekday Layout (for calendar problems) \nweekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', \n'Friday', 'Saturday'] \n\u2705 Use in: Day calculation, Zeller\u2019s Congruence\n \n10. Digit to Word Mapping \ndigit_to_word = { \n  0: 'zero', 1: 'one', ..., 9: 'nine' \n} \n\u2705 Use in: Verbal arithmetic puzzles , Spoken digit output problems \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 4, "text": "The Top 14 LeetCode Patterns You Need to Know \n1. Sliding Window \n\u2705 Used when working with subarrays, substrings, or fixed-size / variable windows. \n     Helps in reducing time from O(n\u00b2) \u2192 O(n) \nExamples: Maximum Sum Subarray of Size K , Longest Substring Without Repeating Characters, \nMinimum Window Substring\n \n2. Two Pointers \n\u2705 Used for problems involving sorted arrays, linked lists, etc. \n     Moves two pointers from front/back/middle \nExamples: Two Sum II (sorted array), 3Sum, Container With Most Water\n \n3. Fast and Slow Pointers \n\u2705 Detect cycles, mid-points \nExamples: Linked List Cycle, Find the Duplicate Number , Middle of Linked List\n \n4. Hashing (HashMap / Set) \n\u2705 Count frequencies, track seen elements, prefix sums \nExamples: Subarray Sum Equals K , Group Anagrams , Longest Consecutive Sequence\n \n5. Prefix Sum \n\u2705 For cumulative/interval sums, range queries \nExamples: Subarray Sum Equals K , Range Sum Query , Count Subarrays with Sum\n \n6. Backtracking \n\u2705 Try all combinations, revert decisions \nExamples: Subsets , Permutations , Letter Combinations of a Phone Number, N-Queens \n", "file_name": "DSAnPython.pdf"}, {"page": 5, "text": " \n7. Recursion / DFS \n\u2705 Tree/graph traversal, subset problems \nExamples: Binary Tree Traversals , Generate Parentheses , Subsets\n \n8. Breadth-First Search (BFS) \n\u2705 Used in graphs, trees, shortest paths \nExamples: Binary Tree Level Order Traversal, Word Ladder, Number of Islands\n \n9. Depth-First Search (DFS) \n\u2705 Graph traversal, backtracking, component counting \nExamples: Number of Islands , Clone Graph , Word Search\n \n10. Greedy \n\u2705 Make best local choice at each step \nExamples: Jump Game , Merge Intervals , Gas Station , Partition Labels\n \n11. Dynamic Programming (DP) \n\u2705 Break down problem into subproblems, store results \nExamples: House Robber , Longest Increasing Subsequence , 0/1 Knapsack, Coin Change\n \n12. Bit Manipulation \n\u2705 Work with bits for optimization or tricky logic \nExamples: Single Number , Counting Bits , Subsets (with bitmasking) \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 6, "text": "13. Union Find (Disjoint Set) \n\u2705 Track connected components \nExamples: Graph Valid Tree , Number of Connected Components, Redundant Connection\n \n14. Heap / Priority Queue \n\u2705 Get max/min quickly, sliding window max, k-largest \nExamples: Kth Largest Element, Merge K Sorted Lists, Top K Frequent Elements \n \n \n \nExtra Patterns (Advanced \u2013 optional): \nIf you have time later, explore these bonus topics: \n1. Monotonic Stack / Deque \n2. Segment Trees / Binary Indexed Trees \n3. Dijkstra\u2019s / A* for weighted graphs \n4. Tries (prefix trees) \n5. Rabin-Karp (String Hashing) \nThese are not Amazon must-knows, but helpful for: \n\uf0b7 \nGoogle \n\uf0b7 \nDeep graph / string / optimization problems \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 7, "text": "1. Built-in Functions (Essentials) \n \nFunction \nPurpose \nExample \nmax() \nGet the maximum of values max(3, 7) \u2192 7 \nmin() \nGet the minimum \nmin(3, 7) \u2192 3 \nsum() \nSum of list values \nsum([1, 2, 3]) \u2192 6 \nlen() \nLength of list, string, etc. \nlen(arr) \nrange() \nGenerate a sequence \nrange(5) \u2192 0, 1, 2, 3, 4 \nenumerate() Loop with index \nfor i, val in enumerate(arr) \nreversed() \nReverse iterator \nfor val in reversed(arr) \nsorted() \nReturns sorted version of list sorted(arr) \nlist() \nConvert to list \nlist(\"abc\") \u2192 ['a','b','c'] \n \n2. Strings \u2013 Helpful Methods \n \nFunction \nPurpose \nExample \nstr.split() \nSplit string into list \n\"a b c\".split() \u2192 ['a','b','c'] \nstr.strip() \nRemove whitespace \n\" abc \".strip() \u2192 \"abc\" \nstr.isdigit() \nCheck if string is a digit \"123\".isdigit() \u2192 True \nstr.lower() / upper() Convert case \n\"HeLLo\".lower() \u2192 \"hello\" \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 8, "text": "3. Lists \u2013 Core Methods \nMethod \nPurpose \nExample \nlist.append(x) Add element at the end \narr.append(10) \nlist.pop() \nRemove last element \narr.pop() \nlist.remove(x) Remove element by value arr.remove(2) \nlist.index(x) \nGet index of value \narr.index(5) \nlist.insert(i, x) Insert at index \narr.insert(1, 99) \nlist.count(x) Count occurrences \narr.count(2) \n \n4. Dictionary (Hashmap) \u2013 Extremely Useful \nMethod / Function \nPurpose \nExample \ndict.get(key, default) Get value or return default d.get('a', 0) \ndict.keys() / values() Iterate keys/values \nfor key in d.keys() \ndict.items() \nIterate key, value pairs \nfor k, v in d.items() \nkey in dict \nCheck if key exists \n'a' in d \ndefaultdict(int) \nAuto-handle missing keys from collections import defaultdict \n \n5. Collections Module \nTool \nPurpose \nExample \ndefaultdict(type) Dictionary with default values dd = defaultdict(int) \nCounter() \nCount occurrences of elements Counter(\"aabc\") \u2192 {'a':2, 'b':1,...} \ndeque() \nDouble-ended queue \ndq = deque([1,2,3]) \nheapq \nPriority Queue / Min Heap \nheapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 9, "text": "6. Math / Time / Random \n \nModule \nFunction \nPurpose \nmath \nmath.sqrt(), math.ceil() Square root, rounding \ntime \ntime.time() \nGet current time (for speed) \nrandom random.randint() \nRandom numbers (for mock tests) \n \n7. Useful Tricks \nTrick \nDescription \nExample \narr[::-1] \nReverse a list or string \ns[::-1] \na, b = b, a Swap variables \n \n' '.join(list) Convert list to string with spaces ' '.join(['a','b']) \u2192 \"a b\" \nall() / any() Check all / any condition is True all([1, True]) \n \nBonus: Lambda & Key Functions (for Sorting) \narr.sort(key=lambda x: x[1])  # Sort by second element of sublists \nUseful for: \n\uf0b7 \nSorting arrays of tuples \n\uf0b7 \nSorting by custom logic \n \nGreat question, Bhawana! You're already covering a solid base. But yes \u2014 here\u2019s a final \nroundup of additional useful Python concepts and functions that are often overlooked but \ncritical in real DSA problems (especially in contests and interviews like Amazon). \n \n", "file_name": "DSAnPython.pdf"}, {"page": 10, "text": "8. Advanced Built-ins & Tricks (Most Students Miss These!) \nFeature/Function \nUse Case \nExample \nzip() \nLoop over multiple iterables \nsimultaneously \nfor a, b in zip(arr1, \narr2) \nmap() \nApply function to each item \nmap(int, input().split()) \nfilter() \nFilter elements by condition \nfilter(lambda x: x > 0, \narr) \nset() \nRemoves duplicates, used for \nfast lookup \nset(arr) \nset.add() / set.remove() \nModify set \n \nislice() from itertools \nSlicing iterators \nislice(range(100), 10, 20) \nbisect.bisect_left() / \nbisect_right() \nBinary search in sorted list \nbisect.bisect_left(arr, x) \nany() \nTrue if any element is truthy \nany([False, True, False]) \n\u2192 True \nall() \nTrue if all elements are truthy \nall([1, 2, 3]) \u2192 True \nre module \nRegex for pattern matching \n(sometimes needed in parsing) re.findall(r'\\d+', s) \n \n9. Built-in Data Types You Must Master \nType \nWhen to Use \nQuick Syntax Example \nlist Ordered, indexable \na = [1, 2, 3] \ntuple Immutable, hashable keys a = (1, 2) \nset \nUnique values, fast lookup a = {1, 2, 3} \ndict Key-value mapping \nd = {'a': 1} \ndeque Queue/Stack with fast ops deque([1,2,3]) from collections \nheap Min/Max heap for priority heapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 11, "text": "10. Collections Deep Dive (Very Interview-Friendly) \nTool \nUse Case \nExample \ndefaultdict(list/int) Auto-initialize missing keys dd = defaultdict(list) \nCounter() \nCount occurrences of each \nelement \nCounter([1,2,2,3]) \u2192 {2:2, 1:1, \n3:1} \nOrderedDict() \nKeeps insertion order \n(Rarely used now, since dicts are ordered from \nPython 3.7+) \ndeque() \nQueue or two-sided \noperations \ndq.popleft(), dq.appendleft() \n \n11. heapq (Min/Max Heap) \nimport heapq \nmin_heap = [] \nheapq.heappush(min_heap, 5) \nheapq.heappush(min_heap, 3) \nheapq.heappop(min_heap)  # returns 3 (smallest) \nUse in: \n\u2705 Top-K problems, \n\u2705 Priority queues, \n\u2705 Greedy algorithms \n \n12. Functools (for memoization and recursion) \nfrom functools import lru_cache \n \n@lru_cache(None) \ndef fib(n): \n    if n <= 1: \n        return n \n    return fib(n-1) + fib(n-2) \nUse in: \n\u2705 Dynamic Programming, \n\u2705 Top-down memoization, \n\u2705 Recursion-heavy problems \n", "file_name": "DSAnPython.pdf"}, {"page": 12, "text": " \n13. Bit Manipulation Functions \nBit Trick \nPurpose \nx << 1, x >> 1 \nBit shifts (multiply/divide by 2) \nx & 1 \nCheck if x is odd \nx ^ y \nBitwise XOR \nbin(x).count('1') Count set bits in x \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 13, "text": "Python Notes for Beginners to Intermediate \n 1. Introduction to Python \n\uf0b7 \nHigh-level, interpreted, and dynamically typed programming language. \n\uf0b7 \nCreated by Guido van Rossum, released in 1991. \n\uf0b7 \nGreat for web dev, data science, automation, AI, scripting, etc. \n \n2. Basic Syntax \n# This is a comment \nprint(\"Hello, World!\")  # Output: Hello, World! \n\uf0b7 \nIndentation is mandatory in Python to define blocks. \n\uf0b7 \nNo {} or ; like in C/C++/Java. \n \n3. Data Types \n\uf0b7 \nint, float, str, bool \n\uf0b7 \nlist, tuple, set, dict \n\uf0b7 \nNoneType \na = 5               # int \nb = 5.0             # float \nc = \"Python\"        # str \nd = True            # bool \n \n4. Type Conversion \nint(\"5\")        # 5 \nfloat(\"3.14\")   # 3.14 \nstr(100)        # \"100\" \nbool(0)         # False \n \n5. Variables \n\uf0b7 \nNo need to declare the type. \n\uf0b7 \nFollows snake_case naming. \nname = \"Bhawana\" \nage = 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 14, "text": " \n6. Control Flow \nif / elif / else \nif age > 18: \n    print(\"Adult\") \nelif age == 18: \n    print(\"Just turned adult\") \nelse: \n    print(\"Minor\") \nwhile loop \ni = 0 \nwhile i < 5: \n    print(i) \n    i += 1 \nfor loop \nfor i in range(5): \n    print(i) \n \n 7. Functions \ndef greet(name): \n    return f\"Hello, {name}\" \n \nprint(greet(\"Bhawana\")) \n \n8. Strings \ntext = \"Python\" \nprint(text.upper())       # 'PYTHON' \nprint(text[0])            # 'P' \nprint(len(text))          # 6 \nprint(\"th\" in text)       # True \n \n9. Lists \nfruits = [\"apple\", \"banana\", \"mango\"] \nfruits.append(\"orange\") \nprint(fruits[1])          # \"banana\" \n \n", "file_name": "DSAnPython.pdf"}, {"page": 15, "text": "10. Tuples \nt = (1, 2, 3) \n# Immutable \nprint(t[0])               # 1 \n \n11. Dictionaries \nstudent = {\"name\": \"Alice\", \"age\": 20} \nprint(student[\"name\"])    # Alice \nstudent[\"age\"] = 21 \n \n12. Sets \nnums = {1, 2, 3, 2} \nprint(nums)               # {1, 2, 3} - duplicates removed \n \n13. Exception Handling \ntry: \n    x = 1 / 0 \nexcept ZeroDivisionError: \n    print(\"Can't divide by zero!\") \nfinally: \n    print(\"Done\") \n \n14. Modules and Libraries \nimport math \nprint(math.sqrt(16))      # 4.0 \nInstall external modules: \npip install requests \n \n15. List Comprehension \nsquares = [x**2 for x in range(5)]   # [0, 1, 4, 9, 16] \n \n16. Lambda Functions \nsquare = lambda x: x ** 2 \nprint(square(5))          # 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 16, "text": " \n 17. Object-Oriented Programming (OOP) \nclass Person: \n    def __init__(self, name): \n        self.name = name \n \n    def say_hi(self): \n        print(f\"Hi, I'm {self.name}\") \n \np = Person(\"Bhawana\") \np.say_hi() \n \n18. File Handling \nwith open(\"file.txt\", \"r\") as file: \n    content = file.read() \n    print(content) \n \n19. Useful Built-in Functions \n\uf0b7 \nlen(), type(), range(), sorted(), input(), sum(), max(), min() \n \n20. Best Practices \n\uf0b7 \nUse meaningful variable names. \n\uf0b7 \nKeep code DRY (Don't Repeat Yourself). \n\uf0b7 \nUse virtual environments. \n\uf0b7 \nFollow PEP8 (Python Style Guide). \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 17, "text": " \n", "file_name": "DSAnPython.pdf"}, {"page": 1, "text": "Global Paid Developer & Mentorship Programs  \n1. Paid Developer Programs  \n  \nProgram  \nLocation  \nDuration  \nPay (INR)  \nApply Timeline  \nLinkedIn REACH  \nHybrid (USA)  \n1-5 years  \nRs.1.16-1.41 Cr/year    \n          June  \nMicrosoft LEAP  \nOn-site (USA/Canada)  16 weeks  \nRs.82-96 L/year  \n         August   \nAdobe Digital Academy  \nOn-site (USA)  \n6-9 months  \nStipend + Paid Apprenticeship  \n       September  \nGoogle Summer of Code (  GSoC)Remote  \n12+ weeks  \nRs.1.25-2.5 L  \n          March   \nMLH Fellowship  \nRemote  \n12 weeks  \nRs.4.1 L  \n     March- April  \nLinux Foundation Mentorsh ip (LFX)Remote  \n3-24 weeks  \nRs.2.5-5 L  \n     Feb-July (varies)  \n  \n2. Application Links   \n1. LinkedIn REACH: https://careers.linkedin.com/reach  \n2. Microsoft LEAP:  https://leap.microsoft.com  \n3. Adobe Digital Academy: https://www.adobe.com/corporate-\nresponsibility/creativity/digitalacademy  \n4. Google Summer of Code (GSoC): https://summerofcode.withgoogle.com  \n5. MLH Fellowship: https://fellowship.mlh.io/  \n6. Linux Foundation Mentorship (LFX): https://lfx.linuxfoundation.org/mentorship/  \n3. Paid Remote Mentorship Opportunities  \n1. Google Summer of Code (Mentor)  \nDetails: Experienced developers can apply as paid mentors for open-source projects.  \nApply: https://summerofcode.withgoogle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-sou", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "gle.com  \n2. MLH Fellowship (Mentor)  \nDetails: Mentors guide pods remotely, paid role per cohort.  \nApply: https://fellowship.mlh.io/  \n3. Linux Foundation LFX Mentorship (Mentor)  \nDetails: Open-source project maintainers or contributors can apply to host/mentor projects. Apply: \nhttps://lfx.linuxfoundation.org/mentorship/  \n  \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Ecommerce  Mobility  \nCompanies  \nCloud  \nServices/  \nSaaS  \nCRM/Workflow \nManagement  \nTravel  \nPayments/  \nFintech  \nInvestment Banks/  \nHedge Funds  \nFlipkart  \nOla  \nVmWare  \nZoho  \nAirbnb  \nPaypal  \nDE Shaw  \nMyntra  \nUber  \nRedHat  \nSalesforce  \nOYO  \nVisa  \nGoldman Sachs  \nTesco  \nMeru  \nOCI  \nEngageBay  \nMakeMyTrip  \nPhonepe  \nWorld Quant  \nWalmart  \nZoomcar  \nSAP Labs  \nServiceNow  \nExpedia  \nPaytm  \nArcessium  \nTarget  \nRapido  \nIBM  \n \nBooking.com  BharatPe  \nIntuit  \nShopsy  \n \nBrowserStack   \nAgoda  \nCred  \nJP Morgan  \nBloomerang  \n \nNutanix  \n \nGroupon  \nSlice  \nMorgan Stanley  \nCult.fit  \n \nHp  \n \n \nRazorpay  \nWells Fargo  \nAJIO  \n \nNetApp  \n \n \nZeta  \nDruva  \nPharmaeasy   \nCohesity  \n \n \nRupeek  \n \nMeesho  \n \nTekion Corp  \n \n \nClearTax  \n \nLowe\u2019s  \n  \nRubrik  \n  \n  \nJupiter  \n  \nCompanies  \n \nMost High Paying Remote Jobs and few On-site jobs (Use FILTERS) \n1. https://tinyparticlejobs.com/ \n2. https://www.remoterocketship.com \n3. https://nodesk.co/remote-jobs/ \n4. https://wellfound.com/jobs \n5. https://weworkremotely.com/categories/remote-programming-jobs \n6. https://stackoverflow.com/jobs \n7. https://jobs.github.com \n8. https://www.linkedin.com/jobs/ \n9. https://www.toptal.com/ \n10. https://remoteok.io/remote-dev-jobs \n \nFew very high paying remote \u2013  \nSpreeTail \nBlink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 2, "text": "Blink Health \nDoorDash \nOwnwell \nAmgen \nMomentus \nTechnologies \nIndeed \nGrow \nTherapy \nXero \nFaire \nFi \nPreply \nSamba TV \nWorkato \nAppzen \n \n \n \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": " \n \nRICH PEOPLE USES / BILLIONAIRES LINKS \n Investment & Startup Platforms \n AngelList Ventures  \u2014 https://angel.co/venture \n MicroVentures \u2014 https://microventures.com/ \n ToptalSeedInvest \u2014 https://www.seedinvest.com/ \n Product Hunt Makers -- https://www.producthunt.com/makers \n Y Cobinator Startup School \u2013 https://www.startupschool.org/ \n      Premium Networking & Professional Platforms \n Lunchclub \u2014 https://lunchclub.com/ \n Shapr \u2014 https://www.shapr.co/ \n Toptal \u2014 https://www.toptal.com/ \n Tiger 21 (private network for investors) \u2014https://tiger21.com/ \n FoundersCard \u2014 https://founderscard.com/ \n      Exclusive Social & Community Platforms \n Clubhouse (invite-only audio network) \u2014 https://www.joinclubhouse.com/ \n Techstars Founders Slack (invite-only; search online to join) \n Various Venture Capital & Startup Discord communities (search Discord servers) \n     Conferences & Summits (for networking) \n TED \u2014 https://www.ted.com/ \n Web Summit -- https://websummit.com/ \n SXSW -- https://www.sxsw.com/ \n TechCrunch Disrupt \u2014 https://techcrunch.com/events/disrupt-sf-2024/ \n Forbes 30 Under 30 Summit \u2014https://www.forbes.com/30-under-30-summit/ \n     Private Family Office & Wealth Networks \n Family Office Club \u2014 https://familyoffices.com/ \n Opal Group \u2014 https://opalgroup.net/ \n \nEmails/Numbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLead", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 3, "text": "mbers \u2013  \nClearbit Connect, ContactOut, RocketReach, Hunter.io, Lusha, Skrapp.io, Swordfish.ai, LeadLeaper \nLinkedin Sales Navigator, Streak for Gmail, MeetLeonard, PeopleFinder/BeenVerified, AeroLeads \nVoilaNorbert, AngelList Talent, YCombinator Jobs, WellFound, Triplebyte, HackerRank Talent, Wiza \nLinkedIn Email Finder by Skrapp or Snov.io, Hunter for Chrome, Clearbit Reveal, Lusha Chrome \nExtension \n", "file_name": "Paid_Developer_Programs.pdf"}, {"page": 1, "text": "DSA Interview Notes \u2013 Standard Layouts & Mappings \n \n1. Phone Keypad Mapping \nphone_map = { \n    \"2\": \"abc\", \"3\": \"def\", \n    \"4\": \"ghi\", \"5\": \"jkl\", \n    \"6\": \"mno\", \"7\": \"pqrs\", \n    \"8\": \"tuv\", \"9\": \"wxyz\" \n} \n\u2705 Use in: \n\uf0b7 \nLetter Combinations of Phone Number, Predictive Text / T9, Find All Possible Words from \nDigits  \n\uf0b7 \nBacktracking, DFS, Strings \n \n2. Grid/Matrix Directions \n4-Direction Movement (Up, Down, Left, Right) \ndirs_4 = [(-1, 0), (1, 0), (0, -1), (0, 1)] \n8-Direction Movement (Diagonals included) \ndirs_8 = [(-1, -1), (-1, 0), (-1, 1), \n          (0, -1),           (0, 1), \n          (1, -1),  (1, 0),  (1, 1)] \n\u2705 Use in: \n\uf0b7 \nNumber of Islands, Word Search, Maze Solving, Flood Fill \n\uf0b7 \nDFS/BFS, Matrix Problems \n \n3. Knight\u2019s Moves (Chessboard) \nknight_moves = [ \n    (2, 1), (1, 2), (-1, 2), (-2, 1), \n    (-2, -1), (-1, -2), (1, -2), (2, -1) \n] \n\u2705 Use in:  Knight\u2019s Tour, Minimum Knight Moves , Puzzle/Chess Grid\n \n", "file_name": "DSAnPython.pdf"}, {"page": 2, "text": "4. Binary Tree Traversals \nclass TreeNode: \n    def __init__(self, val=0, left=None, right=None): \n        self.val = val \n        self.left = left \n        self.right = right \n\uf0b7 \nPreorder: Root \u2192 Left \u2192 Right \n\uf0b7 \nInorder: Left \u2192 Root \u2192 Right \n\uf0b7 \nPostorder: Left \u2192 Right \u2192 Root \n\uf0b7 \nLevel Order: BFS using queue \n\u2705 Use in: Tree reconstruction, Path Sum, BST validation, Trees, Recursion, DFS\n \n5. Min Heap / Max Heap in Python \nimport heapq \n \n# Min Heap \nheapq.heappush(heap, val) \nheapq.heappop(heap) \n \n# Max Heap \nheapq.heappush(heap, -val) \nheapq.heappop(heap) * -1 \n\u2705 Use in: Top K elements, Median in stream, Kth smallest/largest, Greedy, Priority Queues\n \n6. ASCII Mapping (Characters \u2192 Numbers) \nord('a')  # 97 \nchr(97)   # 'a' \n \nord('z')  # 122 \n\u2705 Use in: Frequency Arrays (size 26), Anagrams, Palindrome Check , Frequency counting\n \n7. Keyboard Row Mapping \nrow1 = set(\"qwertyuiop\") \nrow2 = set(\"asdfghjkl\") \nrow3 = set(\"zxcvbnm\") \n\u2705 Use in: Words Using Only One Row of Keyboard, String filtering\n \n", "file_name": "DSAnPython.pdf"}, {"page": 3, "text": "8. Roman Numerals Mapping \nroman_map = { \n    'I': 1, 'V': 5, 'X': 10, \n    'L': 50, 'C': 100, 'D': 500, 'M': 1000 \n} \n\u2705 Use in: Roman to Integer, Integer to Roman, String / Math Conversion\n \n9. Weekday Layout (for calendar problems) \nweekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', \n'Friday', 'Saturday'] \n\u2705 Use in: Day calculation, Zeller\u2019s Congruence\n \n10. Digit to Word Mapping \ndigit_to_word = { \n  0: 'zero', 1: 'one', ..., 9: 'nine' \n} \n\u2705 Use in: Verbal arithmetic puzzles , Spoken digit output problems \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 4, "text": "The Top 14 LeetCode Patterns You Need to Know \n1. Sliding Window \n\u2705 Used when working with subarrays, substrings, or fixed-size / variable windows. \n     Helps in reducing time from O(n\u00b2) \u2192 O(n) \nExamples: Maximum Sum Subarray of Size K , Longest Substring Without Repeating Characters, \nMinimum Window Substring\n \n2. Two Pointers \n\u2705 Used for problems involving sorted arrays, linked lists, etc. \n     Moves two pointers from front/back/middle \nExamples: Two Sum II (sorted array), 3Sum, Container With Most Water\n \n3. Fast and Slow Pointers \n\u2705 Detect cycles, mid-points \nExamples: Linked List Cycle, Find the Duplicate Number , Middle of Linked List\n \n4. Hashing (HashMap / Set) \n\u2705 Count frequencies, track seen elements, prefix sums \nExamples: Subarray Sum Equals K , Group Anagrams , Longest Consecutive Sequence\n \n5. Prefix Sum \n\u2705 For cumulative/interval sums, range queries \nExamples: Subarray Sum Equals K , Range Sum Query , Count Subarrays with Sum\n \n6. Backtracking \n\u2705 Try all combinations, revert decisions \nExamples: Subsets , Permutations , Letter Combinations of a Phone Number, N-Queens \n", "file_name": "DSAnPython.pdf"}, {"page": 5, "text": " \n7. Recursion / DFS \n\u2705 Tree/graph traversal, subset problems \nExamples: Binary Tree Traversals , Generate Parentheses , Subsets\n \n8. Breadth-First Search (BFS) \n\u2705 Used in graphs, trees, shortest paths \nExamples: Binary Tree Level Order Traversal, Word Ladder, Number of Islands\n \n9. Depth-First Search (DFS) \n\u2705 Graph traversal, backtracking, component counting \nExamples: Number of Islands , Clone Graph , Word Search\n \n10. Greedy \n\u2705 Make best local choice at each step \nExamples: Jump Game , Merge Intervals , Gas Station , Partition Labels\n \n11. Dynamic Programming (DP) \n\u2705 Break down problem into subproblems, store results \nExamples: House Robber , Longest Increasing Subsequence , 0/1 Knapsack, Coin Change\n \n12. Bit Manipulation \n\u2705 Work with bits for optimization or tricky logic \nExamples: Single Number , Counting Bits , Subsets (with bitmasking) \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 6, "text": "13. Union Find (Disjoint Set) \n\u2705 Track connected components \nExamples: Graph Valid Tree , Number of Connected Components, Redundant Connection\n \n14. Heap / Priority Queue \n\u2705 Get max/min quickly, sliding window max, k-largest \nExamples: Kth Largest Element, Merge K Sorted Lists, Top K Frequent Elements \n \n \n \nExtra Patterns (Advanced \u2013 optional): \nIf you have time later, explore these bonus topics: \n1. Monotonic Stack / Deque \n2. Segment Trees / Binary Indexed Trees \n3. Dijkstra\u2019s / A* for weighted graphs \n4. Tries (prefix trees) \n5. Rabin-Karp (String Hashing) \nThese are not Amazon must-knows, but helpful for: \n\uf0b7 \nGoogle \n\uf0b7 \nDeep graph / string / optimization problems \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 7, "text": "1. Built-in Functions (Essentials) \n \nFunction \nPurpose \nExample \nmax() \nGet the maximum of values max(3, 7) \u2192 7 \nmin() \nGet the minimum \nmin(3, 7) \u2192 3 \nsum() \nSum of list values \nsum([1, 2, 3]) \u2192 6 \nlen() \nLength of list, string, etc. \nlen(arr) \nrange() \nGenerate a sequence \nrange(5) \u2192 0, 1, 2, 3, 4 \nenumerate() Loop with index \nfor i, val in enumerate(arr) \nreversed() \nReverse iterator \nfor val in reversed(arr) \nsorted() \nReturns sorted version of list sorted(arr) \nlist() \nConvert to list \nlist(\"abc\") \u2192 ['a','b','c'] \n \n2. Strings \u2013 Helpful Methods \n \nFunction \nPurpose \nExample \nstr.split() \nSplit string into list \n\"a b c\".split() \u2192 ['a','b','c'] \nstr.strip() \nRemove whitespace \n\" abc \".strip() \u2192 \"abc\" \nstr.isdigit() \nCheck if string is a digit \"123\".isdigit() \u2192 True \nstr.lower() / upper() Convert case \n\"HeLLo\".lower() \u2192 \"hello\" \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 8, "text": "3. Lists \u2013 Core Methods \nMethod \nPurpose \nExample \nlist.append(x) Add element at the end \narr.append(10) \nlist.pop() \nRemove last element \narr.pop() \nlist.remove(x) Remove element by value arr.remove(2) \nlist.index(x) \nGet index of value \narr.index(5) \nlist.insert(i, x) Insert at index \narr.insert(1, 99) \nlist.count(x) Count occurrences \narr.count(2) \n \n4. Dictionary (Hashmap) \u2013 Extremely Useful \nMethod / Function \nPurpose \nExample \ndict.get(key, default) Get value or return default d.get('a', 0) \ndict.keys() / values() Iterate keys/values \nfor key in d.keys() \ndict.items() \nIterate key, value pairs \nfor k, v in d.items() \nkey in dict \nCheck if key exists \n'a' in d \ndefaultdict(int) \nAuto-handle missing keys from collections import defaultdict \n \n5. Collections Module \nTool \nPurpose \nExample \ndefaultdict(type) Dictionary with default values dd = defaultdict(int) \nCounter() \nCount occurrences of elements Counter(\"aabc\") \u2192 {'a':2, 'b':1,...} \ndeque() \nDouble-ended queue \ndq = deque([1,2,3]) \nheapq \nPriority Queue / Min Heap \nheapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 9, "text": "6. Math / Time / Random \n \nModule \nFunction \nPurpose \nmath \nmath.sqrt(), math.ceil() Square root, rounding \ntime \ntime.time() \nGet current time (for speed) \nrandom random.randint() \nRandom numbers (for mock tests) \n \n7. Useful Tricks \nTrick \nDescription \nExample \narr[::-1] \nReverse a list or string \ns[::-1] \na, b = b, a Swap variables \n \n' '.join(list) Convert list to string with spaces ' '.join(['a','b']) \u2192 \"a b\" \nall() / any() Check all / any condition is True all([1, True]) \n \nBonus: Lambda & Key Functions (for Sorting) \narr.sort(key=lambda x: x[1])  # Sort by second element of sublists \nUseful for: \n\uf0b7 \nSorting arrays of tuples \n\uf0b7 \nSorting by custom logic \n \nGreat question, Bhawana! You're already covering a solid base. But yes \u2014 here\u2019s a final \nroundup of additional useful Python concepts and functions that are often overlooked but \ncritical in real DSA problems (especially in contests and interviews like Amazon). \n \n", "file_name": "DSAnPython.pdf"}, {"page": 10, "text": "8. Advanced Built-ins & Tricks (Most Students Miss These!) \nFeature/Function \nUse Case \nExample \nzip() \nLoop over multiple iterables \nsimultaneously \nfor a, b in zip(arr1, \narr2) \nmap() \nApply function to each item \nmap(int, input().split()) \nfilter() \nFilter elements by condition \nfilter(lambda x: x > 0, \narr) \nset() \nRemoves duplicates, used for \nfast lookup \nset(arr) \nset.add() / set.remove() \nModify set \n \nislice() from itertools \nSlicing iterators \nislice(range(100), 10, 20) \nbisect.bisect_left() / \nbisect_right() \nBinary search in sorted list \nbisect.bisect_left(arr, x) \nany() \nTrue if any element is truthy \nany([False, True, False]) \n\u2192 True \nall() \nTrue if all elements are truthy \nall([1, 2, 3]) \u2192 True \nre module \nRegex for pattern matching \n(sometimes needed in parsing) re.findall(r'\\d+', s) \n \n9. Built-in Data Types You Must Master \nType \nWhen to Use \nQuick Syntax Example \nlist Ordered, indexable \na = [1, 2, 3] \ntuple Immutable, hashable keys a = (1, 2) \nset \nUnique values, fast lookup a = {1, 2, 3} \ndict Key-value mapping \nd = {'a': 1} \ndeque Queue/Stack with fast ops deque([1,2,3]) from collections \nheap Min/Max heap for priority heapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 11, "text": "10. Collections Deep Dive (Very Interview-Friendly) \nTool \nUse Case \nExample \ndefaultdict(list/int) Auto-initialize missing keys dd = defaultdict(list) \nCounter() \nCount occurrences of each \nelement \nCounter([1,2,2,3]) \u2192 {2:2, 1:1, \n3:1} \nOrderedDict() \nKeeps insertion order \n(Rarely used now, since dicts are ordered from \nPython 3.7+) \ndeque() \nQueue or two-sided \noperations \ndq.popleft(), dq.appendleft() \n \n11. heapq (Min/Max Heap) \nimport heapq \nmin_heap = [] \nheapq.heappush(min_heap, 5) \nheapq.heappush(min_heap, 3) \nheapq.heappop(min_heap)  # returns 3 (smallest) \nUse in: \n\u2705 Top-K problems, \n\u2705 Priority queues, \n\u2705 Greedy algorithms \n \n12. Functools (for memoization and recursion) \nfrom functools import lru_cache \n \n@lru_cache(None) \ndef fib(n): \n    if n <= 1: \n        return n \n    return fib(n-1) + fib(n-2) \nUse in: \n\u2705 Dynamic Programming, \n\u2705 Top-down memoization, \n\u2705 Recursion-heavy problems \n", "file_name": "DSAnPython.pdf"}, {"page": 12, "text": " \n13. Bit Manipulation Functions \nBit Trick \nPurpose \nx << 1, x >> 1 \nBit shifts (multiply/divide by 2) \nx & 1 \nCheck if x is odd \nx ^ y \nBitwise XOR \nbin(x).count('1') Count set bits in x \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 13, "text": "Python Notes for Beginners to Intermediate \n 1. Introduction to Python \n\uf0b7 \nHigh-level, interpreted, and dynamically typed programming language. \n\uf0b7 \nCreated by Guido van Rossum, released in 1991. \n\uf0b7 \nGreat for web dev, data science, automation, AI, scripting, etc. \n \n2. Basic Syntax \n# This is a comment \nprint(\"Hello, World!\")  # Output: Hello, World! \n\uf0b7 \nIndentation is mandatory in Python to define blocks. \n\uf0b7 \nNo {} or ; like in C/C++/Java. \n \n3. Data Types \n\uf0b7 \nint, float, str, bool \n\uf0b7 \nlist, tuple, set, dict \n\uf0b7 \nNoneType \na = 5               # int \nb = 5.0             # float \nc = \"Python\"        # str \nd = True            # bool \n \n4. Type Conversion \nint(\"5\")        # 5 \nfloat(\"3.14\")   # 3.14 \nstr(100)        # \"100\" \nbool(0)         # False \n \n5. Variables \n\uf0b7 \nNo need to declare the type. \n\uf0b7 \nFollows snake_case naming. \nname = \"Bhawana\" \nage = 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 14, "text": " \n6. Control Flow \nif / elif / else \nif age > 18: \n    print(\"Adult\") \nelif age == 18: \n    print(\"Just turned adult\") \nelse: \n    print(\"Minor\") \nwhile loop \ni = 0 \nwhile i < 5: \n    print(i) \n    i += 1 \nfor loop \nfor i in range(5): \n    print(i) \n \n 7. Functions \ndef greet(name): \n    return f\"Hello, {name}\" \n \nprint(greet(\"Bhawana\")) \n \n8. Strings \ntext = \"Python\" \nprint(text.upper())       # 'PYTHON' \nprint(text[0])            # 'P' \nprint(len(text))          # 6 \nprint(\"th\" in text)       # True \n \n9. Lists \nfruits = [\"apple\", \"banana\", \"mango\"] \nfruits.append(\"orange\") \nprint(fruits[1])          # \"banana\" \n \n", "file_name": "DSAnPython.pdf"}, {"page": 15, "text": "10. Tuples \nt = (1, 2, 3) \n# Immutable \nprint(t[0])               # 1 \n \n11. Dictionaries \nstudent = {\"name\": \"Alice\", \"age\": 20} \nprint(student[\"name\"])    # Alice \nstudent[\"age\"] = 21 \n \n12. Sets \nnums = {1, 2, 3, 2} \nprint(nums)               # {1, 2, 3} - duplicates removed \n \n13. Exception Handling \ntry: \n    x = 1 / 0 \nexcept ZeroDivisionError: \n    print(\"Can't divide by zero!\") \nfinally: \n    print(\"Done\") \n \n14. Modules and Libraries \nimport math \nprint(math.sqrt(16))      # 4.0 \nInstall external modules: \npip install requests \n \n15. List Comprehension \nsquares = [x**2 for x in range(5)]   # [0, 1, 4, 9, 16] \n \n16. Lambda Functions \nsquare = lambda x: x ** 2 \nprint(square(5))          # 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 16, "text": " \n 17. Object-Oriented Programming (OOP) \nclass Person: \n    def __init__(self, name): \n        self.name = name \n \n    def say_hi(self): \n        print(f\"Hi, I'm {self.name}\") \n \np = Person(\"Bhawana\") \np.say_hi() \n \n18. File Handling \nwith open(\"file.txt\", \"r\") as file: \n    content = file.read() \n    print(content) \n \n19. Useful Built-in Functions \n\uf0b7 \nlen(), type(), range(), sorted(), input(), sum(), max(), min() \n \n20. Best Practices \n\uf0b7 \nUse meaningful variable names. \n\uf0b7 \nKeep code DRY (Don't Repeat Yourself). \n\uf0b7 \nUse virtual environments. \n\uf0b7 \nFollow PEP8 (Python Style Guide). \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 17, "text": " \n", "file_name": "DSAnPython.pdf"}, {"page": 1, "text": " \n \nGeneral SQL Topics \n1. INTRODUCTION TO SQL \n\uf0b7 \nSQL: Structured Query Language, used to interact with relational databases. \n\uf0b7 \nRelational Database: Stores data in tables (rows & columns). \n\uf0b7 \nCommon RDBMS: MySQL, PostgreSQL, SQLite, Oracle, SQL Server. \n \n2. SQL DATA TYPES \n\uf0b7 \nINT: Integer numbers \n\uf0b7 \nVARCHAR(n): Variable-length string with a maximum of n characters \n\uf0b7 \nCHAR(n): Fixed-length string \n\uf0b7 \nDATE / DATETIME: Date or timestamp \n\uf0b7 \nDECIMAL(p, s): Exact numeric value with precision and scale \n\uf0b7 \nBOOLEAN: True or False \n\uf0b7 \nTEXT: Long-form string data \n \n3. BASIC SQL COMMANDS \n\u27a4 Create Table \nCREATE TABLE Employees ( \n  id INT PRIMARY KEY, \n  name VARCHAR(100), \n  salary INT, \n  department VARCHAR(50) \n); \n\u27a4 Insert \nINSERT INTO Employees (id, name, salary, department) \nVALUES (1, 'Alice', 60000, 'HR'); \n\u27a4 Select \nSELECT * FROM Employees; \nSELECT name, salary FROM Employees; \nSELECT * FROM Employees WHERE salary > 50000; \n\u27a4 Update \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 2, "text": "UPDATE Employees SET salary = 70000 WHERE id = 1; \n\u27a4 Delete \nDELETE FROM Employees WHERE id = 1; \n \n4. FILTERING DATA \n\u27a4 WHERE, AND, OR, NOT \nSELECT * FROM Employees \nWHERE department = 'HR' AND salary > 50000; \n\u27a4 IN, BETWEEN, LIKE \nSELECT * FROM Employees WHERE department IN ('HR', 'Sales'); \nSELECT * FROM Employees WHERE salary BETWEEN 40000 AND 70000; \nSELECT * FROM Employees WHERE name LIKE 'A%'; -- starts with A \n \n5. SORTING & LIMITING \nSELECT * FROM Employees ORDER BY salary DESC; \nSELECT * FROM Employees LIMIT 5; \n \n6. AGGREGATE FUNCTIONS \nSELECT COUNT(*) FROM Employees; \nSELECT AVG(salary) FROM Employees; \nSELECT SUM(salary), MAX(salary), MIN(salary) FROM Employees; \n \n7. GROUPING & FILTERING AGGREGATES \nSELECT department, AVG(salary) AS avg_salary \nFROM Employees \nGROUP BY department \nHAVING AVG(salary) > 50000; \n \n8. JOINS \n\u27a4 Syntax: \nSELECT e.name, d.name \nFROM Employees e \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 3, "text": "JOIN Departments d ON e.department_id = d.id; \n8.1. INNER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nINNER JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 Only matching department IDs shown. \n8.2. LEFT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All employees shown, even if no department. \n8.3. RIGHT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All departments shown, even if no employee. \n8.4. FULL OUTER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id \nUNION \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n \n9. SUBQUERIES \nUsed to embed one query inside another. \nSELECT name FROM Employees \nWHERE salary > ( \n  SELECT AVG(salary) FROM Employees \n); \n \n10. CONSTRAINTS \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 4, "text": "\uf0b7 \nPRIMARY KEY: Uniquely identifies each record \n\uf0b7 \nFOREIGN KEY: Links to primary key of another table \n\uf0b7 \nUNIQUE: Ensures all values in a column are different \n\uf0b7 \nNOT NULL: Disallows NULL values \n\uf0b7 \nCHECK: Ensures a condition is met \n \n11. NORMALIZATION  \n\uf0b7 \nProcess of organizing data to reduce redundancy and improve data integrity. \n\uf0b7 \n1NF: Atomic values \n\uf0b7 \n2NF: No partial dependencies \n\uf0b7 \n3NF: No transitive dependencies \n\uf0b7 \nEnsures data integrity and minimizes duplication. \n\ud83c\udfaf Why Normalize? \n\uf0b7 \nEliminate duplicate data \n\uf0b7 \nEnsure data consistency \n\uf0b7 \nImprove data structure for querying and updates \n \n\ud83d\udcda Normal Forms (NF) \n\u2705 1NF \u2013 First Normal Form \nRule: All values must be atomic (indivisible). \nFix: Remove repeating groups and store one value per cell. \nExample (Bad): \nID Name Phones \n1 Alice 1234, 5678 \nFix (1NF): \nID Name Phone \n1 Alice 1234 \n1 Alice 5678 \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 5, "text": "\u2705 2NF \u2013 Second Normal Form \nRule: Be in 1NF + No Partial Dependency on a composite key. \nFix: Move partially dependent data to a new table. \nExample: \nComposite key: (StudentID, CourseID) \nStudentID CourseID StudentName \nFix (2NF): \n\uf0b7 \nTable 1: StudentCourses(StudentID, CourseID) \n\uf0b7 \nTable 2: Students(StudentID, StudentName) \n \n\u2705 3NF \u2013 Third Normal Form \nRule: Be in 2NF + No transitive dependency. \nFix: Remove data that's indirectly dependent on the primary key. \nExample (Bad): \nEmpID Name DeptID DeptName \nFix (3NF): \n\uf0b7 \nTable 1: Employees(EmpID, Name, DeptID) \n\uf0b7 \nTable 2: Departments(DeptID, DeptName) \n \n\ud83e\udde0 When Not to Normalize? \n\uf0b7 \nFor read-heavy applications (analytics, reporting) \n\uf0b7 \nWhen query performance is more important than data integrity \n \n\u2705 Real-Life Analogy \n\uf0b7 \n1NF: Each house (record) has its own mailbox (cell), not a shared one \n\uf0b7 \n2NF: One key opens only one mailbox (no shared access) \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 6, "text": "\uf0b7 \n3NF: The key opens the right mailbox and not someone else\u2019s cabinet (no indirect \ndependencies) \n \n \n12. INDEXING \nIndexing is a powerful technique to speed up SELECT queries on large tables. \n\uf0b7 \nSpeeds up WHERE, JOIN, GROUP BY, and ORDER BY queries \n\uf0b7 \nBoosts search performance on large datasets. \n\uf0b7 \nAvoid on frequently updated or low-cardinality columns \n\uf0b7 \nUse EXPLAIN to test effectiveness \n\uf0b7 \nAvoid over-indexing (inserts & updates become slower). \n\u2705 Types \n\uf0b7 \nSingle-column Index \n \nCREATE INDEX idx_salary ON Employees(salary); \n\uf0b7 \nComposite Index \n \nCREATE INDEX idx_name_dept ON Employees(name, department);\n \n13. VIEWS \n\uf0b7 \nA view is a virtual table based on a query \n\uf0b7 \nThey do not store data. Use Materialized Views (if supported) for cached result. \n\uf0b7 \nSimplify complex queries. \n\uf0b7 \nEnhance security (restrict column access) \n\uf0b7 \nEnable reusable logic \n\u2705 Example \nCREATE VIEW HR_Employees AS \nSELECT name, salary \nFROM Employees \nWHERE department = 'HR'; \n \n \n14. TRANSACTIONS & ACID \nA Transaction is a logical unit of work consisting of one or more SQL statements. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 7, "text": "Use ROLLBACK; to undo changes before COMMIT;. \n\uf0b7 \nACID: \no \nAtomicity: All or none \no \nConsistency: Valid data state \no \nIsolation: No interference \no \nDurability: Permanent changes \n\u2705 Example \nBEGIN; \nUPDATE Accounts SET balance = balance - 100 WHERE id = 1; \nUPDATE Accounts SET balance = balance + 100 WHERE id = 2; \nCOMMIT; \n \n15. WINDOW FUNCTIONS \nWindow functions perform calculations across rows related to the current row \u2014 without collapsing \nthem like GROUP BY.  \nUsed for row-level calculations without grouping. \nUse cases : Leaderboards, Change Tracking, Tired analysis \nRANK(), DENSE_RANK(), ROW_NUMBER() \n\u2705 Example \nSELECT name, salary, \n  RANK() OVER (ORDER BY salary DESC) AS salary_rank \nFROM Employees; \n\ud83d\udd11 Popular Window Functions \n\uf0b7 \nROW_NUMBER(), RANK(), DENSE_RANK() \n\uf0b7 \nLAG(), LEAD() \n\uf0b7 \nNTILE(n) (for percentiles) \n \n16. COMMON TABLE EXPRESSIONS (CTEs) \nCTEs are temporary result sets used within queries \u2014 easier to read & maintain. \n\u2705 Syntax \nWITH HighEarners AS ( \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 8, "text": "  SELECT * FROM Employees WHERE salary > 50000 \n) \nSELECT name FROM HighEarners; \n\ud83e\udde0 Benefits \n\uf0b7 \nBreak complex queries into readable blocks \n\uf0b7 \nUse recursive CTEs for hierarchical data \n \n17. UNION vs UNION ALL \nSELECT name FROM Managers \nUNION \nSELECT name FROM Employees; -- Removes duplicates \n \nSELECT name FROM Managers \nUNION ALL \nSELECT name FROM Employees; -- Keeps duplicates \n \n18. SET OPERATIONS \nSELECT name FROM A \nINTERSECT \nSELECT name FROM B; \n \nSELECT name FROM A \nEXCEPT \nSELECT name FROM B; \n\uf0b7 \n\u26a0 Not supported in MySQL; supported in PostgreSQL/SQL Server. \n \n19. NULL Handling \nSELECT name, COALESCE(nickname, 'No Nick') FROM Users; \nSELECT NULLIF(salary, 0);  -- Returns NULL if salary = 0 \n\uf0b7 \nUse IS NULL / IS NOT NULL \n\uf0b7 \nCOALESCE(), IFNULL(), NULLIF() \n \n20. CASE Statements \nSELECT name, \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 9, "text": "CASE \n  WHEN salary > 70000 THEN 'High' \n  WHEN salary > 40000 THEN 'Medium' \n  ELSE 'Low' \nEND AS salary_level \nFROM Employees; \n \n21. Stored Procedures & Functions (Advanced) \nStored Procedures are saved SQL blocks that perform actions. \nFunctions return a single value. Use procedures for reusable logic. Use functions in SELECT, WHERE, or \nJOIN clauses \n\u2705 Procedure Example \nCREATE PROCEDURE GetHighEarners() \nBEGIN \n  SELECT * FROM Employees WHERE salary > 70000; \nEND; \n\u2705 Function Example \nCREATE FUNCTION TaxAmount(salary DECIMAL) \nRETURNS DECIMAL \nBEGIN \n  RETURN salary * 0.10; \nEND; \n \n \n22. Temporary Tables \nCREATE TEMPORARY TABLE Temp_Employees AS \nSELECT * FROM Employees WHERE department = 'HR'; \n \n23. Triggers (Advanced - Rare) \nCREATE TRIGGER before_insert_trigger \nBEFORE INSERT ON Employees \nFOR EACH ROW \nSET NEW.salary = IF(NEW.salary < 0, 0, NEW.salary); \n\uf0b7 \nUsed for validation, logging, auto-calculation. \n \n24. Data Definition vs Data Manipulation vs Data Control \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 10, "text": "\uf0b7 \nDDL (Definition): CREATE, ALTER, DROP \n\uf0b7 \nDML (Manipulation): SELECT, INSERT, UPDATE, DELETE \n\uf0b7 \nDCL (Control): GRANT, REVOKE \n\uf0b7 \nTCL (Transaction): COMMIT, ROLLBACK \n \nINTERVIEW QUERY PATTERNS \n\u27a4 Nth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET 1; -- 2nd highest \n\u27a4 Duplicate Rows \nSELECT name, COUNT(*) \nFROM Employees \nGROUP BY name \nHAVING COUNT(*) > 1; \n\u27a4 Same Salary Employees \nSELECT * FROM Employees \nWHERE salary IN ( \n  SELECT salary FROM Employees \n  GROUP BY salary \n  HAVING COUNT(*) > 1 \n); \n\u27a4 Employees with Max Salary Per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, \n         RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\u27a4 Self Join Example \nSELECT A.name AS Employee, B.name AS Manager \nFROM Employees A \nJOIN Employees B ON A.manager_id = B.id; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 11, "text": "\u27a4 EXISTS vs IN vs JOIN \n-- EXISTS \nSELECT name FROM Employees e \nWHERE EXISTS ( \n  SELECT 1 FROM Departments d WHERE d.id = e.department_id \n); \n-- IN \nSELECT name FROM Employees \nWHERE department_id IN (SELECT id FROM Departments); \n-- JOIN \nSELECT e.name, d.name FROM Employees e \nJOIN Departments d ON e.department_id = d.id; \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 12, "text": "Advanced SQL Topics \n \n1. Recursive CTEs (Made Simple) \nA Recursive CTE lets a query call itself, useful when working with hierarchies like employees \n& managers or categories & subcategories. \nEasy Analogy: \nThink of it like a loop in SQL. Start with one person (manager), then find their subordinates, then \nsubordinates of subordinates, and so on. \nSyntax: \nWITH RECURSIVE cte_name AS ( \n  SELECT ...  -- Starting point (anchor) \n  UNION ALL \n  SELECT ... FROM cte_name ... -- Repeat until done \n) \nSELECT * FROM cte_name; \nExample: \nWITH RECURSIVE Subordinates AS ( \n  SELECT id, name, manager_id FROM Employees WHERE id = 1 -- Top manager \n  UNION ALL \n  SELECT e.id, e.name, e.manager_id \n  FROM Employees e \n  JOIN Subordinates s ON e.manager_id = s.id \n) \nSELECT * FROM Subordinates; \n\u2705 This will return all employees working under manager ID 1, even indirectly. \n \n2. Window Functions \nThese functions look at other rows in the result without grouping them. Useful when you \nwant to compare each row with others. \nEveryday Use Case: \n\"Show each employee's salary along with the previous and next employee's salary.\" \nKey Functions: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 13, "text": "\uf0b7 \nLAG(column) \u2013 Looks before current row \n\uf0b7 \nLEAD(column) \u2013 Looks after current row \n\uf0b7 \nNTILE(n) \u2013 Divides into n equal groups (for percentiles/quartiles) \n\uf0b7 \nRANK(), DENSE_RANK(), ROW_NUMBER() \u2013 Ranking logic \nExample: \nSELECT name, salary, \n       LAG(salary) OVER (ORDER BY salary) AS prev_salary, \n       LEAD(salary) OVER (ORDER BY salary) AS next_salary \nFROM Employees; \n \n3. Working with JSON in SQL \nModern databases allow storing and querying JSON data inside SQL columns (especially \nuseful in dynamic or semi-structured data). \nPostgreSQL: \nSELECT data->>'name' AS name FROM orders WHERE data->>'status' = 'shipped'; \nMySQL: \nSELECT JSON_EXTRACT(data, '$.name') AS name FROM orders; \n\ud83d\udd0d Here, data is a column containing JSON like: { \"name\": \"Laptop\", \"status\": \"shipped\" } \n \n4. Performance Optimization Techniques \nOptimizing your SQL queries can make your app faster, especially for large data. \na. Indexing \n\uf0b7 \nLike a book index: helps locate rows faster \n\uf0b7 \nUseful for WHERE, JOIN, and ORDER BY \nCREATE INDEX idx_salary ON Employees(salary); \nb. Query Refactoring \n\uf0b7 \nAvoid SELECT * \u2192 only select needed columns \n\uf0b7 \nUse EXISTS instead of IN when subquery is large \n\uf0b7 \nApply filters early (use WHERE before GROUP BY) \nc. Execution Plan \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 14, "text": "Use EXPLAIN to understand how the database runs your query: \nEXPLAIN SELECT * FROM Employees WHERE department_id = 3; \n \n5. Stored Procedures & Functions (Simplified) \nStored Procedures = SQL scripts stored in the database that can be reused. Like a saved \nfunction. \nExample with Loop: \nDELIMITER // \nCREATE PROCEDURE GiveBonus() \nBEGIN \n  DECLARE done INT DEFAULT FALSE; \n  DECLARE emp_id INT; \n  DECLARE emp_cursor CURSOR FOR SELECT id FROM Employees; \n  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE; \n \n  OPEN emp_cursor; \n  read_loop: LOOP \n    FETCH emp_cursor INTO emp_id; \n    IF done THEN \n      LEAVE read_loop; \n    END IF; \n    UPDATE Employees SET salary = salary + 5000 WHERE id = emp_id; \n  END LOOP; \n  CLOSE emp_cursor; \nEND // \nDELIMITER ; \n\u2705 This procedure gives a \u20b95000 bonus to all employees. \n \n6. Importing/Exporting Data \nMoving data between CSV files and SQL is common in real projects. \nMySQL: \nLOAD DATA INFILE '/path/file.csv' \nINTO TABLE Employees \nFIELDS TERMINATED BY ',' \nLINES TERMINATED BY '\\n' \nIGNORE 1 ROWS; \nPostgreSQL: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 15, "text": "COPY Employees(name, salary) \nFROM '/path/file.csv' \nDELIMITER ',' \nCSV HEADER; \n \n7. Role-Based Access Control (Security Basics) \nSQL lets you give different permissions to different users. \nExample: \nGRANT SELECT, INSERT ON Employees TO 'analyst'; \nREVOKE DELETE ON Employees FROM 'analyst'; \n\u2705 'analyst' can view and add data, but can't delete anything. \n \n8. Star vs Snowflake Schema  \nUsed in Data Warehouses & Reporting Tools. \nStar Schema: \n\uf0b7 \nOne central fact table (e.g., Sales) \n\uf0b7 \nLinked to dimension tables (Customer, Product) \n\uf0b7 \nEasy to query, faster for reporting \nSnowflake Schema: \n\uf0b7 \nDimensions are normalized \n\uf0b7 \nLess redundancy but more joins \n \n9. OLTP vs OLAP (Database Types Simplified) \nFeature \nOLTP \nOLAP \n              Purpose \nDaily transactions \nData analysis \n              Design \nHighly normalized \ntables \nDenormalized \nschema \n             Examples \nBanking, eCommerce Reporting,Data \nWarehouse \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "\ud83c\udfaf INTERVIEW & PLACEMENT \n \n\ud83d\udd39 Basic Level (Entry / Fresher) \n1. What is SQL? \nStructured Query Language used to interact with relational databases. \n2. What is the difference between WHERE and HAVING? \nWHERE filters rows before aggregation, HAVING filters after aggregation. \n3. What is a Primary Key? \nA unique identifier for each row in a table. Cannot contain NULL values. \n4. Difference between INNER JOIN and LEFT JOIN? \nINNER JOIN: Returns matched rows only. \nLEFT JOIN: Returns all rows from the left table, even if no match. \n5. How do you handle NULLs in SQL? \nUse IS NULL, IS NOT NULL, COALESCE(), IFNULL(), NULLIF(). \n6. What is a Foreign Key? \nIt links two tables by referring to the primary key of another table. \n7. What is normalization? \nProcess of organizing data to reduce redundancy and improve integrity. \n8. What is denormalization? \nCombining tables to improve read performance by reducing joins. \n9. What does the DISTINCT keyword do? \nRemoves duplicate rows from the result set. \n10. What is the use of LIMIT or TOP? \nUsed to limit the number of rows returned by a query. \n\ud83d\udd39 Intermediate Level \n11. What are aggregate functions? \nFunctions like SUM(), AVG(), COUNT(), MAX(), MIN(). \n12. What is a subquery? \nA query nested inside another query. \n13. What is the difference between UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey impro", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "een UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey improve the speed of data retrieval. \n16. What is a view? \nA virtual table based on the result-set of a query. \n17. What are window functions? \nFunctions like RANK(), ROW_NUMBER() that work across rows. \n18. Difference between RANK() and DENSE_RANK()? \nRANK() skips ranks on ties, DENSE_RANK() does not. \n19. What is a CTE (Common Table Expression)? \nA temporary result set defined within the execution scope of a query. \n20. Explain ACID properties. \nAtomicity, Consistency, Isolation, Durability - ensures reliable transactions. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": "21. What is a composite key? \nA primary key made of multiple columns. \n22. Difference between DELETE and TRUNCATE? \nDELETE can be conditional and logs row-by-row deletion; TRUNCATE removes all rows \nfaster without logging each deletion. \n23. What is a surrogate key? \nA unique identifier for an entity that is not derived from application data. \n24. What is referential integrity? \nEnsures foreign key values match primary key values in the referenced table. \n25. How does EXISTS differ from IN? \nEXISTS stops on first match; IN evaluates all results. \n26. How do you use GROUP BY with multiple columns? \nYou can group by multiple columns by separating them with commas. \n27. Can we use ORDER BY with GROUP BY? \nYes. GROUP BY groups the data; ORDER BY sorts the grouped results. \n28. What is a scalar subquery? \nA subquery that returns exactly one value. \n29. What are correlated subqueries? \nSubqueries that refer to columns from the outer query. \n30. What is the use of ISNULL() or IFNULL()? \nTo replace NULL values with custom values. \n\ud83d\udd39 Advanced Level \n31. What are triggers in SQL? \nProcedures that automatically execute on certain events. \n32. What are stored procedures? \nReusable blocks of SQL statements stored in the database. \n33. What is the use of EXPLAIN or EXPLAIN PLAN? \nTo understand how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *,", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": " how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *, and use EXPLAIN to analyze. \n36. Difference between clustered and non-clustered index? \nClustered index determines row order in the table; non-clustered does not. \n37. Difference between OLTP and OLAP systems? \nOLTP: Online Transaction Processing (day-to-day operations). \nOLAP: Online Analytical Processing (data analysis and reporting). \n38. What are materialized views? \nStored query results that can be refreshed periodically. \n39. How do you implement pagination in SQL? \nUsing LIMIT and OFFSET or ROW_NUMBER() for custom logic. \n40. How do you handle duplicate rows? \nUsing ROW_NUMBER() or DISTINCT or CTEs with filtering. \n41. What are the different types of joins? \nINNER, LEFT, RIGHT, FULL OUTER, CROSS JOIN, SELF JOIN. \n42. What is a CROSS JOIN? \nReturns Cartesian product of two tables. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 18, "text": "43. Can you sort by an alias in SQL? \nYes, you can use the alias name in the ORDER BY clause. \n44. What is the difference between SQL and NoSQL? \nSQL is relational and uses tables. NoSQL is non-relational and uses documents, key-\nvalue pairs, etc. \n45. What are the common data types in SQL? \nINT, VARCHAR, DATE, BOOLEAN, DECIMAL, TEXT. \n46. Can a table have multiple foreign keys? \nYes, a table can reference multiple other tables using foreign keys. \n47. What happens if you violate a foreign key constraint? \nThe query fails with an integrity constraint violation. \n48. How can you change a column datatype in SQL? \nUsing ALTER TABLE table_name MODIFY column_name new_datatype; \n49. What are NULL-safe operators? \nOperators like <=> in MySQL allow safe comparison with NULL. \n50. How would you detect and remove duplicate records? \nUsing CTE and ROW_NUMBER() to filter duplicates. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 19, "text": "Real Company SQL Questions \nGoogle \n\uf0b7 \nSecond Highest Salary \nSELECT MAX(salary) AS SecondHighest \nFROM Employees \nWHERE salary < (SELECT MAX(salary) FROM Employees); \n\uf0b7 \nRemove Duplicate Emails Using ROW_NUMBER() \nWITH RankedEmails AS ( \n  SELECT *, ROW_NUMBER() OVER (PARTITION BY email ORDER BY id) \nAS rn \n  FROM Users \n) \nDELETE FROM RankedEmails WHERE rn > 1; \n\uf0b7 \nEmployees Earning More Than Average Salary \nSELECT name, salary \nFROM Employees \nWHERE salary > (SELECT AVG(salary) FROM Employees); \nAmazon \n\uf0b7 \nCustomers Who Ordered in Every Month \nSELECT customer_id \nFROM Orders \nGROUP BY customer_id \nHAVING COUNT(DISTINCT MONTH(order_date)) = 12; \n\uf0b7 \nTop 3 Earners in Each Department \nSELECT * \nFROM ( \n  SELECT *, DENSE_RANK() OVER (PARTITION BY department_id \nORDER BY salary DESC) AS rank \n  FROM Employees \n) ranked \nWHERE rank <= 3; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 20, "text": "\uf0b7 \nFind Returning Users Using LAG \nSELECT user_id, order_date, \n       LAG(order_date) OVER (PARTITION BY user_id ORDER BY \norder_date) AS previous_order \nFROM Orders; \nTCS \n\uf0b7 \nEmployees Joined in Last 6 Months \nSELECT * FROM Employees \nWHERE join_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH); \n\uf0b7 \nManager-Reportee Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n\uf0b7 \nDepartment with Highest Average Salary \nSELECT department_id \nFROM Employees \nGROUP BY department_id \nORDER BY AVG(salary) DESC \nLIMIT 1; \nFlipkart \n\uf0b7 \nTop 5 Selling Products by Revenue \nSELECT product_id, SUM(price * quantity) AS revenue \nFROM Orders \nGROUP BY product_id \nORDER BY revenue DESC \nLIMIT 5; \n\uf0b7 \nUsers with More Than 3 Failed Transactions \nSELECT user_id \nFROM Transactions \nWHERE status = 'FAILED' \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 21, "text": "GROUP BY user_id \nHAVING COUNT(*) > 3; \n\uf0b7 \nOrders Not Yet Shipped \nSELECT * \nFROM Orders \nWHERE status = 'PLACED' AND shipped_date IS NULL; \nSQL Problem-Solving Round \n \n\uf0b7 \nNth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET N-1; \n\uf0b7 \nDuplicate Emails \nSELECT email, COUNT(*) \nFROM Users \nGROUP BY email \nHAVING COUNT(*) > 1; \n\uf0b7 \nTop Earner per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, RANK() OVER (PARTITION BY department_id ORDER BY \nsalary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\uf0b7 \nCustomers Who Never Ordered \nSELECT c.customer_id, c.name \nFROM Customers c \nLEFT JOIN Orders o ON c.customer_id = o.customer_id \nWHERE o.order_id IS NULL; \n\uf0b7 \nEmployees Hired in the Last Month \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 22, "text": "SELECT * FROM Employees \nWHERE hire_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 \nMONTH) AND CURDATE(); \n\uf0b7 \nUser Order Summary \nSELECT user_id, COUNT(*) AS order_count, SUM(total_amount) AS \ntotal_spent \nFROM Orders \nGROUP BY user_id; \n\uf0b7 \n7-Day Rolling Login Count \nSELECT user_id, login_date, \n       COUNT(*) OVER ( \n         PARTITION BY user_id ORDER BY login_date \n         ROWS BETWEEN 6 PRECEDING AND CURRENT ROW \n       ) AS seven_day_logins \nFROM Logins; \n\uf0b7 \nFunnel Drop-off Analysis \nSELECT stage, COUNT(DISTINCT user_id) AS user_count \nFROM Funnel \nGROUP BY stage \nORDER BY stage; \n\uf0b7 \nAverage Time Between Orders \nSELECT user_id, AVG(DATEDIFF(order_date, LAG(order_date) OVER \n(PARTITION BY user_id ORDER BY order_date))) AS \navg_days_between_orders \nFROM Orders; \n\uf0b7 \nSelf Join for Employee Manager Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 1, "text": "\ud83e\udd42 Premium Caf\u00e9s & Restaurants (High-Class, Elegant \nCrowd) \n\uf0b7 \nThe Sassy Spoon \u2013 Koregaon Park \n\uf0b7 \nDario\u2019s \u2013 Italian caf\u00e9 with expat and creator crowd \n\uf0b7 \nLe Plaisir \u2013 French fine dining (Deccan) \n\uf0b7 \n1000 Oaks \u2013 Classic caf\u00e9, premium old-money vibe \n\uf0b7 \nPrem\u2019s \u2013 Garden caf\u00e9, Koregaon Park \n\uf0b7 \nLe Flamington \u2013 Baner, luxe desserts \n\uf0b7 \nSante Spa Cuisine \u2013 Koregaon Park (organic + fine dining) \n\uf0b7 \nBaan Tao \u2013 Hyatt (Pan-Asian cuisine, corporate crowd) \n\uf0b7 \nThe Poona Canteen \u2013 Clean, minimalist, modern \n\uf0b7 \nTales & Spirits \u2013 Stylish and crowd-safe \n\uf0b7 \nThe Daily All Day \u2013 Koregaon Park, lounge vibe \n\uf0b7 \nThe Urban Foundry \u2013 Stylish caf\u00e9 crowd \n\uf0b7 \nThe House of Medici (go early, avoid party hours) \u2013 JW Marriott \n\uf0b7 \nEuriska (early evenings) \u2013 For relaxed lounge vibe \n\uf0b7 \nMonalisa Kalagram Caf\u00e9 \u2013 With boutique + exhibitions \n\uf0b7 \nShisha Jazz Caf\u00e9 \u2013 Safe, art-lover, quiet evenings \n\ud83d\udcda Bookish, Creative, Conscious Caf\u00e9s \n\uf0b7 \nPagdandi Books & Caf\u00e9 \u2013 Baner (freelancers, readers, writers) \n\uf0b7 \nFrench Window Patisserie \u2013 Koregaon Park (popular with IG creators) \n\uf0b7 \nOne O Eight Caf\u00e9 \u2013 Spiritual, clean food, conscious crowd \n\uf0b7 \nWaari Book Caf\u00e9 \u2013 FC Road (students, minimalists) \n\uf0b7 \nVohuman Caf\u00e9 \u2013 Classic old-school Iranian caf\u00e9 \n\uf0b7 \nZamura Caf\u00e9 \u2013 Undri, calm garden environment \n\uf0b7 \nTIFA Working Studios \u2013 Artist/creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: foun", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "creator conversations \n\uf0b7 \nR-City Studio Caf\u00e9 \u2013 Creative performances, open mic energy \n \n\ud83d\udcbc Co-Working Spaces (To Meet Founders, Creators, \nSolopreneurs) \n\uf0b7 \nWeWork \u2013 Koregaon Park (Premium crowd: founders, designers, tech people) \n\uf0b7 \nThe Daftar \u2013 Baner / Kothrud (community-centric, early-stage founders) \n\uf0b7 \nTribe Co-Living \u2013 Koregaon Park (co-living + co-working + events) \n\uf0b7 \nBootstart \u2013 Baner, Kalyani Nagar \n\uf0b7 \nWorkden \u2013 Kalyani Nagar (quiet, upscale) \n\uf0b7 \nThe Mesh \u2013 Baner (freelancers, solo founders) \n\uf0b7 \nEvolve Work Studio \u2013 Boutique space with a vibe \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 2, "text": " \n\ud83c\udf99\ufe0f Meetups, Founder Circles & Networking Spaces \n\uf0b7 \nMeetup.com \u2013 Search \"Entrepreneur\", \"Podcasting\", \"Tech Founders Pune\" \n\uf0b7 \nLinkedIn Local Pune \u2013 Professionals, creators, and marketers meet monthly \n\uf0b7 \nOpen Coffee Club (OCC Pune) \u2013 Informal meetups for founders \n\uf0b7 \nTiE Pune \u2013 For startup mentorship, events, pitching, and networking \n\uf0b7 \nHeadstart Pune \u2013 Youth entrepreneurs and marketers \n\uf0b7 \nGrowthX Club \u2013 Invite-only, elite for product & business growth \n\uf0b7 \nMIDC Innovation Zone \u2013 Events for tech founders, AI, product \n\uf0b7 \nT-Hub (check events calendar) \u2013 Premium innovation & startup space \n \n\ud83c\udfa8 Culture, Art, and Wellness Spaces (Soulful, Conscious \nCommunities) \n\uf0b7 \nMonalisa Kalagram \u2013 Art exhibitions + caf\u00e9 + boutique \n\uf0b7 \nThe Artsphere \u2013 Cultural center for yoga, movement, dance \n\uf0b7 \nGyaan Adab \u2013 Poetry, literature, music events \n\uf0b7 \nTIFA Working Studios \u2013 Artist meetups and workshops \n\uf0b7 \nOSHO Garden (Morning/Evening walks for peaceful encounters) \n\uf0b7 \nYoga Institute Pune \u2013 To meet like-minded people grounded in wellness \n\uf0b7 \nArt2Day Gallery \u2013 Elegant and educated art-loving audience \n\uf0b7 \nPune Biennale Events \u2013 For art lovers and serious creatives \n \n", "file_name": "\ud83e\udd42 Premium Pune.pdf"}, {"page": 1, "text": "React Mastery Path  \n \nPhase 1: React Fundamentals \n1. JSX (JavaScript XML) \n\uf0b7 \nWhat: A syntax extension for JavaScript that looks like HTML and is used to describe \nUI structure in React. \n\uf0b7 \nWhy Important: Enables declarative UI creation and readable component structure. \n\uf0b7 \nUnder the Hood: JSX is transpiled to React.createElement() by Babel, which builds \na virtual DOM tree. \n\uf0b7 \nUsed in Real Apps: Defining component UI layout. \n\uf0b7 \nExample: \n\uf0b7 \nconst Welcome = () => <h1>Hello, SafeWeb AI User!</h1>; \n\uf0b7 \nHands-On Task: Create a Header, Footer, and Landing JSX layout. \n\uf0b7 \nInterview Question: What happens to JSX during the build process? \n\uf0b7 \nSafeWeb AI Use: Structure landing pages, hero sections, or onboarding screens. \n2. Components (Functional & Class) \n\uf0b7 \nWhat: Independent, reusable pieces of UI. \n\uf0b7 \nWhy Important: Encapsulates logic and markup for reuse and readability. \n\uf0b7 \nUnder the Hood: Each component maintains its own lifecycle and props/context \nhandling. \n\uf0b7 \nUsed in Real Apps: Every UI block (Navbar, Card, Form) is a component. \n\uf0b7 \nExample: \n\uf0b7 \nfunction Card(props) { \n\uf0b7 \n  return <div className=\"card\">{props.content}</div>; \n\uf0b7 \n} \n\uf0b7 \nHands-On Task: Build a FeatureCard component for highlighting SafeWeb AI \nfeatures. \n\uf0b7 \nInterview Question: Difference between functional and class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables c", "file_name": "React Notes.pdf"}, {"page": 1, "text": "nd class components? \n\uf0b7 \nSafeWeb AI Use: Reusable UI units like user reviews, feature highlights. \n3. Props \n\uf0b7 \nWhat: Read-only data passed from parent to child component. \n\uf0b7 \nWhy Important: Enables communication between components. \n\uf0b7 \nUnder the Hood: Props are passed as parameters to functions. \n\uf0b7 \nUsed in Real Apps: Passing user info, config, styles. \n\uf0b7 \nExample: \n\uf0b7 \nconst Greeting = ({ name }) => <h2>Hello, {name}</h2>; \n\uf0b7 \nHands-On Task: Pass site scan results from parent to child. \n", "file_name": "React Notes.pdf"}, {"page": 2, "text": "\uf0b7 \nInterview Question: Can a child modify props? \n\uf0b7 \nSafeWeb AI Use: Show user-specific security reports. \n4. State \n\uf0b7 \nWhat: A built-in object used to hold dynamic data. \n\uf0b7 \nWhy Important: Controls component behavior over time. \n\uf0b7 \nUnder the Hood: React uses useState to store and re-render components on update. \n\uf0b7 \nUsed in Real Apps: Handling form inputs, toggles, modals. \n\uf0b7 \nExample: \n\uf0b7 \nconst [email, setEmail] = useState(''); \n\uf0b7 \nHands-On Task: Build a login form managing email/password state. \n\uf0b7 \nInterview Question: How does state cause a re-render? \n\uf0b7 \nSafeWeb AI Use: Manage user input and scan configuration. \n5. Event Handling \n\uf0b7 \nWhat: Listening and responding to user events. \n\uf0b7 \nWhy Important: Powers interactivity. \n\uf0b7 \nUnder the Hood: Synthetic event system based on native events. \n\uf0b7 \nUsed in Real Apps: Form submission, buttons, toggles. \n\uf0b7 \nExample: \n\uf0b7 \n<button onClick={handleScan}>Start Scan</button> \n\uf0b7 \nHands-On Task: Add a \u201cStart Scan\u201d button with click handler. \n\uf0b7 \nInterview Question: What is a synthetic event? \n\uf0b7 \nSafeWeb AI Use: Trigger a website scan. \n6. Conditional Rendering \n\uf0b7 \nWhat: Rendering different UI based on conditions. \n\uf0b7 \nWhy Important: Enhances UX by showing relevant data. \n\uf0b7 \nUnder the Hood: Simple JavaScript logic (ternaries, &&, if). \n\uf0b7 \nUsed in Real Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to impl", "file_name": "React Notes.pdf"}, {"page": 2, "text": "al Apps: Loading screens, empty states, error messages. \n\uf0b7 \nExample: \n\uf0b7 \n{isLoading ? <Loader /> : <ScanResult />} \n\uf0b7 \nHands-On Task: Show a loader while scanning. \n\uf0b7 \nInterview Question: Ways to implement conditional rendering? \n\uf0b7 \nSafeWeb AI Use: Show different UI during scan progress. \n7. Lists and Keys \n\uf0b7 \nWhat: Rendering multiple elements using map() with unique key props. \n\uf0b7 \nWhy Important: Efficient rendering and reconciliation. \n\uf0b7 \nUnder the Hood: Keys help React identify changed, added, or removed items. \n\uf0b7 \nUsed in Real Apps: Listing scan results, history logs. \n\uf0b7 \nExample: \n", "file_name": "React Notes.pdf"}, {"page": 3, "text": "\uf0b7 \n{urls.map((url) => <li key={url}>{url}</li>)} \n\uf0b7 \nHands-On Task: Display a list of scanned URLs. \n\uf0b7 \nInterview Question: Why are keys important in lists? \n\uf0b7 \nSafeWeb AI Use: Show scanned website list. \n8. useEffect \n\uf0b7 \nWhat: Side effects like data fetching, subscriptions. \n\uf0b7 \nWhy Important: Handles operations outside render. \n\uf0b7 \nUnder the Hood: Scheduled after paint, cleanup via return function. \n\uf0b7 \nUsed in Real Apps: Fetching scan results, triggering alerts. \n\uf0b7 \nExample: \n\uf0b7 \nuseEffect(() => { fetchData(); }, []); \n\uf0b7 \nHands-On Task: Fetch dummy scan data on load. \n\uf0b7 \nInterview Question: How does the dependency array work? \n\uf0b7 \nSafeWeb AI Use: Load recent scan history on dashboard. \n9. Hooks (Intro) \n\uf0b7 \nWhat: Special functions to use React features in functional components. \n\uf0b7 \nWhy Important: Replaces classes with reusable logic. \n\uf0b7 \nUnder the Hood: Hooks use internal closures and React's fiber scheduler. \n\uf0b7 \nUsed in Real Apps: All stateful or side-effect components. \n\uf0b7 \nExample: useState, useEffect \n\uf0b7 \nHands-On Task: Use useState and useEffect together. \n\uf0b7 \nInterview Question: Why can\u2019t hooks be called conditionally? \n\uf0b7 \nSafeWeb AI Use: State and side effect logic. \n10. Forms \n\uf0b7 \nWhat: Collecting and managing user input. \n\uf0b7 \nWhy Important: Central for user interaction. \n\uf0b7 \nUnder the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 ", "file_name": "React Notes.pdf"}, {"page": 3, "text": "r the Hood: Controlled components store values in state. \n\uf0b7 \nUsed in Real Apps: Login, feedback, scanning forms. \n\uf0b7 \nExample: \n\uf0b7 \n<input value={email} onChange={(e) => setEmail(e.target.value)} /> \n\uf0b7 \nHands-On Task: Build scan request form. \n\uf0b7 \nInterview Question: Difference between controlled and uncontrolled components? \n\uf0b7 \nSafeWeb AI Use: Get website input from users. \n11. Context API \n\uf0b7 \nWhat: Global state manager for passing data without prop drilling. \n\uf0b7 \nWhy Important: Simplifies state sharing. \n\uf0b7 \nUnder the Hood: Uses React context provider/consumer. \n\uf0b7 \nUsed in Real Apps: Theme, auth, locale. \n", "file_name": "React Notes.pdf"}, {"page": 4, "text": "\uf0b7 \nExample: \n\uf0b7 \nconst UserContext = React.createContext(); \n\uf0b7 \nHands-On Task: Create AuthContext. \n\uf0b7 \nInterview Question: How does context re-render consumers? \n\uf0b7 \nSafeWeb AI Use: Share user data across pages. \n12. React Router \n\uf0b7 \nWhat: Routing library to handle navigation. \n\uf0b7 \nWhy Important: Enables multi-page apps. \n\uf0b7 \nUnder the Hood: Uses HTML5 history API. \n\uf0b7 \nUsed in Real Apps: Page navigation. \n\uf0b7 \nExample: \n\uf0b7 \n<Route path=\"/scan\" element={<Scan />} /> \n\uf0b7 \nHands-On Task: Setup Login, Dashboard, Scan routes. \n\uf0b7 \nInterview Question: Difference between browser and hash routers? \n\uf0b7 \nSafeWeb AI Use: Navigate between sections. \n13. Custom Hooks \n\uf0b7 \nWhat: User-defined reusable hook functions. \n\uf0b7 \nWhy Important: Abstraction and reuse of logic. \n\uf0b7 \nUnder the Hood: Functions that call other hooks. \n\uf0b7 \nUsed in Real Apps: Reusable logic blocks. \n\uf0b7 \nExample: useAuth, useScanStatus \n\uf0b7 \nHands-On Task: Create useAuthGuard. \n\uf0b7 \nInterview Question: Naming rule for hooks? \n\uf0b7 \nSafeWeb AI Use: Custom logic management. \n14. useMemo & useCallback \n\uf0b7 \nWhat: Memoization hooks to optimize performance. \n\uf0b7 \nWhy Important: Prevents unnecessary recalculations or re-renders. \n\uf0b7 \nUnder the Hood: Caches previous return values. \n\uf0b7 \nUsed in Real Apps: Expensive operations, function refs. \n\uf0b7 \nExample: \n\uf0b7 \nconst memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. ", "file_name": "React Notes.pdf"}, {"page": 4, "text": "st memoized = useMemo(() => compute(data), [data]); \n\uf0b7 \nHands-On Task: Optimize result rendering. \n\uf0b7 \nInterview Question: When does useMemo recalculate? \n\uf0b7 \nSafeWeb AI Use: Prevent rerender on scans. \n15. Refs and useRef \n\uf0b7 \nWhat: Direct DOM access or persist values across renders. \n\uf0b7 \nWhy Important: Needed for focus, timers, scroll. \n\uf0b7 \nUnder the Hood: Maintains mutable .current reference. \n", "file_name": "React Notes.pdf"}, {"page": 5, "text": "\uf0b7 \nUsed in Real Apps: Form fields, animations. \n\uf0b7 \nExample: inputRef.current.focus() \n\uf0b7 \nHands-On Task: Focus input on mount. \n\uf0b7 \nInterview Question: When to use refs? \n\uf0b7 \nSafeWeb AI Use: Scroll to report. \n16. Error Boundaries \n\uf0b7 \nWhat: Catch and handle render errors. \n\uf0b7 \nWhy Important: Prevent crashes. \n\uf0b7 \nUnder the Hood: Uses lifecycle methods (componentDidCatch). \n\uf0b7 \nUsed in Real Apps: Wrapping entire app/components. \n\uf0b7 \nExample: Class-based error catcher. \n\uf0b7 \nHands-On Task: Create ErrorBoundary wrapper. \n\uf0b7 \nInterview Question: Can hooks catch errors? \n\uf0b7 \nSafeWeb AI Use: Catch scan/report failures. \n17. Code Splitting \n\uf0b7 \nWhat: Load JS bundles on demand. \n\uf0b7 \nWhy Important: Reduces initial load. \n\uf0b7 \nUnder the Hood: Uses React.lazy and dynamic import. \n\uf0b7 \nUsed in Real Apps: Lazy-loading routes/pages. \n\uf0b7 \nExample: \n\uf0b7 \nconst Scan = React.lazy(() => import('./Scan')); \n\uf0b7 \nHands-On Task: Split heavy components. \n\uf0b7 \nInterview Question: Difference between lazy and suspense? \n\uf0b7 \nSafeWeb AI Use: Speed up first load. \n18. Higher Order Components \n\uf0b7 \nWhat: Functions returning components. \n\uf0b7 \nWhy Important: Reusable logic decorators. \n\uf0b7 \nUnder the Hood: Functional pattern. \n\uf0b7 \nUsed in Real Apps: Permissions, tracking. \n\uf0b7 \nExample: withLogging(Component) \n\uf0b7 \nHands-On Task: Create HOC for authentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Impo", "file_name": "React Notes.pdf"}, {"page": 5, "text": "uthentication check. \n\uf0b7 \nInterview Question: Compare HOCs with hooks? \n\uf0b7 \nSafeWeb AI Use: Wrap secure dashboard. \n19. Render Props \n\uf0b7 \nWhat: Share code by passing render function as prop. \n\uf0b7 \nWhy Important: Flexible pattern. \n\uf0b7 \nUnder the Hood: Functions as children. \n\uf0b7 \nUsed in Real Apps: Sliders, animations. \n", "file_name": "React Notes.pdf"}, {"page": 6, "text": "\uf0b7 \nExample: <DataProvider render={(data) => <Chart data={data} />} \n\uf0b7 \nHands-On Task: Create MouseTracker. \n\uf0b7 \nInterview Question: Downsides of render props? \n\uf0b7 \nSafeWeb AI Use: Share UI logic. \n20. State Management \n\uf0b7 \nWhat: Tools to manage complex app state. \n\uf0b7 \nWhy Important: Scalability. \n\uf0b7 \nUnder the Hood: Central store and dispatch pattern. \n\uf0b7 \nUsed in Real Apps: Redux, Zustand. \n\uf0b7 \nExample: useReducer, Redux store \n\uf0b7 \nHands-On Task: Manage scan logs in global state. \n\uf0b7 \nInterview Question: Redux vs context? \n\uf0b7 \nSafeWeb AI Use: Global scan/auth state. \n21. Axios / Fetch \n\uf0b7 \nWhat: HTTP libraries to talk to APIs. \n\uf0b7 \nWhy Important: Core for data interaction. \n\uf0b7 \nUnder the Hood: Promise-based APIs. \n\uf0b7 \nUsed in Real Apps: Backend communication. \n\uf0b7 \nExample: axios.get('/api/report') \n\uf0b7 \nHands-On Task: Fetch scan results. \n\uf0b7 \nInterview Question: Axios vs fetch? \n\uf0b7 \nSafeWeb AI Use: Talk to scan API. \n22. Folder Structure \n\uf0b7 \nWhat: Organizing codebase. \n\uf0b7 \nWhy Important: Maintainability. \n\uf0b7 \nUnder the Hood: Logical separation. \n\uf0b7 \nUsed in Real Apps: Feature/domain-based. \n\uf0b7 \nExample: src/components, src/services \n\uf0b7 \nHands-On Task: Restructure SafeWeb AI project. \n\uf0b7 \nInterview Question: Best practices for large apps? \n\uf0b7 \nSafeWeb AI Use: Scale codebase. \n23. PropTypes / TypeScript \n\uf0b7 \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.p", "file_name": "React Notes.pdf"}, {"page": 6, "text": " \nWhat: Tools to validate types. \n\uf0b7 \nWhy Important: Prevent runtime bugs. \n\uf0b7 \nUnder the Hood: Type checking in runtime or compile-time. \n\uf0b7 \nUsed in Real Apps: Type safety. \n\uf0b7 \nExample: \n\uf0b7 \nComponent.propTypes = { name: PropTypes.string } \n", "file_name": "React Notes.pdf"}, {"page": 7, "text": "\uf0b7 \nHands-On Task: Add PropTypes to core components. \n\uf0b7 \nInterview Question: TS vs PropTypes? \n\uf0b7 \nSafeWeb AI Use: Ensure correct data handling. \n24. Testing (Jest + RTL) \n\uf0b7 \nWhat: Automated validation of logic and UI. \n\uf0b7 \nWhy Important: Prevent regressions. \n\uf0b7 \nUnder the Hood: Simulates components. \n\uf0b7 \nUsed in Real Apps: CI pipelines. \n\uf0b7 \nExample: expect(getByText('Welcome')).toBeInTheDocument() \n\uf0b7 \nHands-On Task: Test login and scan page. \n\uf0b7 \nInterview Question: Unit vs integration test? \n\uf0b7 \nSafeWeb AI Use: Bug-free reliability. \n \n \nReact Interview Questions & Precise Answers \n \n1. What happens to JSX during the build process? \no JSX is transpiled by Babel into React.createElement() calls that build the \nvirtual DOM. \n2. Difference between functional and class components? \no Functional: Simple functions using hooks. Class: ES6 classes using lifecycle \nmethods. \n3. Can a child modify props? \no No. Props are read-only; only the parent can change them. \n4. How does state cause a re-render? \no Calling setState triggers React\u2019s scheduler to re-render that component with \nupdated state. \n5. What is a synthetic event? \no A cross-browser wrapper around native events, provided by React for \nconsistency. \n6. Ways to implement conditional rendering? \no \nif/else, ternary ? :, logical AND &&, IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useE", "file_name": "React Notes.pdf"}, {"page": 7, "text": ", IIFE inside JSX. \n7. Why are keys important in lists? \no Keys help React identify which items changed, are added, or removed for \nefficient re-renders. \n8. How does the dependency array work in useEffect? \no It determines when the effect runs. Empty array means run once. Include variables \nto trigger rerun when they change. \n9. Why can\u2019t hooks be called conditionally? \n", "file_name": "React Notes.pdf"}, {"page": 8, "text": "o Because React relies on the order of hooks. Conditional calls break this order, \ncausing bugs. \n10. Difference between controlled and uncontrolled components? \no Controlled: state-driven. Uncontrolled: DOM-driven (using refs). \n11. How does context re-render consumers? \no When context value changes, all consumers using that context re-render. \n12. Difference between browser and hash routers? \no BrowserRouter uses HTML5 history API. HashRouter uses URL hash (#) for \nrouting. \n13. Naming rule for custom hooks? \no Must start with use to let React track them internally. \n14. When does useMemo recalculate? \no When any dependency in its dependency array changes. \n15. When to use refs? \no When you need direct DOM access or to persist values without triggering re-\nrenders. \n16. Can hooks catch errors? \no No. Only class-based error boundaries can catch render-time errors. \n17. Difference between lazy and suspense? \no \nlazy dynamically imports components. Suspense wraps lazy-loaded components \nto handle loading fallback. \n18. Compare HOCs with hooks? \no HOCs wrap components for reuse. Hooks reuse logic inside functional \ncomponents. \n19. Downsides of render props? \no Can lead to deeply nested structures (callback hell). \n20. Redux vs Context? \no Redux is for complex/global state with middleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps fo", "file_name": "React Notes.pdf"}, {"page": 8, "text": "dleware. Context is for simple global \nsharing. \n21. Axios vs fetch? \no Axios: cleaner syntax, interceptors, error handling. Fetch: native API, more \nboilerplate. \n22. Best practices for large apps folder structure? \no Feature-based or domain-based structure with clear separation of concerns. \n23. TypeScript vs PropTypes? \no TypeScript checks types at compile-time. PropTypes check at runtime and are \nlimited. \n24. Unit vs integration test? \no Unit: test single component/function. Integration: test interactions between \ncomponents. \n \n \n", "file_name": "React Notes.pdf"}, {"page": 1, "text": "BHAWANA KUMAR  \n 7972684479    \n   bhawanakumar5@gmail.com      \n  Linkedin \nGithub                  Portfolio \n \nExperience \nCybage Software \nSoftware Engineer  \nNov\u201923 \u2013 Present \n\u2022 Built scalable enterprise apps using Angular, React, Node.js, MongoDB, SQL, Python & Ruby on Rails, improving \nperformance by 30% via lazy loading and UI optimization. \n\u2022 Integrated 15+ REST APIs for real-time, secure data exchange across microservices. \n\u2022 Developed reusable UI libraries and CI/CD pipelines with Gitlab, accelerating deployments. \n\u2022 Designed responsive, accessible UIs using SCSS and best cross-browser practices. \n\u2022 Delivered authentication modules, RBAC and admin dashboards in Agile teams. \n Skills \n\u2022 Languages & Frameworks - JavaScript, TypeScript, Python, Django, Ruby on Rails  \n\u2022 Frontend - React.js, Angular, HTML5, CSS3, Responsive Web Design \n\u2022 Backend & APIs \u2013 Node.js, Django, Ruby on Rails, RESTful APIs \n\u2022 Databases \u2013 MongoDB, SQL \n\u2022 Tools & Practices \u2013 Git, Gitlab, CI/CD, Agile/Scrum \n\u2022 CS Fundamentals \u2013 Data Structures, Algorithms, OOP, Problem Solving \n\u2022 Soft Skills -  Communication, Collaboration, Time Management, Adaptability \nProjects \nAutoTradeHub \u2013 Automobile E-commerce Platform \nTech Stack: Angular, Node.js, MongoDB, SCSS, REST APIs \nBuilt role-based auth, vehicle CRUD, image uploads, filters, Razorpay payments, and analytics dashboard. \nClixVerse \u2013 Social Media Platform \nTech Stack: Ruby on Rails, SQL, Turbo, ERB \nImplemented image-based articles, likes, bookmarks", "file_name": "BhawanaKumar_SoftwareEngineer_Resume.pdf"}, {"page": 1, "text": ", image uploads, filters, Razorpay payments, and analytics dashboard. \nClixVerse \u2013 Social Media Platform \nTech Stack: Ruby on Rails, SQL, Turbo, ERB \nImplemented image-based articles, likes, bookmarks, comments, global/scoped search, and admin moderation. \nFake Website Detection Tool \nTech Stack: React, Django, 3rd Party APIs \nBuilt a full-stack web app to detect phishing websites by analyzing URLs and content using APIs. \nEducation \nDr. Babasaheb Ambedkar Technological University                                                                        \n     Maharashtra \nB.Tech. Computer Engineering \nMay 2019 \u2013 May 2023 \nMajor Elective: Computer Science \nCGPA: 8.83 \nCertifications & Awards \nMeta Front-End Developer Certification:  Coursera, 2025 \nHacktoberfest Contributor: Successfully contributed to open source repositories. \nCybage Chess Championship Winner (2024): Secured 1st place in female category \nPublication: Design and Implementation of EzyRidez- A ride sharing platform, GIS Science Journal 2023 \n", "file_name": "BhawanaKumar_SoftwareEngineer_Resume.pdf"}, {"page": 1, "text": "DSA Interview Notes \u2013 Standard Layouts & Mappings \n \n1. Phone Keypad Mapping \nphone_map = { \n    \"2\": \"abc\", \"3\": \"def\", \n    \"4\": \"ghi\", \"5\": \"jkl\", \n    \"6\": \"mno\", \"7\": \"pqrs\", \n    \"8\": \"tuv\", \"9\": \"wxyz\" \n} \n\u2705 Use in: \n\uf0b7 \nLetter Combinations of Phone Number, Predictive Text / T9, Find All Possible Words from \nDigits  \n\uf0b7 \nBacktracking, DFS, Strings \n \n2. Grid/Matrix Directions \n4-Direction Movement (Up, Down, Left, Right) \ndirs_4 = [(-1, 0), (1, 0), (0, -1), (0, 1)] \n8-Direction Movement (Diagonals included) \ndirs_8 = [(-1, -1), (-1, 0), (-1, 1), \n          (0, -1),           (0, 1), \n          (1, -1),  (1, 0),  (1, 1)] \n\u2705 Use in: \n\uf0b7 \nNumber of Islands, Word Search, Maze Solving, Flood Fill \n\uf0b7 \nDFS/BFS, Matrix Problems \n \n3. Knight\u2019s Moves (Chessboard) \nknight_moves = [ \n    (2, 1), (1, 2), (-1, 2), (-2, 1), \n    (-2, -1), (-1, -2), (1, -2), (2, -1) \n] \n\u2705 Use in:  Knight\u2019s Tour, Minimum Knight Moves , Puzzle/Chess Grid\n \n", "file_name": "DSAnPython.pdf"}, {"page": 2, "text": "4. Binary Tree Traversals \nclass TreeNode: \n    def __init__(self, val=0, left=None, right=None): \n        self.val = val \n        self.left = left \n        self.right = right \n\uf0b7 \nPreorder: Root \u2192 Left \u2192 Right \n\uf0b7 \nInorder: Left \u2192 Root \u2192 Right \n\uf0b7 \nPostorder: Left \u2192 Right \u2192 Root \n\uf0b7 \nLevel Order: BFS using queue \n\u2705 Use in: Tree reconstruction, Path Sum, BST validation, Trees, Recursion, DFS\n \n5. Min Heap / Max Heap in Python \nimport heapq \n \n# Min Heap \nheapq.heappush(heap, val) \nheapq.heappop(heap) \n \n# Max Heap \nheapq.heappush(heap, -val) \nheapq.heappop(heap) * -1 \n\u2705 Use in: Top K elements, Median in stream, Kth smallest/largest, Greedy, Priority Queues\n \n6. ASCII Mapping (Characters \u2192 Numbers) \nord('a')  # 97 \nchr(97)   # 'a' \n \nord('z')  # 122 \n\u2705 Use in: Frequency Arrays (size 26), Anagrams, Palindrome Check , Frequency counting\n \n7. Keyboard Row Mapping \nrow1 = set(\"qwertyuiop\") \nrow2 = set(\"asdfghjkl\") \nrow3 = set(\"zxcvbnm\") \n\u2705 Use in: Words Using Only One Row of Keyboard, String filtering\n \n", "file_name": "DSAnPython.pdf"}, {"page": 3, "text": "8. Roman Numerals Mapping \nroman_map = { \n    'I': 1, 'V': 5, 'X': 10, \n    'L': 50, 'C': 100, 'D': 500, 'M': 1000 \n} \n\u2705 Use in: Roman to Integer, Integer to Roman, String / Math Conversion\n \n9. Weekday Layout (for calendar problems) \nweekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', \n'Friday', 'Saturday'] \n\u2705 Use in: Day calculation, Zeller\u2019s Congruence\n \n10. Digit to Word Mapping \ndigit_to_word = { \n  0: 'zero', 1: 'one', ..., 9: 'nine' \n} \n\u2705 Use in: Verbal arithmetic puzzles , Spoken digit output problems \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 4, "text": "The Top 14 LeetCode Patterns You Need to Know \n1. Sliding Window \n\u2705 Used when working with subarrays, substrings, or fixed-size / variable windows. \n     Helps in reducing time from O(n\u00b2) \u2192 O(n) \nExamples: Maximum Sum Subarray of Size K , Longest Substring Without Repeating Characters, \nMinimum Window Substring\n \n2. Two Pointers \n\u2705 Used for problems involving sorted arrays, linked lists, etc. \n     Moves two pointers from front/back/middle \nExamples: Two Sum II (sorted array), 3Sum, Container With Most Water\n \n3. Fast and Slow Pointers \n\u2705 Detect cycles, mid-points \nExamples: Linked List Cycle, Find the Duplicate Number , Middle of Linked List\n \n4. Hashing (HashMap / Set) \n\u2705 Count frequencies, track seen elements, prefix sums \nExamples: Subarray Sum Equals K , Group Anagrams , Longest Consecutive Sequence\n \n5. Prefix Sum \n\u2705 For cumulative/interval sums, range queries \nExamples: Subarray Sum Equals K , Range Sum Query , Count Subarrays with Sum\n \n6. Backtracking \n\u2705 Try all combinations, revert decisions \nExamples: Subsets , Permutations , Letter Combinations of a Phone Number, N-Queens \n", "file_name": "DSAnPython.pdf"}, {"page": 5, "text": " \n7. Recursion / DFS \n\u2705 Tree/graph traversal, subset problems \nExamples: Binary Tree Traversals , Generate Parentheses , Subsets\n \n8. Breadth-First Search (BFS) \n\u2705 Used in graphs, trees, shortest paths \nExamples: Binary Tree Level Order Traversal, Word Ladder, Number of Islands\n \n9. Depth-First Search (DFS) \n\u2705 Graph traversal, backtracking, component counting \nExamples: Number of Islands , Clone Graph , Word Search\n \n10. Greedy \n\u2705 Make best local choice at each step \nExamples: Jump Game , Merge Intervals , Gas Station , Partition Labels\n \n11. Dynamic Programming (DP) \n\u2705 Break down problem into subproblems, store results \nExamples: House Robber , Longest Increasing Subsequence , 0/1 Knapsack, Coin Change\n \n12. Bit Manipulation \n\u2705 Work with bits for optimization or tricky logic \nExamples: Single Number , Counting Bits , Subsets (with bitmasking) \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 6, "text": "13. Union Find (Disjoint Set) \n\u2705 Track connected components \nExamples: Graph Valid Tree , Number of Connected Components, Redundant Connection\n \n14. Heap / Priority Queue \n\u2705 Get max/min quickly, sliding window max, k-largest \nExamples: Kth Largest Element, Merge K Sorted Lists, Top K Frequent Elements \n \n \n \nExtra Patterns (Advanced \u2013 optional): \nIf you have time later, explore these bonus topics: \n1. Monotonic Stack / Deque \n2. Segment Trees / Binary Indexed Trees \n3. Dijkstra\u2019s / A* for weighted graphs \n4. Tries (prefix trees) \n5. Rabin-Karp (String Hashing) \nThese are not Amazon must-knows, but helpful for: \n\uf0b7 \nGoogle \n\uf0b7 \nDeep graph / string / optimization problems \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 7, "text": "1. Built-in Functions (Essentials) \n \nFunction \nPurpose \nExample \nmax() \nGet the maximum of values max(3, 7) \u2192 7 \nmin() \nGet the minimum \nmin(3, 7) \u2192 3 \nsum() \nSum of list values \nsum([1, 2, 3]) \u2192 6 \nlen() \nLength of list, string, etc. \nlen(arr) \nrange() \nGenerate a sequence \nrange(5) \u2192 0, 1, 2, 3, 4 \nenumerate() Loop with index \nfor i, val in enumerate(arr) \nreversed() \nReverse iterator \nfor val in reversed(arr) \nsorted() \nReturns sorted version of list sorted(arr) \nlist() \nConvert to list \nlist(\"abc\") \u2192 ['a','b','c'] \n \n2. Strings \u2013 Helpful Methods \n \nFunction \nPurpose \nExample \nstr.split() \nSplit string into list \n\"a b c\".split() \u2192 ['a','b','c'] \nstr.strip() \nRemove whitespace \n\" abc \".strip() \u2192 \"abc\" \nstr.isdigit() \nCheck if string is a digit \"123\".isdigit() \u2192 True \nstr.lower() / upper() Convert case \n\"HeLLo\".lower() \u2192 \"hello\" \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 8, "text": "3. Lists \u2013 Core Methods \nMethod \nPurpose \nExample \nlist.append(x) Add element at the end \narr.append(10) \nlist.pop() \nRemove last element \narr.pop() \nlist.remove(x) Remove element by value arr.remove(2) \nlist.index(x) \nGet index of value \narr.index(5) \nlist.insert(i, x) Insert at index \narr.insert(1, 99) \nlist.count(x) Count occurrences \narr.count(2) \n \n4. Dictionary (Hashmap) \u2013 Extremely Useful \nMethod / Function \nPurpose \nExample \ndict.get(key, default) Get value or return default d.get('a', 0) \ndict.keys() / values() Iterate keys/values \nfor key in d.keys() \ndict.items() \nIterate key, value pairs \nfor k, v in d.items() \nkey in dict \nCheck if key exists \n'a' in d \ndefaultdict(int) \nAuto-handle missing keys from collections import defaultdict \n \n5. Collections Module \nTool \nPurpose \nExample \ndefaultdict(type) Dictionary with default values dd = defaultdict(int) \nCounter() \nCount occurrences of elements Counter(\"aabc\") \u2192 {'a':2, 'b':1,...} \ndeque() \nDouble-ended queue \ndq = deque([1,2,3]) \nheapq \nPriority Queue / Min Heap \nheapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 9, "text": "6. Math / Time / Random \n \nModule \nFunction \nPurpose \nmath \nmath.sqrt(), math.ceil() Square root, rounding \ntime \ntime.time() \nGet current time (for speed) \nrandom random.randint() \nRandom numbers (for mock tests) \n \n7. Useful Tricks \nTrick \nDescription \nExample \narr[::-1] \nReverse a list or string \ns[::-1] \na, b = b, a Swap variables \n \n' '.join(list) Convert list to string with spaces ' '.join(['a','b']) \u2192 \"a b\" \nall() / any() Check all / any condition is True all([1, True]) \n \nBonus: Lambda & Key Functions (for Sorting) \narr.sort(key=lambda x: x[1])  # Sort by second element of sublists \nUseful for: \n\uf0b7 \nSorting arrays of tuples \n\uf0b7 \nSorting by custom logic \n \nGreat question, Bhawana! You're already covering a solid base. But yes \u2014 here\u2019s a final \nroundup of additional useful Python concepts and functions that are often overlooked but \ncritical in real DSA problems (especially in contests and interviews like Amazon). \n \n", "file_name": "DSAnPython.pdf"}, {"page": 10, "text": "8. Advanced Built-ins & Tricks (Most Students Miss These!) \nFeature/Function \nUse Case \nExample \nzip() \nLoop over multiple iterables \nsimultaneously \nfor a, b in zip(arr1, \narr2) \nmap() \nApply function to each item \nmap(int, input().split()) \nfilter() \nFilter elements by condition \nfilter(lambda x: x > 0, \narr) \nset() \nRemoves duplicates, used for \nfast lookup \nset(arr) \nset.add() / set.remove() \nModify set \n \nislice() from itertools \nSlicing iterators \nislice(range(100), 10, 20) \nbisect.bisect_left() / \nbisect_right() \nBinary search in sorted list \nbisect.bisect_left(arr, x) \nany() \nTrue if any element is truthy \nany([False, True, False]) \n\u2192 True \nall() \nTrue if all elements are truthy \nall([1, 2, 3]) \u2192 True \nre module \nRegex for pattern matching \n(sometimes needed in parsing) re.findall(r'\\d+', s) \n \n9. Built-in Data Types You Must Master \nType \nWhen to Use \nQuick Syntax Example \nlist Ordered, indexable \na = [1, 2, 3] \ntuple Immutable, hashable keys a = (1, 2) \nset \nUnique values, fast lookup a = {1, 2, 3} \ndict Key-value mapping \nd = {'a': 1} \ndeque Queue/Stack with fast ops deque([1,2,3]) from collections \nheap Min/Max heap for priority heapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 11, "text": "10. Collections Deep Dive (Very Interview-Friendly) \nTool \nUse Case \nExample \ndefaultdict(list/int) Auto-initialize missing keys dd = defaultdict(list) \nCounter() \nCount occurrences of each \nelement \nCounter([1,2,2,3]) \u2192 {2:2, 1:1, \n3:1} \nOrderedDict() \nKeeps insertion order \n(Rarely used now, since dicts are ordered from \nPython 3.7+) \ndeque() \nQueue or two-sided \noperations \ndq.popleft(), dq.appendleft() \n \n11. heapq (Min/Max Heap) \nimport heapq \nmin_heap = [] \nheapq.heappush(min_heap, 5) \nheapq.heappush(min_heap, 3) \nheapq.heappop(min_heap)  # returns 3 (smallest) \nUse in: \n\u2705 Top-K problems, \n\u2705 Priority queues, \n\u2705 Greedy algorithms \n \n12. Functools (for memoization and recursion) \nfrom functools import lru_cache \n \n@lru_cache(None) \ndef fib(n): \n    if n <= 1: \n        return n \n    return fib(n-1) + fib(n-2) \nUse in: \n\u2705 Dynamic Programming, \n\u2705 Top-down memoization, \n\u2705 Recursion-heavy problems \n", "file_name": "DSAnPython.pdf"}, {"page": 12, "text": " \n13. Bit Manipulation Functions \nBit Trick \nPurpose \nx << 1, x >> 1 \nBit shifts (multiply/divide by 2) \nx & 1 \nCheck if x is odd \nx ^ y \nBitwise XOR \nbin(x).count('1') Count set bits in x \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 13, "text": "Python Notes for Beginners to Intermediate \n 1. Introduction to Python \n\uf0b7 \nHigh-level, interpreted, and dynamically typed programming language. \n\uf0b7 \nCreated by Guido van Rossum, released in 1991. \n\uf0b7 \nGreat for web dev, data science, automation, AI, scripting, etc. \n \n2. Basic Syntax \n# This is a comment \nprint(\"Hello, World!\")  # Output: Hello, World! \n\uf0b7 \nIndentation is mandatory in Python to define blocks. \n\uf0b7 \nNo {} or ; like in C/C++/Java. \n \n3. Data Types \n\uf0b7 \nint, float, str, bool \n\uf0b7 \nlist, tuple, set, dict \n\uf0b7 \nNoneType \na = 5               # int \nb = 5.0             # float \nc = \"Python\"        # str \nd = True            # bool \n \n4. Type Conversion \nint(\"5\")        # 5 \nfloat(\"3.14\")   # 3.14 \nstr(100)        # \"100\" \nbool(0)         # False \n \n5. Variables \n\uf0b7 \nNo need to declare the type. \n\uf0b7 \nFollows snake_case naming. \nname = \"Bhawana\" \nage = 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 14, "text": " \n6. Control Flow \nif / elif / else \nif age > 18: \n    print(\"Adult\") \nelif age == 18: \n    print(\"Just turned adult\") \nelse: \n    print(\"Minor\") \nwhile loop \ni = 0 \nwhile i < 5: \n    print(i) \n    i += 1 \nfor loop \nfor i in range(5): \n    print(i) \n \n 7. Functions \ndef greet(name): \n    return f\"Hello, {name}\" \n \nprint(greet(\"Bhawana\")) \n \n8. Strings \ntext = \"Python\" \nprint(text.upper())       # 'PYTHON' \nprint(text[0])            # 'P' \nprint(len(text))          # 6 \nprint(\"th\" in text)       # True \n \n9. Lists \nfruits = [\"apple\", \"banana\", \"mango\"] \nfruits.append(\"orange\") \nprint(fruits[1])          # \"banana\" \n \n", "file_name": "DSAnPython.pdf"}, {"page": 15, "text": "10. Tuples \nt = (1, 2, 3) \n# Immutable \nprint(t[0])               # 1 \n \n11. Dictionaries \nstudent = {\"name\": \"Alice\", \"age\": 20} \nprint(student[\"name\"])    # Alice \nstudent[\"age\"] = 21 \n \n12. Sets \nnums = {1, 2, 3, 2} \nprint(nums)               # {1, 2, 3} - duplicates removed \n \n13. Exception Handling \ntry: \n    x = 1 / 0 \nexcept ZeroDivisionError: \n    print(\"Can't divide by zero!\") \nfinally: \n    print(\"Done\") \n \n14. Modules and Libraries \nimport math \nprint(math.sqrt(16))      # 4.0 \nInstall external modules: \npip install requests \n \n15. List Comprehension \nsquares = [x**2 for x in range(5)]   # [0, 1, 4, 9, 16] \n \n16. Lambda Functions \nsquare = lambda x: x ** 2 \nprint(square(5))          # 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 16, "text": " \n 17. Object-Oriented Programming (OOP) \nclass Person: \n    def __init__(self, name): \n        self.name = name \n \n    def say_hi(self): \n        print(f\"Hi, I'm {self.name}\") \n \np = Person(\"Bhawana\") \np.say_hi() \n \n18. File Handling \nwith open(\"file.txt\", \"r\") as file: \n    content = file.read() \n    print(content) \n \n19. Useful Built-in Functions \n\uf0b7 \nlen(), type(), range(), sorted(), input(), sum(), max(), min() \n \n20. Best Practices \n\uf0b7 \nUse meaningful variable names. \n\uf0b7 \nKeep code DRY (Don't Repeat Yourself). \n\uf0b7 \nUse virtual environments. \n\uf0b7 \nFollow PEP8 (Python Style Guide). \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 17, "text": " \n", "file_name": "DSAnPython.pdf"}, {"page": 1, "text": " \n \nGeneral SQL Topics \n1. INTRODUCTION TO SQL \n\uf0b7 \nSQL: Structured Query Language, used to interact with relational databases. \n\uf0b7 \nRelational Database: Stores data in tables (rows & columns). \n\uf0b7 \nCommon RDBMS: MySQL, PostgreSQL, SQLite, Oracle, SQL Server. \n \n2. SQL DATA TYPES \n\uf0b7 \nINT: Integer numbers \n\uf0b7 \nVARCHAR(n): Variable-length string with a maximum of n characters \n\uf0b7 \nCHAR(n): Fixed-length string \n\uf0b7 \nDATE / DATETIME: Date or timestamp \n\uf0b7 \nDECIMAL(p, s): Exact numeric value with precision and scale \n\uf0b7 \nBOOLEAN: True or False \n\uf0b7 \nTEXT: Long-form string data \n \n3. BASIC SQL COMMANDS \n\u27a4 Create Table \nCREATE TABLE Employees ( \n  id INT PRIMARY KEY, \n  name VARCHAR(100), \n  salary INT, \n  department VARCHAR(50) \n); \n\u27a4 Insert \nINSERT INTO Employees (id, name, salary, department) \nVALUES (1, 'Alice', 60000, 'HR'); \n\u27a4 Select \nSELECT * FROM Employees; \nSELECT name, salary FROM Employees; \nSELECT * FROM Employees WHERE salary > 50000; \n\u27a4 Update \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 2, "text": "UPDATE Employees SET salary = 70000 WHERE id = 1; \n\u27a4 Delete \nDELETE FROM Employees WHERE id = 1; \n \n4. FILTERING DATA \n\u27a4 WHERE, AND, OR, NOT \nSELECT * FROM Employees \nWHERE department = 'HR' AND salary > 50000; \n\u27a4 IN, BETWEEN, LIKE \nSELECT * FROM Employees WHERE department IN ('HR', 'Sales'); \nSELECT * FROM Employees WHERE salary BETWEEN 40000 AND 70000; \nSELECT * FROM Employees WHERE name LIKE 'A%'; -- starts with A \n \n5. SORTING & LIMITING \nSELECT * FROM Employees ORDER BY salary DESC; \nSELECT * FROM Employees LIMIT 5; \n \n6. AGGREGATE FUNCTIONS \nSELECT COUNT(*) FROM Employees; \nSELECT AVG(salary) FROM Employees; \nSELECT SUM(salary), MAX(salary), MIN(salary) FROM Employees; \n \n7. GROUPING & FILTERING AGGREGATES \nSELECT department, AVG(salary) AS avg_salary \nFROM Employees \nGROUP BY department \nHAVING AVG(salary) > 50000; \n \n8. JOINS \n\u27a4 Syntax: \nSELECT e.name, d.name \nFROM Employees e \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 3, "text": "JOIN Departments d ON e.department_id = d.id; \n8.1. INNER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nINNER JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 Only matching department IDs shown. \n8.2. LEFT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All employees shown, even if no department. \n8.3. RIGHT JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n\uf0b7 \n\u2705 All departments shown, even if no employee. \n8.4. FULL OUTER JOIN \nSELECT e.name, d.dept_name \nFROM Employees e \nLEFT JOIN Departments d ON e.department_id = d.id \nUNION \nSELECT e.name, d.dept_name \nFROM Employees e \nRIGHT JOIN Departments d ON e.department_id = d.id; \n \n9. SUBQUERIES \nUsed to embed one query inside another. \nSELECT name FROM Employees \nWHERE salary > ( \n  SELECT AVG(salary) FROM Employees \n); \n \n10. CONSTRAINTS \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 4, "text": "\uf0b7 \nPRIMARY KEY: Uniquely identifies each record \n\uf0b7 \nFOREIGN KEY: Links to primary key of another table \n\uf0b7 \nUNIQUE: Ensures all values in a column are different \n\uf0b7 \nNOT NULL: Disallows NULL values \n\uf0b7 \nCHECK: Ensures a condition is met \n \n11. NORMALIZATION  \n\uf0b7 \nProcess of organizing data to reduce redundancy and improve data integrity. \n\uf0b7 \n1NF: Atomic values \n\uf0b7 \n2NF: No partial dependencies \n\uf0b7 \n3NF: No transitive dependencies \n\uf0b7 \nEnsures data integrity and minimizes duplication. \n\ud83c\udfaf Why Normalize? \n\uf0b7 \nEliminate duplicate data \n\uf0b7 \nEnsure data consistency \n\uf0b7 \nImprove data structure for querying and updates \n \n\ud83d\udcda Normal Forms (NF) \n\u2705 1NF \u2013 First Normal Form \nRule: All values must be atomic (indivisible). \nFix: Remove repeating groups and store one value per cell. \nExample (Bad): \nID Name Phones \n1 Alice 1234, 5678 \nFix (1NF): \nID Name Phone \n1 Alice 1234 \n1 Alice 5678 \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 5, "text": "\u2705 2NF \u2013 Second Normal Form \nRule: Be in 1NF + No Partial Dependency on a composite key. \nFix: Move partially dependent data to a new table. \nExample: \nComposite key: (StudentID, CourseID) \nStudentID CourseID StudentName \nFix (2NF): \n\uf0b7 \nTable 1: StudentCourses(StudentID, CourseID) \n\uf0b7 \nTable 2: Students(StudentID, StudentName) \n \n\u2705 3NF \u2013 Third Normal Form \nRule: Be in 2NF + No transitive dependency. \nFix: Remove data that's indirectly dependent on the primary key. \nExample (Bad): \nEmpID Name DeptID DeptName \nFix (3NF): \n\uf0b7 \nTable 1: Employees(EmpID, Name, DeptID) \n\uf0b7 \nTable 2: Departments(DeptID, DeptName) \n \n\ud83e\udde0 When Not to Normalize? \n\uf0b7 \nFor read-heavy applications (analytics, reporting) \n\uf0b7 \nWhen query performance is more important than data integrity \n \n\u2705 Real-Life Analogy \n\uf0b7 \n1NF: Each house (record) has its own mailbox (cell), not a shared one \n\uf0b7 \n2NF: One key opens only one mailbox (no shared access) \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 6, "text": "\uf0b7 \n3NF: The key opens the right mailbox and not someone else\u2019s cabinet (no indirect \ndependencies) \n \n \n12. INDEXING \nIndexing is a powerful technique to speed up SELECT queries on large tables. \n\uf0b7 \nSpeeds up WHERE, JOIN, GROUP BY, and ORDER BY queries \n\uf0b7 \nBoosts search performance on large datasets. \n\uf0b7 \nAvoid on frequently updated or low-cardinality columns \n\uf0b7 \nUse EXPLAIN to test effectiveness \n\uf0b7 \nAvoid over-indexing (inserts & updates become slower). \n\u2705 Types \n\uf0b7 \nSingle-column Index \n \nCREATE INDEX idx_salary ON Employees(salary); \n\uf0b7 \nComposite Index \n \nCREATE INDEX idx_name_dept ON Employees(name, department);\n \n13. VIEWS \n\uf0b7 \nA view is a virtual table based on a query \n\uf0b7 \nThey do not store data. Use Materialized Views (if supported) for cached result. \n\uf0b7 \nSimplify complex queries. \n\uf0b7 \nEnhance security (restrict column access) \n\uf0b7 \nEnable reusable logic \n\u2705 Example \nCREATE VIEW HR_Employees AS \nSELECT name, salary \nFROM Employees \nWHERE department = 'HR'; \n \n \n14. TRANSACTIONS & ACID \nA Transaction is a logical unit of work consisting of one or more SQL statements. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 7, "text": "Use ROLLBACK; to undo changes before COMMIT;. \n\uf0b7 \nACID: \no \nAtomicity: All or none \no \nConsistency: Valid data state \no \nIsolation: No interference \no \nDurability: Permanent changes \n\u2705 Example \nBEGIN; \nUPDATE Accounts SET balance = balance - 100 WHERE id = 1; \nUPDATE Accounts SET balance = balance + 100 WHERE id = 2; \nCOMMIT; \n \n15. WINDOW FUNCTIONS \nWindow functions perform calculations across rows related to the current row \u2014 without collapsing \nthem like GROUP BY.  \nUsed for row-level calculations without grouping. \nUse cases : Leaderboards, Change Tracking, Tired analysis \nRANK(), DENSE_RANK(), ROW_NUMBER() \n\u2705 Example \nSELECT name, salary, \n  RANK() OVER (ORDER BY salary DESC) AS salary_rank \nFROM Employees; \n\ud83d\udd11 Popular Window Functions \n\uf0b7 \nROW_NUMBER(), RANK(), DENSE_RANK() \n\uf0b7 \nLAG(), LEAD() \n\uf0b7 \nNTILE(n) (for percentiles) \n \n16. COMMON TABLE EXPRESSIONS (CTEs) \nCTEs are temporary result sets used within queries \u2014 easier to read & maintain. \n\u2705 Syntax \nWITH HighEarners AS ( \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 8, "text": "  SELECT * FROM Employees WHERE salary > 50000 \n) \nSELECT name FROM HighEarners; \n\ud83e\udde0 Benefits \n\uf0b7 \nBreak complex queries into readable blocks \n\uf0b7 \nUse recursive CTEs for hierarchical data \n \n17. UNION vs UNION ALL \nSELECT name FROM Managers \nUNION \nSELECT name FROM Employees; -- Removes duplicates \n \nSELECT name FROM Managers \nUNION ALL \nSELECT name FROM Employees; -- Keeps duplicates \n \n18. SET OPERATIONS \nSELECT name FROM A \nINTERSECT \nSELECT name FROM B; \n \nSELECT name FROM A \nEXCEPT \nSELECT name FROM B; \n\uf0b7 \n\u26a0 Not supported in MySQL; supported in PostgreSQL/SQL Server. \n \n19. NULL Handling \nSELECT name, COALESCE(nickname, 'No Nick') FROM Users; \nSELECT NULLIF(salary, 0);  -- Returns NULL if salary = 0 \n\uf0b7 \nUse IS NULL / IS NOT NULL \n\uf0b7 \nCOALESCE(), IFNULL(), NULLIF() \n \n20. CASE Statements \nSELECT name, \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 9, "text": "CASE \n  WHEN salary > 70000 THEN 'High' \n  WHEN salary > 40000 THEN 'Medium' \n  ELSE 'Low' \nEND AS salary_level \nFROM Employees; \n \n21. Stored Procedures & Functions (Advanced) \nStored Procedures are saved SQL blocks that perform actions. \nFunctions return a single value. Use procedures for reusable logic. Use functions in SELECT, WHERE, or \nJOIN clauses \n\u2705 Procedure Example \nCREATE PROCEDURE GetHighEarners() \nBEGIN \n  SELECT * FROM Employees WHERE salary > 70000; \nEND; \n\u2705 Function Example \nCREATE FUNCTION TaxAmount(salary DECIMAL) \nRETURNS DECIMAL \nBEGIN \n  RETURN salary * 0.10; \nEND; \n \n \n22. Temporary Tables \nCREATE TEMPORARY TABLE Temp_Employees AS \nSELECT * FROM Employees WHERE department = 'HR'; \n \n23. Triggers (Advanced - Rare) \nCREATE TRIGGER before_insert_trigger \nBEFORE INSERT ON Employees \nFOR EACH ROW \nSET NEW.salary = IF(NEW.salary < 0, 0, NEW.salary); \n\uf0b7 \nUsed for validation, logging, auto-calculation. \n \n24. Data Definition vs Data Manipulation vs Data Control \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 10, "text": "\uf0b7 \nDDL (Definition): CREATE, ALTER, DROP \n\uf0b7 \nDML (Manipulation): SELECT, INSERT, UPDATE, DELETE \n\uf0b7 \nDCL (Control): GRANT, REVOKE \n\uf0b7 \nTCL (Transaction): COMMIT, ROLLBACK \n \nINTERVIEW QUERY PATTERNS \n\u27a4 Nth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET 1; -- 2nd highest \n\u27a4 Duplicate Rows \nSELECT name, COUNT(*) \nFROM Employees \nGROUP BY name \nHAVING COUNT(*) > 1; \n\u27a4 Same Salary Employees \nSELECT * FROM Employees \nWHERE salary IN ( \n  SELECT salary FROM Employees \n  GROUP BY salary \n  HAVING COUNT(*) > 1 \n); \n\u27a4 Employees with Max Salary Per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, \n         RANK() OVER (PARTITION BY department_id ORDER BY salary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\u27a4 Self Join Example \nSELECT A.name AS Employee, B.name AS Manager \nFROM Employees A \nJOIN Employees B ON A.manager_id = B.id; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 11, "text": "\u27a4 EXISTS vs IN vs JOIN \n-- EXISTS \nSELECT name FROM Employees e \nWHERE EXISTS ( \n  SELECT 1 FROM Departments d WHERE d.id = e.department_id \n); \n-- IN \nSELECT name FROM Employees \nWHERE department_id IN (SELECT id FROM Departments); \n-- JOIN \nSELECT e.name, d.name FROM Employees e \nJOIN Departments d ON e.department_id = d.id; \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 12, "text": "Advanced SQL Topics \n \n1. Recursive CTEs (Made Simple) \nA Recursive CTE lets a query call itself, useful when working with hierarchies like employees \n& managers or categories & subcategories. \nEasy Analogy: \nThink of it like a loop in SQL. Start with one person (manager), then find their subordinates, then \nsubordinates of subordinates, and so on. \nSyntax: \nWITH RECURSIVE cte_name AS ( \n  SELECT ...  -- Starting point (anchor) \n  UNION ALL \n  SELECT ... FROM cte_name ... -- Repeat until done \n) \nSELECT * FROM cte_name; \nExample: \nWITH RECURSIVE Subordinates AS ( \n  SELECT id, name, manager_id FROM Employees WHERE id = 1 -- Top manager \n  UNION ALL \n  SELECT e.id, e.name, e.manager_id \n  FROM Employees e \n  JOIN Subordinates s ON e.manager_id = s.id \n) \nSELECT * FROM Subordinates; \n\u2705 This will return all employees working under manager ID 1, even indirectly. \n \n2. Window Functions \nThese functions look at other rows in the result without grouping them. Useful when you \nwant to compare each row with others. \nEveryday Use Case: \n\"Show each employee's salary along with the previous and next employee's salary.\" \nKey Functions: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 13, "text": "\uf0b7 \nLAG(column) \u2013 Looks before current row \n\uf0b7 \nLEAD(column) \u2013 Looks after current row \n\uf0b7 \nNTILE(n) \u2013 Divides into n equal groups (for percentiles/quartiles) \n\uf0b7 \nRANK(), DENSE_RANK(), ROW_NUMBER() \u2013 Ranking logic \nExample: \nSELECT name, salary, \n       LAG(salary) OVER (ORDER BY salary) AS prev_salary, \n       LEAD(salary) OVER (ORDER BY salary) AS next_salary \nFROM Employees; \n \n3. Working with JSON in SQL \nModern databases allow storing and querying JSON data inside SQL columns (especially \nuseful in dynamic or semi-structured data). \nPostgreSQL: \nSELECT data->>'name' AS name FROM orders WHERE data->>'status' = 'shipped'; \nMySQL: \nSELECT JSON_EXTRACT(data, '$.name') AS name FROM orders; \n\ud83d\udd0d Here, data is a column containing JSON like: { \"name\": \"Laptop\", \"status\": \"shipped\" } \n \n4. Performance Optimization Techniques \nOptimizing your SQL queries can make your app faster, especially for large data. \na. Indexing \n\uf0b7 \nLike a book index: helps locate rows faster \n\uf0b7 \nUseful for WHERE, JOIN, and ORDER BY \nCREATE INDEX idx_salary ON Employees(salary); \nb. Query Refactoring \n\uf0b7 \nAvoid SELECT * \u2192 only select needed columns \n\uf0b7 \nUse EXISTS instead of IN when subquery is large \n\uf0b7 \nApply filters early (use WHERE before GROUP BY) \nc. Execution Plan \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 14, "text": "Use EXPLAIN to understand how the database runs your query: \nEXPLAIN SELECT * FROM Employees WHERE department_id = 3; \n \n5. Stored Procedures & Functions (Simplified) \nStored Procedures = SQL scripts stored in the database that can be reused. Like a saved \nfunction. \nExample with Loop: \nDELIMITER // \nCREATE PROCEDURE GiveBonus() \nBEGIN \n  DECLARE done INT DEFAULT FALSE; \n  DECLARE emp_id INT; \n  DECLARE emp_cursor CURSOR FOR SELECT id FROM Employees; \n  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE; \n \n  OPEN emp_cursor; \n  read_loop: LOOP \n    FETCH emp_cursor INTO emp_id; \n    IF done THEN \n      LEAVE read_loop; \n    END IF; \n    UPDATE Employees SET salary = salary + 5000 WHERE id = emp_id; \n  END LOOP; \n  CLOSE emp_cursor; \nEND // \nDELIMITER ; \n\u2705 This procedure gives a \u20b95000 bonus to all employees. \n \n6. Importing/Exporting Data \nMoving data between CSV files and SQL is common in real projects. \nMySQL: \nLOAD DATA INFILE '/path/file.csv' \nINTO TABLE Employees \nFIELDS TERMINATED BY ',' \nLINES TERMINATED BY '\\n' \nIGNORE 1 ROWS; \nPostgreSQL: \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 15, "text": "COPY Employees(name, salary) \nFROM '/path/file.csv' \nDELIMITER ',' \nCSV HEADER; \n \n7. Role-Based Access Control (Security Basics) \nSQL lets you give different permissions to different users. \nExample: \nGRANT SELECT, INSERT ON Employees TO 'analyst'; \nREVOKE DELETE ON Employees FROM 'analyst'; \n\u2705 'analyst' can view and add data, but can't delete anything. \n \n8. Star vs Snowflake Schema  \nUsed in Data Warehouses & Reporting Tools. \nStar Schema: \n\uf0b7 \nOne central fact table (e.g., Sales) \n\uf0b7 \nLinked to dimension tables (Customer, Product) \n\uf0b7 \nEasy to query, faster for reporting \nSnowflake Schema: \n\uf0b7 \nDimensions are normalized \n\uf0b7 \nLess redundancy but more joins \n \n9. OLTP vs OLAP (Database Types Simplified) \nFeature \nOLTP \nOLAP \n              Purpose \nDaily transactions \nData analysis \n              Design \nHighly normalized \ntables \nDenormalized \nschema \n             Examples \nBanking, eCommerce Reporting,Data \nWarehouse \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "\ud83c\udfaf INTERVIEW & PLACEMENT \n \n\ud83d\udd39 Basic Level (Entry / Fresher) \n1. What is SQL? \nStructured Query Language used to interact with relational databases. \n2. What is the difference between WHERE and HAVING? \nWHERE filters rows before aggregation, HAVING filters after aggregation. \n3. What is a Primary Key? \nA unique identifier for each row in a table. Cannot contain NULL values. \n4. Difference between INNER JOIN and LEFT JOIN? \nINNER JOIN: Returns matched rows only. \nLEFT JOIN: Returns all rows from the left table, even if no match. \n5. How do you handle NULLs in SQL? \nUse IS NULL, IS NOT NULL, COALESCE(), IFNULL(), NULLIF(). \n6. What is a Foreign Key? \nIt links two tables by referring to the primary key of another table. \n7. What is normalization? \nProcess of organizing data to reduce redundancy and improve integrity. \n8. What is denormalization? \nCombining tables to improve read performance by reducing joins. \n9. What does the DISTINCT keyword do? \nRemoves duplicate rows from the result set. \n10. What is the use of LIMIT or TOP? \nUsed to limit the number of rows returned by a query. \n\ud83d\udd39 Intermediate Level \n11. What are aggregate functions? \nFunctions like SUM(), AVG(), COUNT(), MAX(), MIN(). \n12. What is a subquery? \nA query nested inside another query. \n13. What is the difference between UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey impro", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 16, "text": "een UNION and UNION ALL? \nUNION removes duplicates, UNION ALL includes all rows. \n14. Explain CASE statement. \nUsed to apply conditional logic within queries. \n15. What are indexes in SQL? \nThey improve the speed of data retrieval. \n16. What is a view? \nA virtual table based on the result-set of a query. \n17. What are window functions? \nFunctions like RANK(), ROW_NUMBER() that work across rows. \n18. Difference between RANK() and DENSE_RANK()? \nRANK() skips ranks on ties, DENSE_RANK() does not. \n19. What is a CTE (Common Table Expression)? \nA temporary result set defined within the execution scope of a query. \n20. Explain ACID properties. \nAtomicity, Consistency, Isolation, Durability - ensures reliable transactions. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": "21. What is a composite key? \nA primary key made of multiple columns. \n22. Difference between DELETE and TRUNCATE? \nDELETE can be conditional and logs row-by-row deletion; TRUNCATE removes all rows \nfaster without logging each deletion. \n23. What is a surrogate key? \nA unique identifier for an entity that is not derived from application data. \n24. What is referential integrity? \nEnsures foreign key values match primary key values in the referenced table. \n25. How does EXISTS differ from IN? \nEXISTS stops on first match; IN evaluates all results. \n26. How do you use GROUP BY with multiple columns? \nYou can group by multiple columns by separating them with commas. \n27. Can we use ORDER BY with GROUP BY? \nYes. GROUP BY groups the data; ORDER BY sorts the grouped results. \n28. What is a scalar subquery? \nA subquery that returns exactly one value. \n29. What are correlated subqueries? \nSubqueries that refer to columns from the outer query. \n30. What is the use of ISNULL() or IFNULL()? \nTo replace NULL values with custom values. \n\ud83d\udd39 Advanced Level \n31. What are triggers in SQL? \nProcedures that automatically execute on certain events. \n32. What are stored procedures? \nReusable blocks of SQL statements stored in the database. \n33. What is the use of EXPLAIN or EXPLAIN PLAN? \nTo understand how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *,", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 17, "text": " how the database executes a query. \n34. What are transactions? \nA unit of work that is performed against a database. \n35. How do you optimize a slow query? \nUse indexing, limit joins, avoid SELECT *, and use EXPLAIN to analyze. \n36. Difference between clustered and non-clustered index? \nClustered index determines row order in the table; non-clustered does not. \n37. Difference between OLTP and OLAP systems? \nOLTP: Online Transaction Processing (day-to-day operations). \nOLAP: Online Analytical Processing (data analysis and reporting). \n38. What are materialized views? \nStored query results that can be refreshed periodically. \n39. How do you implement pagination in SQL? \nUsing LIMIT and OFFSET or ROW_NUMBER() for custom logic. \n40. How do you handle duplicate rows? \nUsing ROW_NUMBER() or DISTINCT or CTEs with filtering. \n41. What are the different types of joins? \nINNER, LEFT, RIGHT, FULL OUTER, CROSS JOIN, SELF JOIN. \n42. What is a CROSS JOIN? \nReturns Cartesian product of two tables. \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 18, "text": "43. Can you sort by an alias in SQL? \nYes, you can use the alias name in the ORDER BY clause. \n44. What is the difference between SQL and NoSQL? \nSQL is relational and uses tables. NoSQL is non-relational and uses documents, key-\nvalue pairs, etc. \n45. What are the common data types in SQL? \nINT, VARCHAR, DATE, BOOLEAN, DECIMAL, TEXT. \n46. Can a table have multiple foreign keys? \nYes, a table can reference multiple other tables using foreign keys. \n47. What happens if you violate a foreign key constraint? \nThe query fails with an integrity constraint violation. \n48. How can you change a column datatype in SQL? \nUsing ALTER TABLE table_name MODIFY column_name new_datatype; \n49. What are NULL-safe operators? \nOperators like <=> in MySQL allow safe comparison with NULL. \n50. How would you detect and remove duplicate records? \nUsing CTE and ROW_NUMBER() to filter duplicates. \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 19, "text": "Real Company SQL Questions \nGoogle \n\uf0b7 \nSecond Highest Salary \nSELECT MAX(salary) AS SecondHighest \nFROM Employees \nWHERE salary < (SELECT MAX(salary) FROM Employees); \n\uf0b7 \nRemove Duplicate Emails Using ROW_NUMBER() \nWITH RankedEmails AS ( \n  SELECT *, ROW_NUMBER() OVER (PARTITION BY email ORDER BY id) \nAS rn \n  FROM Users \n) \nDELETE FROM RankedEmails WHERE rn > 1; \n\uf0b7 \nEmployees Earning More Than Average Salary \nSELECT name, salary \nFROM Employees \nWHERE salary > (SELECT AVG(salary) FROM Employees); \nAmazon \n\uf0b7 \nCustomers Who Ordered in Every Month \nSELECT customer_id \nFROM Orders \nGROUP BY customer_id \nHAVING COUNT(DISTINCT MONTH(order_date)) = 12; \n\uf0b7 \nTop 3 Earners in Each Department \nSELECT * \nFROM ( \n  SELECT *, DENSE_RANK() OVER (PARTITION BY department_id \nORDER BY salary DESC) AS rank \n  FROM Employees \n) ranked \nWHERE rank <= 3; \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 20, "text": "\uf0b7 \nFind Returning Users Using LAG \nSELECT user_id, order_date, \n       LAG(order_date) OVER (PARTITION BY user_id ORDER BY \norder_date) AS previous_order \nFROM Orders; \nTCS \n\uf0b7 \nEmployees Joined in Last 6 Months \nSELECT * FROM Employees \nWHERE join_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH); \n\uf0b7 \nManager-Reportee Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n\uf0b7 \nDepartment with Highest Average Salary \nSELECT department_id \nFROM Employees \nGROUP BY department_id \nORDER BY AVG(salary) DESC \nLIMIT 1; \nFlipkart \n\uf0b7 \nTop 5 Selling Products by Revenue \nSELECT product_id, SUM(price * quantity) AS revenue \nFROM Orders \nGROUP BY product_id \nORDER BY revenue DESC \nLIMIT 5; \n\uf0b7 \nUsers with More Than 3 Failed Transactions \nSELECT user_id \nFROM Transactions \nWHERE status = 'FAILED' \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 21, "text": "GROUP BY user_id \nHAVING COUNT(*) > 3; \n\uf0b7 \nOrders Not Yet Shipped \nSELECT * \nFROM Orders \nWHERE status = 'PLACED' AND shipped_date IS NULL; \nSQL Problem-Solving Round \n \n\uf0b7 \nNth Highest Salary \nSELECT DISTINCT salary \nFROM Employees \nORDER BY salary DESC \nLIMIT 1 OFFSET N-1; \n\uf0b7 \nDuplicate Emails \nSELECT email, COUNT(*) \nFROM Users \nGROUP BY email \nHAVING COUNT(*) > 1; \n\uf0b7 \nTop Earner per Department \nSELECT name, department_id, salary \nFROM ( \n  SELECT *, RANK() OVER (PARTITION BY department_id ORDER BY \nsalary DESC) AS rnk \n  FROM Employees \n) ranked \nWHERE rnk = 1; \n\uf0b7 \nCustomers Who Never Ordered \nSELECT c.customer_id, c.name \nFROM Customers c \nLEFT JOIN Orders o ON c.customer_id = o.customer_id \nWHERE o.order_id IS NULL; \n\uf0b7 \nEmployees Hired in the Last Month \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 22, "text": "SELECT * FROM Employees \nWHERE hire_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 \nMONTH) AND CURDATE(); \n\uf0b7 \nUser Order Summary \nSELECT user_id, COUNT(*) AS order_count, SUM(total_amount) AS \ntotal_spent \nFROM Orders \nGROUP BY user_id; \n\uf0b7 \n7-Day Rolling Login Count \nSELECT user_id, login_date, \n       COUNT(*) OVER ( \n         PARTITION BY user_id ORDER BY login_date \n         ROWS BETWEEN 6 PRECEDING AND CURRENT ROW \n       ) AS seven_day_logins \nFROM Logins; \n\uf0b7 \nFunnel Drop-off Analysis \nSELECT stage, COUNT(DISTINCT user_id) AS user_count \nFROM Funnel \nGROUP BY stage \nORDER BY stage; \n\uf0b7 \nAverage Time Between Orders \nSELECT user_id, AVG(DATEDIFF(order_date, LAG(order_date) OVER \n(PARTITION BY user_id ORDER BY order_date))) AS \navg_days_between_orders \nFROM Orders; \n\uf0b7 \nSelf Join for Employee Manager Mapping \nSELECT e.name AS Employee, m.name AS Manager \nFROM Employees e \nJOIN Employees m ON e.manager_id = m.id; \n \n", "file_name": "SQL_Notes_Bhawana.pdf"}, {"page": 1, "text": "DSA Interview Notes \u2013 Standard Layouts & Mappings \n \n1. Phone Keypad Mapping \nphone_map = { \n    \"2\": \"abc\", \"3\": \"def\", \n    \"4\": \"ghi\", \"5\": \"jkl\", \n    \"6\": \"mno\", \"7\": \"pqrs\", \n    \"8\": \"tuv\", \"9\": \"wxyz\" \n} \n\u2705 Use in: \n\uf0b7 \nLetter Combinations of Phone Number, Predictive Text / T9, Find All Possible Words from \nDigits  \n\uf0b7 \nBacktracking, DFS, Strings \n \n2. Grid/Matrix Directions \n4-Direction Movement (Up, Down, Left, Right) \ndirs_4 = [(-1, 0), (1, 0), (0, -1), (0, 1)] \n8-Direction Movement (Diagonals included) \ndirs_8 = [(-1, -1), (-1, 0), (-1, 1), \n          (0, -1),           (0, 1), \n          (1, -1),  (1, 0),  (1, 1)] \n\u2705 Use in: \n\uf0b7 \nNumber of Islands, Word Search, Maze Solving, Flood Fill \n\uf0b7 \nDFS/BFS, Matrix Problems \n \n3. Knight\u2019s Moves (Chessboard) \nknight_moves = [ \n    (2, 1), (1, 2), (-1, 2), (-2, 1), \n    (-2, -1), (-1, -2), (1, -2), (2, -1) \n] \n\u2705 Use in:  Knight\u2019s Tour, Minimum Knight Moves , Puzzle/Chess Grid\n \n", "file_name": "DSAnPython.pdf"}, {"page": 2, "text": "4. Binary Tree Traversals \nclass TreeNode: \n    def __init__(self, val=0, left=None, right=None): \n        self.val = val \n        self.left = left \n        self.right = right \n\uf0b7 \nPreorder: Root \u2192 Left \u2192 Right \n\uf0b7 \nInorder: Left \u2192 Root \u2192 Right \n\uf0b7 \nPostorder: Left \u2192 Right \u2192 Root \n\uf0b7 \nLevel Order: BFS using queue \n\u2705 Use in: Tree reconstruction, Path Sum, BST validation, Trees, Recursion, DFS\n \n5. Min Heap / Max Heap in Python \nimport heapq \n \n# Min Heap \nheapq.heappush(heap, val) \nheapq.heappop(heap) \n \n# Max Heap \nheapq.heappush(heap, -val) \nheapq.heappop(heap) * -1 \n\u2705 Use in: Top K elements, Median in stream, Kth smallest/largest, Greedy, Priority Queues\n \n6. ASCII Mapping (Characters \u2192 Numbers) \nord('a')  # 97 \nchr(97)   # 'a' \n \nord('z')  # 122 \n\u2705 Use in: Frequency Arrays (size 26), Anagrams, Palindrome Check , Frequency counting\n \n7. Keyboard Row Mapping \nrow1 = set(\"qwertyuiop\") \nrow2 = set(\"asdfghjkl\") \nrow3 = set(\"zxcvbnm\") \n\u2705 Use in: Words Using Only One Row of Keyboard, String filtering\n \n", "file_name": "DSAnPython.pdf"}, {"page": 3, "text": "8. Roman Numerals Mapping \nroman_map = { \n    'I': 1, 'V': 5, 'X': 10, \n    'L': 50, 'C': 100, 'D': 500, 'M': 1000 \n} \n\u2705 Use in: Roman to Integer, Integer to Roman, String / Math Conversion\n \n9. Weekday Layout (for calendar problems) \nweekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', \n'Friday', 'Saturday'] \n\u2705 Use in: Day calculation, Zeller\u2019s Congruence\n \n10. Digit to Word Mapping \ndigit_to_word = { \n  0: 'zero', 1: 'one', ..., 9: 'nine' \n} \n\u2705 Use in: Verbal arithmetic puzzles , Spoken digit output problems \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 4, "text": "The Top 14 LeetCode Patterns You Need to Know \n1. Sliding Window \n\u2705 Used when working with subarrays, substrings, or fixed-size / variable windows. \n     Helps in reducing time from O(n\u00b2) \u2192 O(n) \nExamples: Maximum Sum Subarray of Size K , Longest Substring Without Repeating Characters, \nMinimum Window Substring\n \n2. Two Pointers \n\u2705 Used for problems involving sorted arrays, linked lists, etc. \n     Moves two pointers from front/back/middle \nExamples: Two Sum II (sorted array), 3Sum, Container With Most Water\n \n3. Fast and Slow Pointers \n\u2705 Detect cycles, mid-points \nExamples: Linked List Cycle, Find the Duplicate Number , Middle of Linked List\n \n4. Hashing (HashMap / Set) \n\u2705 Count frequencies, track seen elements, prefix sums \nExamples: Subarray Sum Equals K , Group Anagrams , Longest Consecutive Sequence\n \n5. Prefix Sum \n\u2705 For cumulative/interval sums, range queries \nExamples: Subarray Sum Equals K , Range Sum Query , Count Subarrays with Sum\n \n6. Backtracking \n\u2705 Try all combinations, revert decisions \nExamples: Subsets , Permutations , Letter Combinations of a Phone Number, N-Queens \n", "file_name": "DSAnPython.pdf"}, {"page": 5, "text": " \n7. Recursion / DFS \n\u2705 Tree/graph traversal, subset problems \nExamples: Binary Tree Traversals , Generate Parentheses , Subsets\n \n8. Breadth-First Search (BFS) \n\u2705 Used in graphs, trees, shortest paths \nExamples: Binary Tree Level Order Traversal, Word Ladder, Number of Islands\n \n9. Depth-First Search (DFS) \n\u2705 Graph traversal, backtracking, component counting \nExamples: Number of Islands , Clone Graph , Word Search\n \n10. Greedy \n\u2705 Make best local choice at each step \nExamples: Jump Game , Merge Intervals , Gas Station , Partition Labels\n \n11. Dynamic Programming (DP) \n\u2705 Break down problem into subproblems, store results \nExamples: House Robber , Longest Increasing Subsequence , 0/1 Knapsack, Coin Change\n \n12. Bit Manipulation \n\u2705 Work with bits for optimization or tricky logic \nExamples: Single Number , Counting Bits , Subsets (with bitmasking) \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 6, "text": "13. Union Find (Disjoint Set) \n\u2705 Track connected components \nExamples: Graph Valid Tree , Number of Connected Components, Redundant Connection\n \n14. Heap / Priority Queue \n\u2705 Get max/min quickly, sliding window max, k-largest \nExamples: Kth Largest Element, Merge K Sorted Lists, Top K Frequent Elements \n \n \n \nExtra Patterns (Advanced \u2013 optional): \nIf you have time later, explore these bonus topics: \n1. Monotonic Stack / Deque \n2. Segment Trees / Binary Indexed Trees \n3. Dijkstra\u2019s / A* for weighted graphs \n4. Tries (prefix trees) \n5. Rabin-Karp (String Hashing) \nThese are not Amazon must-knows, but helpful for: \n\uf0b7 \nGoogle \n\uf0b7 \nDeep graph / string / optimization problems \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 7, "text": "1. Built-in Functions (Essentials) \n \nFunction \nPurpose \nExample \nmax() \nGet the maximum of values max(3, 7) \u2192 7 \nmin() \nGet the minimum \nmin(3, 7) \u2192 3 \nsum() \nSum of list values \nsum([1, 2, 3]) \u2192 6 \nlen() \nLength of list, string, etc. \nlen(arr) \nrange() \nGenerate a sequence \nrange(5) \u2192 0, 1, 2, 3, 4 \nenumerate() Loop with index \nfor i, val in enumerate(arr) \nreversed() \nReverse iterator \nfor val in reversed(arr) \nsorted() \nReturns sorted version of list sorted(arr) \nlist() \nConvert to list \nlist(\"abc\") \u2192 ['a','b','c'] \n \n2. Strings \u2013 Helpful Methods \n \nFunction \nPurpose \nExample \nstr.split() \nSplit string into list \n\"a b c\".split() \u2192 ['a','b','c'] \nstr.strip() \nRemove whitespace \n\" abc \".strip() \u2192 \"abc\" \nstr.isdigit() \nCheck if string is a digit \"123\".isdigit() \u2192 True \nstr.lower() / upper() Convert case \n\"HeLLo\".lower() \u2192 \"hello\" \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 8, "text": "3. Lists \u2013 Core Methods \nMethod \nPurpose \nExample \nlist.append(x) Add element at the end \narr.append(10) \nlist.pop() \nRemove last element \narr.pop() \nlist.remove(x) Remove element by value arr.remove(2) \nlist.index(x) \nGet index of value \narr.index(5) \nlist.insert(i, x) Insert at index \narr.insert(1, 99) \nlist.count(x) Count occurrences \narr.count(2) \n \n4. Dictionary (Hashmap) \u2013 Extremely Useful \nMethod / Function \nPurpose \nExample \ndict.get(key, default) Get value or return default d.get('a', 0) \ndict.keys() / values() Iterate keys/values \nfor key in d.keys() \ndict.items() \nIterate key, value pairs \nfor k, v in d.items() \nkey in dict \nCheck if key exists \n'a' in d \ndefaultdict(int) \nAuto-handle missing keys from collections import defaultdict \n \n5. Collections Module \nTool \nPurpose \nExample \ndefaultdict(type) Dictionary with default values dd = defaultdict(int) \nCounter() \nCount occurrences of elements Counter(\"aabc\") \u2192 {'a':2, 'b':1,...} \ndeque() \nDouble-ended queue \ndq = deque([1,2,3]) \nheapq \nPriority Queue / Min Heap \nheapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 9, "text": "6. Math / Time / Random \n \nModule \nFunction \nPurpose \nmath \nmath.sqrt(), math.ceil() Square root, rounding \ntime \ntime.time() \nGet current time (for speed) \nrandom random.randint() \nRandom numbers (for mock tests) \n \n7. Useful Tricks \nTrick \nDescription \nExample \narr[::-1] \nReverse a list or string \ns[::-1] \na, b = b, a Swap variables \n \n' '.join(list) Convert list to string with spaces ' '.join(['a','b']) \u2192 \"a b\" \nall() / any() Check all / any condition is True all([1, True]) \n \nBonus: Lambda & Key Functions (for Sorting) \narr.sort(key=lambda x: x[1])  # Sort by second element of sublists \nUseful for: \n\uf0b7 \nSorting arrays of tuples \n\uf0b7 \nSorting by custom logic \n \nGreat question, Bhawana! You're already covering a solid base. But yes \u2014 here\u2019s a final \nroundup of additional useful Python concepts and functions that are often overlooked but \ncritical in real DSA problems (especially in contests and interviews like Amazon). \n \n", "file_name": "DSAnPython.pdf"}, {"page": 10, "text": "8. Advanced Built-ins & Tricks (Most Students Miss These!) \nFeature/Function \nUse Case \nExample \nzip() \nLoop over multiple iterables \nsimultaneously \nfor a, b in zip(arr1, \narr2) \nmap() \nApply function to each item \nmap(int, input().split()) \nfilter() \nFilter elements by condition \nfilter(lambda x: x > 0, \narr) \nset() \nRemoves duplicates, used for \nfast lookup \nset(arr) \nset.add() / set.remove() \nModify set \n \nislice() from itertools \nSlicing iterators \nislice(range(100), 10, 20) \nbisect.bisect_left() / \nbisect_right() \nBinary search in sorted list \nbisect.bisect_left(arr, x) \nany() \nTrue if any element is truthy \nany([False, True, False]) \n\u2192 True \nall() \nTrue if all elements are truthy \nall([1, 2, 3]) \u2192 True \nre module \nRegex for pattern matching \n(sometimes needed in parsing) re.findall(r'\\d+', s) \n \n9. Built-in Data Types You Must Master \nType \nWhen to Use \nQuick Syntax Example \nlist Ordered, indexable \na = [1, 2, 3] \ntuple Immutable, hashable keys a = (1, 2) \nset \nUnique values, fast lookup a = {1, 2, 3} \ndict Key-value mapping \nd = {'a': 1} \ndeque Queue/Stack with fast ops deque([1,2,3]) from collections \nheap Min/Max heap for priority heapq.heappush(heap, val) \n \n", "file_name": "DSAnPython.pdf"}, {"page": 11, "text": "10. Collections Deep Dive (Very Interview-Friendly) \nTool \nUse Case \nExample \ndefaultdict(list/int) Auto-initialize missing keys dd = defaultdict(list) \nCounter() \nCount occurrences of each \nelement \nCounter([1,2,2,3]) \u2192 {2:2, 1:1, \n3:1} \nOrderedDict() \nKeeps insertion order \n(Rarely used now, since dicts are ordered from \nPython 3.7+) \ndeque() \nQueue or two-sided \noperations \ndq.popleft(), dq.appendleft() \n \n11. heapq (Min/Max Heap) \nimport heapq \nmin_heap = [] \nheapq.heappush(min_heap, 5) \nheapq.heappush(min_heap, 3) \nheapq.heappop(min_heap)  # returns 3 (smallest) \nUse in: \n\u2705 Top-K problems, \n\u2705 Priority queues, \n\u2705 Greedy algorithms \n \n12. Functools (for memoization and recursion) \nfrom functools import lru_cache \n \n@lru_cache(None) \ndef fib(n): \n    if n <= 1: \n        return n \n    return fib(n-1) + fib(n-2) \nUse in: \n\u2705 Dynamic Programming, \n\u2705 Top-down memoization, \n\u2705 Recursion-heavy problems \n", "file_name": "DSAnPython.pdf"}, {"page": 12, "text": " \n13. Bit Manipulation Functions \nBit Trick \nPurpose \nx << 1, x >> 1 \nBit shifts (multiply/divide by 2) \nx & 1 \nCheck if x is odd \nx ^ y \nBitwise XOR \nbin(x).count('1') Count set bits in x \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 13, "text": "Python Notes for Beginners to Intermediate \n 1. Introduction to Python \n\uf0b7 \nHigh-level, interpreted, and dynamically typed programming language. \n\uf0b7 \nCreated by Guido van Rossum, released in 1991. \n\uf0b7 \nGreat for web dev, data science, automation, AI, scripting, etc. \n \n2. Basic Syntax \n# This is a comment \nprint(\"Hello, World!\")  # Output: Hello, World! \n\uf0b7 \nIndentation is mandatory in Python to define blocks. \n\uf0b7 \nNo {} or ; like in C/C++/Java. \n \n3. Data Types \n\uf0b7 \nint, float, str, bool \n\uf0b7 \nlist, tuple, set, dict \n\uf0b7 \nNoneType \na = 5               # int \nb = 5.0             # float \nc = \"Python\"        # str \nd = True            # bool \n \n4. Type Conversion \nint(\"5\")        # 5 \nfloat(\"3.14\")   # 3.14 \nstr(100)        # \"100\" \nbool(0)         # False \n \n5. Variables \n\uf0b7 \nNo need to declare the type. \n\uf0b7 \nFollows snake_case naming. \nname = \"Bhawana\" \nage = 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 14, "text": " \n6. Control Flow \nif / elif / else \nif age > 18: \n    print(\"Adult\") \nelif age == 18: \n    print(\"Just turned adult\") \nelse: \n    print(\"Minor\") \nwhile loop \ni = 0 \nwhile i < 5: \n    print(i) \n    i += 1 \nfor loop \nfor i in range(5): \n    print(i) \n \n 7. Functions \ndef greet(name): \n    return f\"Hello, {name}\" \n \nprint(greet(\"Bhawana\")) \n \n8. Strings \ntext = \"Python\" \nprint(text.upper())       # 'PYTHON' \nprint(text[0])            # 'P' \nprint(len(text))          # 6 \nprint(\"th\" in text)       # True \n \n9. Lists \nfruits = [\"apple\", \"banana\", \"mango\"] \nfruits.append(\"orange\") \nprint(fruits[1])          # \"banana\" \n \n", "file_name": "DSAnPython.pdf"}, {"page": 15, "text": "10. Tuples \nt = (1, 2, 3) \n# Immutable \nprint(t[0])               # 1 \n \n11. Dictionaries \nstudent = {\"name\": \"Alice\", \"age\": 20} \nprint(student[\"name\"])    # Alice \nstudent[\"age\"] = 21 \n \n12. Sets \nnums = {1, 2, 3, 2} \nprint(nums)               # {1, 2, 3} - duplicates removed \n \n13. Exception Handling \ntry: \n    x = 1 / 0 \nexcept ZeroDivisionError: \n    print(\"Can't divide by zero!\") \nfinally: \n    print(\"Done\") \n \n14. Modules and Libraries \nimport math \nprint(math.sqrt(16))      # 4.0 \nInstall external modules: \npip install requests \n \n15. List Comprehension \nsquares = [x**2 for x in range(5)]   # [0, 1, 4, 9, 16] \n \n16. Lambda Functions \nsquare = lambda x: x ** 2 \nprint(square(5))          # 25 \n", "file_name": "DSAnPython.pdf"}, {"page": 16, "text": " \n 17. Object-Oriented Programming (OOP) \nclass Person: \n    def __init__(self, name): \n        self.name = name \n \n    def say_hi(self): \n        print(f\"Hi, I'm {self.name}\") \n \np = Person(\"Bhawana\") \np.say_hi() \n \n18. File Handling \nwith open(\"file.txt\", \"r\") as file: \n    content = file.read() \n    print(content) \n \n19. Useful Built-in Functions \n\uf0b7 \nlen(), type(), range(), sorted(), input(), sum(), max(), min() \n \n20. Best Practices \n\uf0b7 \nUse meaningful variable names. \n\uf0b7 \nKeep code DRY (Don't Repeat Yourself). \n\uf0b7 \nUse virtual environments. \n\uf0b7 \nFollow PEP8 (Python Style Guide). \n \n \n \n \n \n \n \n \n", "file_name": "DSAnPython.pdf"}, {"page": 17, "text": " \n", "file_name": "DSAnPython.pdf"}]